
low_pass_filter_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003e84  08003e84  00013e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e9c  08003e9c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08003e9c  08003e9c  00013e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ea4  08003ea4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea4  08003ea4  00013ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ea8  08003ea8  00013ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003eac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000088  08003f30  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08003f30  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afc8  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001962  00000000  00000000  0002b07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002c9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a88  00000000  00000000  0002d520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e86  00000000  00000000  0002dfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a24a  00000000  00000000  00043e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c409  00000000  00000000  0004e078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da481  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003064  00000000  00000000  000da4d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000088 	.word	0x20000088
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003e6c 	.word	0x08003e6c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	08003e6c 	.word	0x08003e6c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_uldivmod>:
 8000974:	b953      	cbnz	r3, 800098c <__aeabi_uldivmod+0x18>
 8000976:	b94a      	cbnz	r2, 800098c <__aeabi_uldivmod+0x18>
 8000978:	2900      	cmp	r1, #0
 800097a:	bf08      	it	eq
 800097c:	2800      	cmpeq	r0, #0
 800097e:	bf1c      	itt	ne
 8000980:	f04f 31ff 	movne.w	r1, #4294967295
 8000984:	f04f 30ff 	movne.w	r0, #4294967295
 8000988:	f000 b96e 	b.w	8000c68 <__aeabi_idiv0>
 800098c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000990:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000994:	f000 f806 	bl	80009a4 <__udivmoddi4>
 8000998:	f8dd e004 	ldr.w	lr, [sp, #4]
 800099c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009a0:	b004      	add	sp, #16
 80009a2:	4770      	bx	lr

080009a4 <__udivmoddi4>:
 80009a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a8:	9d08      	ldr	r5, [sp, #32]
 80009aa:	4604      	mov	r4, r0
 80009ac:	468c      	mov	ip, r1
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f040 8083 	bne.w	8000aba <__udivmoddi4+0x116>
 80009b4:	428a      	cmp	r2, r1
 80009b6:	4617      	mov	r7, r2
 80009b8:	d947      	bls.n	8000a4a <__udivmoddi4+0xa6>
 80009ba:	fab2 f282 	clz	r2, r2
 80009be:	b142      	cbz	r2, 80009d2 <__udivmoddi4+0x2e>
 80009c0:	f1c2 0020 	rsb	r0, r2, #32
 80009c4:	fa24 f000 	lsr.w	r0, r4, r0
 80009c8:	4091      	lsls	r1, r2
 80009ca:	4097      	lsls	r7, r2
 80009cc:	ea40 0c01 	orr.w	ip, r0, r1
 80009d0:	4094      	lsls	r4, r2
 80009d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80009d6:	0c23      	lsrs	r3, r4, #16
 80009d8:	fbbc f6f8 	udiv	r6, ip, r8
 80009dc:	fa1f fe87 	uxth.w	lr, r7
 80009e0:	fb08 c116 	mls	r1, r8, r6, ip
 80009e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009e8:	fb06 f10e 	mul.w	r1, r6, lr
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d909      	bls.n	8000a04 <__udivmoddi4+0x60>
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80009f6:	f080 8119 	bcs.w	8000c2c <__udivmoddi4+0x288>
 80009fa:	4299      	cmp	r1, r3
 80009fc:	f240 8116 	bls.w	8000c2c <__udivmoddi4+0x288>
 8000a00:	3e02      	subs	r6, #2
 8000a02:	443b      	add	r3, r7
 8000a04:	1a5b      	subs	r3, r3, r1
 8000a06:	b2a4      	uxth	r4, r4
 8000a08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a18:	45a6      	cmp	lr, r4
 8000a1a:	d909      	bls.n	8000a30 <__udivmoddi4+0x8c>
 8000a1c:	193c      	adds	r4, r7, r4
 8000a1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a22:	f080 8105 	bcs.w	8000c30 <__udivmoddi4+0x28c>
 8000a26:	45a6      	cmp	lr, r4
 8000a28:	f240 8102 	bls.w	8000c30 <__udivmoddi4+0x28c>
 8000a2c:	3802      	subs	r0, #2
 8000a2e:	443c      	add	r4, r7
 8000a30:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a34:	eba4 040e 	sub.w	r4, r4, lr
 8000a38:	2600      	movs	r6, #0
 8000a3a:	b11d      	cbz	r5, 8000a44 <__udivmoddi4+0xa0>
 8000a3c:	40d4      	lsrs	r4, r2
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e9c5 4300 	strd	r4, r3, [r5]
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	b902      	cbnz	r2, 8000a4e <__udivmoddi4+0xaa>
 8000a4c:	deff      	udf	#255	; 0xff
 8000a4e:	fab2 f282 	clz	r2, r2
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	d150      	bne.n	8000af8 <__udivmoddi4+0x154>
 8000a56:	1bcb      	subs	r3, r1, r7
 8000a58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a5c:	fa1f f887 	uxth.w	r8, r7
 8000a60:	2601      	movs	r6, #1
 8000a62:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a66:	0c21      	lsrs	r1, r4, #16
 8000a68:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a70:	fb08 f30c 	mul.w	r3, r8, ip
 8000a74:	428b      	cmp	r3, r1
 8000a76:	d907      	bls.n	8000a88 <__udivmoddi4+0xe4>
 8000a78:	1879      	adds	r1, r7, r1
 8000a7a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0xe2>
 8000a80:	428b      	cmp	r3, r1
 8000a82:	f200 80e9 	bhi.w	8000c58 <__udivmoddi4+0x2b4>
 8000a86:	4684      	mov	ip, r0
 8000a88:	1ac9      	subs	r1, r1, r3
 8000a8a:	b2a3      	uxth	r3, r4
 8000a8c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a90:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a94:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a98:	fb08 f800 	mul.w	r8, r8, r0
 8000a9c:	45a0      	cmp	r8, r4
 8000a9e:	d907      	bls.n	8000ab0 <__udivmoddi4+0x10c>
 8000aa0:	193c      	adds	r4, r7, r4
 8000aa2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aa6:	d202      	bcs.n	8000aae <__udivmoddi4+0x10a>
 8000aa8:	45a0      	cmp	r8, r4
 8000aaa:	f200 80d9 	bhi.w	8000c60 <__udivmoddi4+0x2bc>
 8000aae:	4618      	mov	r0, r3
 8000ab0:	eba4 0408 	sub.w	r4, r4, r8
 8000ab4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ab8:	e7bf      	b.n	8000a3a <__udivmoddi4+0x96>
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d909      	bls.n	8000ad2 <__udivmoddi4+0x12e>
 8000abe:	2d00      	cmp	r5, #0
 8000ac0:	f000 80b1 	beq.w	8000c26 <__udivmoddi4+0x282>
 8000ac4:	2600      	movs	r6, #0
 8000ac6:	e9c5 0100 	strd	r0, r1, [r5]
 8000aca:	4630      	mov	r0, r6
 8000acc:	4631      	mov	r1, r6
 8000ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad2:	fab3 f683 	clz	r6, r3
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d14a      	bne.n	8000b70 <__udivmoddi4+0x1cc>
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d302      	bcc.n	8000ae4 <__udivmoddi4+0x140>
 8000ade:	4282      	cmp	r2, r0
 8000ae0:	f200 80b8 	bhi.w	8000c54 <__udivmoddi4+0x2b0>
 8000ae4:	1a84      	subs	r4, r0, r2
 8000ae6:	eb61 0103 	sbc.w	r1, r1, r3
 8000aea:	2001      	movs	r0, #1
 8000aec:	468c      	mov	ip, r1
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	d0a8      	beq.n	8000a44 <__udivmoddi4+0xa0>
 8000af2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000af6:	e7a5      	b.n	8000a44 <__udivmoddi4+0xa0>
 8000af8:	f1c2 0320 	rsb	r3, r2, #32
 8000afc:	fa20 f603 	lsr.w	r6, r0, r3
 8000b00:	4097      	lsls	r7, r2
 8000b02:	fa01 f002 	lsl.w	r0, r1, r2
 8000b06:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b0a:	40d9      	lsrs	r1, r3
 8000b0c:	4330      	orrs	r0, r6
 8000b0e:	0c03      	lsrs	r3, r0, #16
 8000b10:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b14:	fa1f f887 	uxth.w	r8, r7
 8000b18:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b20:	fb06 f108 	mul.w	r1, r6, r8
 8000b24:	4299      	cmp	r1, r3
 8000b26:	fa04 f402 	lsl.w	r4, r4, r2
 8000b2a:	d909      	bls.n	8000b40 <__udivmoddi4+0x19c>
 8000b2c:	18fb      	adds	r3, r7, r3
 8000b2e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b32:	f080 808d 	bcs.w	8000c50 <__udivmoddi4+0x2ac>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 808a 	bls.w	8000c50 <__udivmoddi4+0x2ac>
 8000b3c:	3e02      	subs	r6, #2
 8000b3e:	443b      	add	r3, r7
 8000b40:	1a5b      	subs	r3, r3, r1
 8000b42:	b281      	uxth	r1, r0
 8000b44:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b48:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b50:	fb00 f308 	mul.w	r3, r0, r8
 8000b54:	428b      	cmp	r3, r1
 8000b56:	d907      	bls.n	8000b68 <__udivmoddi4+0x1c4>
 8000b58:	1879      	adds	r1, r7, r1
 8000b5a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b5e:	d273      	bcs.n	8000c48 <__udivmoddi4+0x2a4>
 8000b60:	428b      	cmp	r3, r1
 8000b62:	d971      	bls.n	8000c48 <__udivmoddi4+0x2a4>
 8000b64:	3802      	subs	r0, #2
 8000b66:	4439      	add	r1, r7
 8000b68:	1acb      	subs	r3, r1, r3
 8000b6a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b6e:	e778      	b.n	8000a62 <__udivmoddi4+0xbe>
 8000b70:	f1c6 0c20 	rsb	ip, r6, #32
 8000b74:	fa03 f406 	lsl.w	r4, r3, r6
 8000b78:	fa22 f30c 	lsr.w	r3, r2, ip
 8000b7c:	431c      	orrs	r4, r3
 8000b7e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000b82:	fa01 f306 	lsl.w	r3, r1, r6
 8000b86:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b8a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	0c3b      	lsrs	r3, r7, #16
 8000b92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b96:	fa1f f884 	uxth.w	r8, r4
 8000b9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b9e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ba2:	fb09 fa08 	mul.w	sl, r9, r8
 8000ba6:	458a      	cmp	sl, r1
 8000ba8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bac:	fa00 f306 	lsl.w	r3, r0, r6
 8000bb0:	d908      	bls.n	8000bc4 <__udivmoddi4+0x220>
 8000bb2:	1861      	adds	r1, r4, r1
 8000bb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bb8:	d248      	bcs.n	8000c4c <__udivmoddi4+0x2a8>
 8000bba:	458a      	cmp	sl, r1
 8000bbc:	d946      	bls.n	8000c4c <__udivmoddi4+0x2a8>
 8000bbe:	f1a9 0902 	sub.w	r9, r9, #2
 8000bc2:	4421      	add	r1, r4
 8000bc4:	eba1 010a 	sub.w	r1, r1, sl
 8000bc8:	b2bf      	uxth	r7, r7
 8000bca:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bce:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bd2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000bd6:	fb00 f808 	mul.w	r8, r0, r8
 8000bda:	45b8      	cmp	r8, r7
 8000bdc:	d907      	bls.n	8000bee <__udivmoddi4+0x24a>
 8000bde:	19e7      	adds	r7, r4, r7
 8000be0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be4:	d22e      	bcs.n	8000c44 <__udivmoddi4+0x2a0>
 8000be6:	45b8      	cmp	r8, r7
 8000be8:	d92c      	bls.n	8000c44 <__udivmoddi4+0x2a0>
 8000bea:	3802      	subs	r0, #2
 8000bec:	4427      	add	r7, r4
 8000bee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bf2:	eba7 0708 	sub.w	r7, r7, r8
 8000bf6:	fba0 8902 	umull	r8, r9, r0, r2
 8000bfa:	454f      	cmp	r7, r9
 8000bfc:	46c6      	mov	lr, r8
 8000bfe:	4649      	mov	r1, r9
 8000c00:	d31a      	bcc.n	8000c38 <__udivmoddi4+0x294>
 8000c02:	d017      	beq.n	8000c34 <__udivmoddi4+0x290>
 8000c04:	b15d      	cbz	r5, 8000c1e <__udivmoddi4+0x27a>
 8000c06:	ebb3 020e 	subs.w	r2, r3, lr
 8000c0a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c0e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c12:	40f2      	lsrs	r2, r6
 8000c14:	ea4c 0202 	orr.w	r2, ip, r2
 8000c18:	40f7      	lsrs	r7, r6
 8000c1a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c1e:	2600      	movs	r6, #0
 8000c20:	4631      	mov	r1, r6
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	462e      	mov	r6, r5
 8000c28:	4628      	mov	r0, r5
 8000c2a:	e70b      	b.n	8000a44 <__udivmoddi4+0xa0>
 8000c2c:	4606      	mov	r6, r0
 8000c2e:	e6e9      	b.n	8000a04 <__udivmoddi4+0x60>
 8000c30:	4618      	mov	r0, r3
 8000c32:	e6fd      	b.n	8000a30 <__udivmoddi4+0x8c>
 8000c34:	4543      	cmp	r3, r8
 8000c36:	d2e5      	bcs.n	8000c04 <__udivmoddi4+0x260>
 8000c38:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c3c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c40:	3801      	subs	r0, #1
 8000c42:	e7df      	b.n	8000c04 <__udivmoddi4+0x260>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e7d2      	b.n	8000bee <__udivmoddi4+0x24a>
 8000c48:	4660      	mov	r0, ip
 8000c4a:	e78d      	b.n	8000b68 <__udivmoddi4+0x1c4>
 8000c4c:	4681      	mov	r9, r0
 8000c4e:	e7b9      	b.n	8000bc4 <__udivmoddi4+0x220>
 8000c50:	4666      	mov	r6, ip
 8000c52:	e775      	b.n	8000b40 <__udivmoddi4+0x19c>
 8000c54:	4630      	mov	r0, r6
 8000c56:	e74a      	b.n	8000aee <__udivmoddi4+0x14a>
 8000c58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c5c:	4439      	add	r1, r7
 8000c5e:	e713      	b.n	8000a88 <__udivmoddi4+0xe4>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	e724      	b.n	8000ab0 <__udivmoddi4+0x10c>
 8000c66:	bf00      	nop

08000c68 <__aeabi_idiv0>:
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c6c:	b5b0      	push	{r4, r5, r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c72:	f000 fdab 	bl	80017cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c76:	f000 f893 	bl	8000da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c7a:	f000 fa4b 	bl	8001114 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c7e:	f000 fa1f 	bl	80010c0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000c82:	f000 f8f5 	bl	8000e70 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000c86:	f000 f94b 	bl	8000f20 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000c8a:	f000 f9cb 	bl	8001024 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // start micro
  HAL_TIM_Base_Start_IT(&htim5);
 8000c8e:	483b      	ldr	r0, [pc, #236]	; (8000d7c <main+0x110>)
 8000c90:	f001 fd79 	bl	8002786 <HAL_TIM_Base_Start_IT>

  // start PWM
  HAL_TIM_Base_Start(&htim3);
 8000c94:	483a      	ldr	r0, [pc, #232]	; (8000d80 <main+0x114>)
 8000c96:	f001 fd52 	bl	800273e <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_ALL);
 8000c9a:	213c      	movs	r1, #60	; 0x3c
 8000c9c:	4838      	ldr	r0, [pc, #224]	; (8000d80 <main+0x114>)
 8000c9e:	f001 fdcb 	bl	8002838 <HAL_TIM_PWM_Start>


  // start QEI
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000ca2:	213c      	movs	r1, #60	; 0x3c
 8000ca4:	4837      	ldr	r0, [pc, #220]	; (8000d84 <main+0x118>)
 8000ca6:	f001 fe8b 	bl	80029c0 <HAL_TIM_Encoder_Start>


  //init lowpass_filter
  for(int i = 0;i < 10;i++){
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	e00f      	b.n	8000cd0 <main+0x64>
	  lowpass_filters[i].Wc = Wc_arr[i];
 8000cb0:	4a35      	ldr	r2, [pc, #212]	; (8000d88 <main+0x11c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	4413      	add	r3, r2
 8000cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cbc:	4833      	ldr	r0, [pc, #204]	; (8000d8c <main+0x120>)
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	0149      	lsls	r1, r1, #5
 8000cc2:	4401      	add	r1, r0
 8000cc4:	3118      	adds	r1, #24
 8000cc6:	e9c1 2300 	strd	r2, r3, [r1]
  for(int i = 0;i < 10;i++){
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b09      	cmp	r3, #9
 8000cd4:	ddec      	ble.n	8000cb0 <main+0x44>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  encoder_value = unwraping_update();
 8000cd6:	f000 fa8d 	bl	80011f4 <unwraping_update>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a2c      	ldr	r2, [pc, #176]	; (8000d90 <main+0x124>)
 8000cde:	6013      	str	r3, [r2, #0]

	  if(micros() - time_stamp > 1000){ // 1kHz
 8000ce0:	f000 fb96 	bl	8001410 <micros>
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <main+0x128>)
 8000ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cea:	1a84      	subs	r4, r0, r2
 8000cec:	eb61 0503 	sbc.w	r5, r1, r3
 8000cf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	42ab      	cmp	r3, r5
 8000cfa:	bf08      	it	eq
 8000cfc:	42a2      	cmpeq	r2, r4
 8000cfe:	d2ea      	bcs.n	8000cd6 <main+0x6a>
		  time_stamp = micros();
 8000d00:	f000 fb86 	bl	8001410 <micros>
 8000d04:	4602      	mov	r2, r0
 8000d06:	460b      	mov	r3, r1
 8000d08:	4922      	ldr	r1, [pc, #136]	; (8000d94 <main+0x128>)
 8000d0a:	e9c1 2300 	strd	r2, r3, [r1]

		  encoder_velocity = velocity_update(encoder_value);
 8000d0e:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <main+0x124>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 faac 	bl	8001270 <velocity_update>
 8000d18:	eeb0 7a40 	vmov.f32	s14, s0
 8000d1c:	eef0 7a60 	vmov.f32	s15, s1
 8000d20:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <main+0x12c>)
 8000d22:	ed83 7b00 	vstr	d7, [r3]

		  for(int i = 0;i < 10;i++){
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	e01a      	b.n	8000d62 <main+0xf6>
			  lowpass_output[i] = low_pass_process(&lowpass_filters[i], encoder_velocity);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	015b      	lsls	r3, r3, #5
 8000d30:	4a16      	ldr	r2, [pc, #88]	; (8000d8c <main+0x120>)
 8000d32:	4413      	add	r3, r2
 8000d34:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <main+0x12c>)
 8000d36:	ed92 7b00 	vldr	d7, [r2]
 8000d3a:	eeb0 0a47 	vmov.f32	s0, s14
 8000d3e:	eef0 0a67 	vmov.f32	s1, s15
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 fad2 	bl	80012ec <low_pass_process>
 8000d48:	eeb0 7a40 	vmov.f32	s14, s0
 8000d4c:	eef0 7a60 	vmov.f32	s15, s1
 8000d50:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <main+0x130>)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	4413      	add	r3, r2
 8000d58:	ed83 7b00 	vstr	d7, [r3]
		  for(int i = 0;i < 10;i++){
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	2b09      	cmp	r3, #9
 8000d66:	dde1      	ble.n	8000d2c <main+0xc0>
		  }

		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,10000);
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <main+0x114>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d70:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 8000d72:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <main+0x114>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2200      	movs	r2, #0
 8000d78:	639a      	str	r2, [r3, #56]	; 0x38
	  encoder_value = unwraping_update();
 8000d7a:	e7ac      	b.n	8000cd6 <main+0x6a>
 8000d7c:	20000298 	.word	0x20000298
 8000d80:	200002d8 	.word	0x200002d8
 8000d84:	20000318 	.word	0x20000318
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	200000c8 	.word	0x200000c8
 8000d90:	200000b0 	.word	0x200000b0
 8000d94:	200000c0 	.word	0x200000c0
 8000d98:	200000b8 	.word	0x200000b8
 8000d9c:	20000208 	.word	0x20000208

08000da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b094      	sub	sp, #80	; 0x50
 8000da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da6:	f107 0320 	add.w	r3, r7, #32
 8000daa:	2230      	movs	r2, #48	; 0x30
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f003 f854 	bl	8003e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <SystemClock_Config+0xc8>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	4a26      	ldr	r2, [pc, #152]	; (8000e68 <SystemClock_Config+0xc8>)
 8000dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd4:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <SystemClock_Config+0xc8>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de0:	2300      	movs	r3, #0
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <SystemClock_Config+0xcc>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <SystemClock_Config+0xcc>)
 8000dea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <SystemClock_Config+0xcc>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e00:	2301      	movs	r3, #1
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e04:	2310      	movs	r3, #16
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e10:	2308      	movs	r3, #8
 8000e12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e14:	2364      	movs	r3, #100	; 0x64
 8000e16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e20:	f107 0320 	add.w	r3, r7, #32
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 fff3 	bl	8001e10 <HAL_RCC_OscConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e30:	f000 fb22 	bl	8001478 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e34:	230f      	movs	r3, #15
 8000e36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	2103      	movs	r1, #3
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 fa4d 	bl	80022f0 <HAL_RCC_ClockConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e5c:	f000 fb0c 	bl	8001478 <Error_Handler>
  }
}
 8000e60:	bf00      	nop
 8000e62:	3750      	adds	r7, #80	; 0x50
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40007000 	.word	0x40007000

08000e70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	; 0x30
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	2224      	movs	r2, #36	; 0x24
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f002 ffec 	bl	8003e5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <MX_TIM1_Init+0xa8>)
 8000e8e:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <MX_TIM1_Init+0xac>)
 8000e90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_TIM1_Init+0xa8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_TIM1_Init+0xa8>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = (12*64*4) -1;
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <MX_TIM1_Init+0xa8>)
 8000ea0:	f640 32ff 	movw	r2, #3071	; 0xbff
 8000ea4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_TIM1_Init+0xa8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_TIM1_Init+0xa8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_TIM1_Init+0xa8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <MX_TIM1_Init+0xa8>)
 8000ee4:	f001 fcda 	bl	800289c <HAL_TIM_Encoder_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000eee:	f000 fac3 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4806      	ldr	r0, [pc, #24]	; (8000f18 <MX_TIM1_Init+0xa8>)
 8000f00:	f002 fb1c 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000f0a:	f000 fab5 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	3730      	adds	r7, #48	; 0x30
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000318 	.word	0x20000318
 8000f1c:	40010000 	.word	0x40010000

08000f20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08e      	sub	sp, #56	; 0x38
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f34:	f107 0320 	add.w	r3, r7, #32
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
 8000f4c:	615a      	str	r2, [r3, #20]
 8000f4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f50:	4b32      	ldr	r3, [pc, #200]	; (800101c <MX_TIM3_Init+0xfc>)
 8000f52:	4a33      	ldr	r2, [pc, #204]	; (8001020 <MX_TIM3_Init+0x100>)
 8000f54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f56:	4b31      	ldr	r3, [pc, #196]	; (800101c <MX_TIM3_Init+0xfc>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	; (800101c <MX_TIM3_Init+0xfc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000f62:	4b2e      	ldr	r3, [pc, #184]	; (800101c <MX_TIM3_Init+0xfc>)
 8000f64:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6a:	4b2c      	ldr	r3, [pc, #176]	; (800101c <MX_TIM3_Init+0xfc>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f70:	4b2a      	ldr	r3, [pc, #168]	; (800101c <MX_TIM3_Init+0xfc>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f76:	4829      	ldr	r0, [pc, #164]	; (800101c <MX_TIM3_Init+0xfc>)
 8000f78:	f001 fbb6 	bl	80026e8 <HAL_TIM_Base_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f82:	f000 fa79 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f90:	4619      	mov	r1, r3
 8000f92:	4822      	ldr	r0, [pc, #136]	; (800101c <MX_TIM3_Init+0xfc>)
 8000f94:	f001 ff1a 	bl	8002dcc <HAL_TIM_ConfigClockSource>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000f9e:	f000 fa6b 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fa2:	481e      	ldr	r0, [pc, #120]	; (800101c <MX_TIM3_Init+0xfc>)
 8000fa4:	f001 fc13 	bl	80027ce <HAL_TIM_PWM_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fae:	f000 fa63 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fba:	f107 0320 	add.w	r3, r7, #32
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4816      	ldr	r0, [pc, #88]	; (800101c <MX_TIM3_Init+0xfc>)
 8000fc2:	f002 fabb 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000fcc:	f000 fa54 	bl	8001478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd0:	2360      	movs	r3, #96	; 0x60
 8000fd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480d      	ldr	r0, [pc, #52]	; (800101c <MX_TIM3_Init+0xfc>)
 8000fe8:	f001 fe2a 	bl	8002c40 <HAL_TIM_PWM_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000ff2:	f000 fa41 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4807      	ldr	r0, [pc, #28]	; (800101c <MX_TIM3_Init+0xfc>)
 8000ffe:	f001 fe1f 	bl	8002c40 <HAL_TIM_PWM_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001008:	f000 fa36 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <MX_TIM3_Init+0xfc>)
 800100e:	f000 fae7 	bl	80015e0 <HAL_TIM_MspPostInit>

}
 8001012:	bf00      	nop
 8001014:	3738      	adds	r7, #56	; 0x38
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200002d8 	.word	0x200002d8
 8001020:	40000400 	.word	0x40000400

08001024 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	463b      	mov	r3, r7
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_TIM5_Init+0x94>)
 8001042:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <MX_TIM5_Init+0x98>)
 8001044:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <MX_TIM5_Init+0x94>)
 8001048:	2263      	movs	r2, #99	; 0x63
 800104a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <MX_TIM5_Init+0x94>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_TIM5_Init+0x94>)
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <MX_TIM5_Init+0x94>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_TIM5_Init+0x94>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001066:	4814      	ldr	r0, [pc, #80]	; (80010b8 <MX_TIM5_Init+0x94>)
 8001068:	f001 fb3e 	bl	80026e8 <HAL_TIM_Base_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001072:	f000 fa01 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	4619      	mov	r1, r3
 8001082:	480d      	ldr	r0, [pc, #52]	; (80010b8 <MX_TIM5_Init+0x94>)
 8001084:	f001 fea2 	bl	8002dcc <HAL_TIM_ConfigClockSource>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800108e:	f000 f9f3 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800109a:	463b      	mov	r3, r7
 800109c:	4619      	mov	r1, r3
 800109e:	4806      	ldr	r0, [pc, #24]	; (80010b8 <MX_TIM5_Init+0x94>)
 80010a0:	f002 fa4c 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80010aa:	f000 f9e5 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000298 	.word	0x20000298
 80010bc:	40000c00 	.word	0x40000c00

080010c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <MX_USART2_UART_Init+0x50>)
 80010c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010e6:	220c      	movs	r2, #12
 80010e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010f8:	f002 faa2 	bl	8003640 <HAL_UART_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001102:	f000 f9b9 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000358 	.word	0x20000358
 8001110:	40004400 	.word	0x40004400

08001114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <MX_GPIO_Init+0xd0>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a2c      	ldr	r2, [pc, #176]	; (80011e4 <MX_GPIO_Init+0xd0>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <MX_GPIO_Init+0xd0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <MX_GPIO_Init+0xd0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a25      	ldr	r2, [pc, #148]	; (80011e4 <MX_GPIO_Init+0xd0>)
 8001150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <MX_GPIO_Init+0xd0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <MX_GPIO_Init+0xd0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <MX_GPIO_Init+0xd0>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <MX_GPIO_Init+0xd0>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_GPIO_Init+0xd0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <MX_GPIO_Init+0xd0>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_GPIO_Init+0xd0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	2120      	movs	r1, #32
 800119e:	4812      	ldr	r0, [pc, #72]	; (80011e8 <MX_GPIO_Init+0xd4>)
 80011a0:	f000 fe1c 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <MX_GPIO_Init+0xd8>)
 80011ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <MX_GPIO_Init+0xdc>)
 80011ba:	f000 fc8b 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011be:	2320      	movs	r3, #32
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_GPIO_Init+0xd4>)
 80011d6:	f000 fc7d 	bl	8001ad4 <HAL_GPIO_Init>

}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	; 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	10210000 	.word	0x10210000
 80011f0:	40020800 	.word	0x40020800

080011f4 <unwraping_update>:
static int pre_enc_cnt = 0;
static int k = 0;

#define half_enc_cnt (12*64*4)/2
#define enc_cnt 12*64*4
int unwraping_update(){
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

	static int cur_enc_cnt = 0;

	cur_enc_cnt = TIM1->CNT;
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <unwraping_update+0x6c>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <unwraping_update+0x70>)
 8001200:	601a      	str	r2, [r3, #0]


	if(abs((int)cur_enc_cnt - pre_enc_cnt) > half_enc_cnt){
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <unwraping_update+0x70>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <unwraping_update+0x74>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	bfb8      	it	lt
 8001210:	425b      	neglt	r3, r3
 8001212:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001216:	dd0f      	ble.n	8001238 <unwraping_update+0x44>
		k+= (int)cur_enc_cnt - pre_enc_cnt > 0 ? -1 : 1 ;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <unwraping_update+0x70>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <unwraping_update+0x74>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	dd02      	ble.n	800122c <unwraping_update+0x38>
 8001226:	f04f 32ff 	mov.w	r2, #4294967295
 800122a:	e000      	b.n	800122e <unwraping_update+0x3a>
 800122c:	2201      	movs	r2, #1
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <unwraping_update+0x78>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a0d      	ldr	r2, [pc, #52]	; (800126c <unwraping_update+0x78>)
 8001236:	6013      	str	r3, [r2, #0]
	}

	pre_enc_cnt = cur_enc_cnt;
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <unwraping_update+0x70>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <unwraping_update+0x74>)
 800123e:	6013      	str	r3, [r2, #0]
	return enc_cnt * k + cur_enc_cnt;
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <unwraping_update+0x78>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4613      	mov	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	029b      	lsls	r3, r3, #10
 800124c:	461a      	mov	r2, r3
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <unwraping_update+0x70>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40010000 	.word	0x40010000
 8001264:	20000288 	.word	0x20000288
 8001268:	20000280 	.word	0x20000280
 800126c:	20000284 	.word	0x20000284

08001270 <velocity_update>:

double velocity_update(int cur_pos){
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	static int pre_pos = 0;
	static int pre_time = 0;
	static int cur_time = 0;

	cur_time = micros();
 8001278:	f000 f8ca 	bl	8001410 <micros>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <velocity_update+0x70>)
 8001282:	601a      	str	r2, [r3, #0]

	double velo = (double)(cur_pos - pre_pos)/(cur_time - pre_time);
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <velocity_update+0x74>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f8f5 	bl	800047c <__aeabi_i2d>
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <velocity_update+0x70>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <velocity_update+0x78>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f8eb 	bl	800047c <__aeabi_i2d>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4620      	mov	r0, r4
 80012ac:	4629      	mov	r1, r5
 80012ae:	f7ff fa79 	bl	80007a4 <__aeabi_ddiv>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pre_pos = cur_pos;
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <velocity_update+0x74>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6013      	str	r3, [r2, #0]
	pre_time = cur_time;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <velocity_update+0x70>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <velocity_update+0x78>)
 80012c6:	6013      	str	r3, [r2, #0]

	return velo;
 80012c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012cc:	ec43 2b17 	vmov	d7, r2, r3

}
 80012d0:	eeb0 0a47 	vmov.f32	s0, s14
 80012d4:	eef0 0a67 	vmov.f32	s1, s15
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bdb0      	pop	{r4, r5, r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000028c 	.word	0x2000028c
 80012e4:	20000290 	.word	0x20000290
 80012e8:	20000294 	.word	0x20000294

080012ec <low_pass_process>:

double low_pass_process(LowPass *lowpass,double input){
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	b08c      	sub	sp, #48	; 0x30
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	ed87 0b00 	vstr	d0, [r7]

	double cur_time = micros();
 80012f8:	f000 f88a 	bl	8001410 <micros>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	f7ff f8ee 	bl	80004e4 <__aeabi_ul2d>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double delta_t = cur_time - lowpass->pre_time;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001316:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800131a:	f7fe ff61 	bl	80001e0 <__aeabi_dsub>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double k = (lowpass->Wc*delta_t)/(2+ lowpass->Wc*delta_t);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800132c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001330:	f7ff f90e 	bl	8000550 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4614      	mov	r4, r2
 800133a:	461d      	mov	r5, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001342:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001346:	f7ff f903 	bl	8000550 <__aeabi_dmul>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800135a:	f7fe ff43 	bl	80001e4 <__adddf3>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4620      	mov	r0, r4
 8001364:	4629      	mov	r1, r5
 8001366:	f7ff fa1d 	bl	80007a4 <__aeabi_ddiv>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double output = (1 - 2*k)*(lowpass->pre_output) +k*(input+lowpass->pre_input);
 8001372:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	f7fe ff33 	bl	80001e4 <__adddf3>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	f04f 0000 	mov.w	r0, #0
 8001386:	4921      	ldr	r1, [pc, #132]	; (800140c <low_pass_process+0x120>)
 8001388:	f7fe ff2a 	bl	80001e0 <__aeabi_dsub>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800139a:	f7ff f8d9 	bl	8000550 <__aeabi_dmul>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4614      	mov	r4, r2
 80013a4:	461d      	mov	r5, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013b0:	f7fe ff18 	bl	80001e4 <__adddf3>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013c0:	f7ff f8c6 	bl	8000550 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4620      	mov	r0, r4
 80013ca:	4629      	mov	r1, r5
 80013cc:	f7fe ff0a 	bl	80001e4 <__adddf3>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	lowpass->pre_time = cur_time;
 80013d8:	68f9      	ldr	r1, [r7, #12]
 80013da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013de:	e9c1 2304 	strd	r2, r3, [r1, #16]
	lowpass->pre_input = input;
 80013e2:	68f9      	ldr	r1, [r7, #12]
 80013e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013e8:	e9c1 2300 	strd	r2, r3, [r1]
	lowpass->pre_output = output;
 80013ec:	68f9      	ldr	r1, [r7, #12]
 80013ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013f2:	e9c1 2302 	strd	r2, r3, [r1, #8]

	return output;
 80013f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013fa:	ec43 2b17 	vmov	d7, r2, r3
}
 80013fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001402:	eef0 0a67 	vmov.f32	s1, s15
 8001406:	3730      	adds	r7, #48	; 0x30
 8001408:	46bd      	mov	sp, r7
 800140a:	bdb0      	pop	{r4, r5, r7, pc}
 800140c:	3ff00000 	.word	0x3ff00000

08001410 <micros>:



uint64_t micros(){
 8001410:	b4b0      	push	{r4, r5, r7}
 8001412:	af00      	add	r7, sp, #0
	return _micro + TIM5->CNT;
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <micros+0x28>)
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	4618      	mov	r0, r3
 800141a:	f04f 0100 	mov.w	r1, #0
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <micros+0x2c>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	1884      	adds	r4, r0, r2
 8001426:	eb41 0503 	adc.w	r5, r1, r3
 800142a:	4622      	mov	r2, r4
 800142c:	462b      	mov	r3, r5
}
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	bcb0      	pop	{r4, r5, r7}
 8001436:	4770      	bx	lr
 8001438:	40000c00 	.word	0x40000c00
 800143c:	200000a8 	.word	0x200000a8

08001440 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001440:	b4b0      	push	{r4, r5, r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

	if(htim == &htim5){
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a09      	ldr	r2, [pc, #36]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d109      	bne.n	8001464 <HAL_TIM_PeriodElapsedCallback+0x24>
		_micro += ((uint64_t)1<<32)-1;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f112 34ff 	adds.w	r4, r2, #4294967295
 800145a:	f143 0500 	adc.w	r5, r3, #0
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001460:	e9c3 4500 	strd	r4, r5, [r3]
	}

}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bcb0      	pop	{r4, r5, r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000298 	.word	0x20000298
 8001474:	200000a8 	.word	0x200000a8

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	e7fe      	b.n	8001480 <Error_Handler+0x8>
	...

08001484 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <HAL_MspInit+0x4c>)
 8001494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001498:	6453      	str	r3, [r2, #68]	; 0x44
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_MspInit+0x4c>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a08      	ldr	r2, [pc, #32]	; (80014d0 <HAL_MspInit+0x4c>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_MspInit+0x4c>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014c2:	2007      	movs	r0, #7
 80014c4:	f000 fac4 	bl	8001a50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40023800 	.word	0x40023800

080014d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a19      	ldr	r2, [pc, #100]	; (8001558 <HAL_TIM_Encoder_MspInit+0x84>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d12c      	bne.n	8001550 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_TIM_Encoder_MspInit+0x88>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a17      	ldr	r2, [pc, #92]	; (800155c <HAL_TIM_Encoder_MspInit+0x88>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_TIM_Encoder_MspInit+0x88>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_TIM_Encoder_MspInit+0x88>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <HAL_TIM_Encoder_MspInit+0x88>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_TIM_Encoder_MspInit+0x88>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800152e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001540:	2301      	movs	r3, #1
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <HAL_TIM_Encoder_MspInit+0x8c>)
 800154c:	f000 fac2 	bl	8001ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001550:	bf00      	nop
 8001552:	3728      	adds	r7, #40	; 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40010000 	.word	0x40010000
 800155c:	40023800 	.word	0x40023800
 8001560:	40020000 	.word	0x40020000

08001564 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <HAL_TIM_Base_MspInit+0x70>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d10e      	bne.n	8001594 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_TIM_Base_MspInit+0x74>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a16      	ldr	r2, [pc, #88]	; (80015d8 <HAL_TIM_Base_MspInit+0x74>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_TIM_Base_MspInit+0x74>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001592:	e01a      	b.n	80015ca <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a10      	ldr	r2, [pc, #64]	; (80015dc <HAL_TIM_Base_MspInit+0x78>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d115      	bne.n	80015ca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_TIM_Base_MspInit+0x74>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <HAL_TIM_Base_MspInit+0x74>)
 80015a8:	f043 0308 	orr.w	r3, r3, #8
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_TIM_Base_MspInit+0x74>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	2032      	movs	r0, #50	; 0x32
 80015c0:	f000 fa51 	bl	8001a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80015c4:	2032      	movs	r0, #50	; 0x32
 80015c6:	f000 fa6a 	bl	8001a9e <HAL_NVIC_EnableIRQ>
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40000400 	.word	0x40000400
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40000c00 	.word	0x40000c00

080015e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a12      	ldr	r2, [pc, #72]	; (8001648 <HAL_TIM_MspPostInit+0x68>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d11d      	bne.n	800163e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_TIM_MspPostInit+0x6c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a10      	ldr	r2, [pc, #64]	; (800164c <HAL_TIM_MspPostInit+0x6c>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_TIM_MspPostInit+0x6c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800161e:	23c0      	movs	r3, #192	; 0xc0
 8001620:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800162e:	2302      	movs	r3, #2
 8001630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	4619      	mov	r1, r3
 8001638:	4805      	ldr	r0, [pc, #20]	; (8001650 <HAL_TIM_MspPostInit+0x70>)
 800163a:	f000 fa4b 	bl	8001ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800163e:	bf00      	nop
 8001640:	3720      	adds	r7, #32
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40000400 	.word	0x40000400
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000

08001654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a19      	ldr	r2, [pc, #100]	; (80016d8 <HAL_UART_MspInit+0x84>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d12b      	bne.n	80016ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_UART_MspInit+0x88>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a17      	ldr	r2, [pc, #92]	; (80016dc <HAL_UART_MspInit+0x88>)
 8001680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_UART_MspInit+0x88>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_UART_MspInit+0x88>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <HAL_UART_MspInit+0x88>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_UART_MspInit+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016ae:	230c      	movs	r3, #12
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016be:	2307      	movs	r3, #7
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <HAL_UART_MspInit+0x8c>)
 80016ca:	f000 fa03 	bl	8001ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	; 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40004400 	.word	0x40004400
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020000 	.word	0x40020000

080016e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <NMI_Handler+0x4>

080016ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <MemManage_Handler+0x4>

080016f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <UsageFault_Handler+0x4>

08001702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001730:	f000 f89e 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}

08001738 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <TIM5_IRQHandler+0x10>)
 800173e:	f001 f977 	bl	8002a30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000298 	.word	0x20000298

0800174c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <SystemInit+0x28>)
 8001752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001756:	4a07      	ldr	r2, [pc, #28]	; (8001774 <SystemInit+0x28>)
 8001758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800175c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <SystemInit+0x28>)
 8001762:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001766:	609a      	str	r2, [r3, #8]
#endif
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800177c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800177e:	e003      	b.n	8001788 <LoopCopyDataInit>

08001780 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001782:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001784:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001786:	3104      	adds	r1, #4

08001788 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001788:	480b      	ldr	r0, [pc, #44]	; (80017b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800178c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800178e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001790:	d3f6      	bcc.n	8001780 <CopyDataInit>
  ldr  r2, =_sbss
 8001792:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001794:	e002      	b.n	800179c <LoopFillZerobss>

08001796 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001796:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001798:	f842 3b04 	str.w	r3, [r2], #4

0800179c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800179e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017a0:	d3f9      	bcc.n	8001796 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017a2:	f7ff ffd3 	bl	800174c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a6:	f002 fb35 	bl	8003e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017aa:	f7ff fa5f 	bl	8000c6c <main>
  bx  lr    
 80017ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80017b4:	08003eac 	.word	0x08003eac
  ldr  r0, =_sdata
 80017b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017bc:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80017c0:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80017c4:	2000039c 	.word	0x2000039c

080017c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC_IRQHandler>
	...

080017cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_Init+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0d      	ldr	r2, [pc, #52]	; (800180c <HAL_Init+0x40>)
 80017d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_Init+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0a      	ldr	r2, [pc, #40]	; (800180c <HAL_Init+0x40>)
 80017e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_Init+0x40>)
 80017ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f4:	2003      	movs	r0, #3
 80017f6:	f000 f92b 	bl	8001a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f000 f808 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001800:	f7ff fe40 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023c00 	.word	0x40023c00

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x54>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_InitTick+0x58>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001826:	fbb3 f3f1 	udiv	r3, r3, r1
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f943 	bl	8001aba <HAL_SYSTICK_Config>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e00e      	b.n	800185c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d80a      	bhi.n	800185a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001844:	2200      	movs	r2, #0
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f000 f90b 	bl	8001a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_InitTick+0x5c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000078 	.word	0x20000078
 8001868:	20000080 	.word	0x20000080
 800186c:	2000007c 	.word	0x2000007c

08001870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x20>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x24>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_IncTick+0x24>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000080 	.word	0x20000080
 8001894:	20000398 	.word	0x20000398

08001898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return uwTick;
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <HAL_GetTick+0x14>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000398 	.word	0x20000398

080018b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	2b00      	cmp	r3, #0
 8001924:	db0b      	blt.n	800193e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	4907      	ldr	r1, [pc, #28]	; (800194c <__NVIC_EnableIRQ+0x38>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	2001      	movs	r0, #1
 8001936:	fa00 f202 	lsl.w	r2, r0, r2
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000e100 	.word	0xe000e100

08001950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	6039      	str	r1, [r7, #0]
 800195a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	2b00      	cmp	r3, #0
 8001962:	db0a      	blt.n	800197a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	b2da      	uxtb	r2, r3
 8001968:	490c      	ldr	r1, [pc, #48]	; (800199c <__NVIC_SetPriority+0x4c>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	0112      	lsls	r2, r2, #4
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	440b      	add	r3, r1
 8001974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001978:	e00a      	b.n	8001990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4908      	ldr	r1, [pc, #32]	; (80019a0 <__NVIC_SetPriority+0x50>)
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	3b04      	subs	r3, #4
 8001988:	0112      	lsls	r2, r2, #4
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	440b      	add	r3, r1
 800198e:	761a      	strb	r2, [r3, #24]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000e100 	.word	0xe000e100
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	; 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f1c3 0307 	rsb	r3, r3, #7
 80019be:	2b04      	cmp	r3, #4
 80019c0:	bf28      	it	cs
 80019c2:	2304      	movcs	r3, #4
 80019c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3304      	adds	r3, #4
 80019ca:	2b06      	cmp	r3, #6
 80019cc:	d902      	bls.n	80019d4 <NVIC_EncodePriority+0x30>
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3b03      	subs	r3, #3
 80019d2:	e000      	b.n	80019d6 <NVIC_EncodePriority+0x32>
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	f04f 32ff 	mov.w	r2, #4294967295
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43da      	mvns	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	401a      	ands	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ec:	f04f 31ff 	mov.w	r1, #4294967295
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	43d9      	mvns	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	4313      	orrs	r3, r2
         );
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3724      	adds	r7, #36	; 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a1c:	d301      	bcc.n	8001a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e00f      	b.n	8001a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a22:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <SysTick_Config+0x40>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2a:	210f      	movs	r1, #15
 8001a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a30:	f7ff ff8e 	bl	8001950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <SysTick_Config+0x40>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <SysTick_Config+0x40>)
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	e000e010 	.word	0xe000e010

08001a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff29 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a78:	f7ff ff3e 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	6978      	ldr	r0, [r7, #20]
 8001a84:	f7ff ff8e 	bl	80019a4 <NVIC_EncodePriority>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff5d 	bl	8001950 <__NVIC_SetPriority>
}
 8001a96:	bf00      	nop
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff31 	bl	8001914 <__NVIC_EnableIRQ>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ffa2 	bl	8001a0c <SysTick_Config>
 8001ac8:	4603      	mov	r3, r0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	e159      	b.n	8001da4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	f040 8148 	bne.w	8001d9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d00b      	beq.n	8001b2e <HAL_GPIO_Init+0x5a>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d007      	beq.n	8001b2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b22:	2b11      	cmp	r3, #17
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b12      	cmp	r3, #18
 8001b2c:	d130      	bne.n	8001b90 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	2203      	movs	r2, #3
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b64:	2201      	movs	r2, #1
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 0201 	and.w	r2, r3, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0xfc>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b12      	cmp	r3, #18
 8001bce:	d123      	bne.n	8001c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	69b9      	ldr	r1, [r7, #24]
 8001c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0203 	and.w	r2, r3, #3
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80a2 	beq.w	8001d9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b57      	ldr	r3, [pc, #348]	; (8001dbc <HAL_GPIO_Init+0x2e8>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a56      	ldr	r2, [pc, #344]	; (8001dbc <HAL_GPIO_Init+0x2e8>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b54      	ldr	r3, [pc, #336]	; (8001dbc <HAL_GPIO_Init+0x2e8>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c76:	4a52      	ldr	r2, [pc, #328]	; (8001dc0 <HAL_GPIO_Init+0x2ec>)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a49      	ldr	r2, [pc, #292]	; (8001dc4 <HAL_GPIO_Init+0x2f0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d019      	beq.n	8001cd6 <HAL_GPIO_Init+0x202>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a48      	ldr	r2, [pc, #288]	; (8001dc8 <HAL_GPIO_Init+0x2f4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d013      	beq.n	8001cd2 <HAL_GPIO_Init+0x1fe>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a47      	ldr	r2, [pc, #284]	; (8001dcc <HAL_GPIO_Init+0x2f8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00d      	beq.n	8001cce <HAL_GPIO_Init+0x1fa>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a46      	ldr	r2, [pc, #280]	; (8001dd0 <HAL_GPIO_Init+0x2fc>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d007      	beq.n	8001cca <HAL_GPIO_Init+0x1f6>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a45      	ldr	r2, [pc, #276]	; (8001dd4 <HAL_GPIO_Init+0x300>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_GPIO_Init+0x1f2>
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	e008      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e004      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	f002 0203 	and.w	r2, r2, #3
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	4093      	lsls	r3, r2
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce8:	4935      	ldr	r1, [pc, #212]	; (8001dc0 <HAL_GPIO_Init+0x2ec>)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf6:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d1a:	4a2f      	ldr	r2, [pc, #188]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d20:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d44:	4a24      	ldr	r2, [pc, #144]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d4a:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d6e:	4a1a      	ldr	r2, [pc, #104]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d98:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	2b0f      	cmp	r3, #15
 8001da8:	f67f aea2 	bls.w	8001af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40013800 	.word	0x40013800
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40020400 	.word	0x40020400
 8001dcc:	40020800 	.word	0x40020800
 8001dd0:	40020c00 	.word	0x40020c00
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40013c00 	.word	0x40013c00

08001ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
 8001de8:	4613      	mov	r3, r2
 8001dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dec:	787b      	ldrb	r3, [r7, #1]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df8:	e003      	b.n	8001e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	041a      	lsls	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	619a      	str	r2, [r3, #24]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e25b      	b.n	80022da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d075      	beq.n	8001f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e2e:	4ba3      	ldr	r3, [pc, #652]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d00c      	beq.n	8001e54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3a:	4ba0      	ldr	r3, [pc, #640]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d112      	bne.n	8001e6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e46:	4b9d      	ldr	r3, [pc, #628]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e52:	d10b      	bne.n	8001e6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	4b99      	ldr	r3, [pc, #612]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d05b      	beq.n	8001f18 <HAL_RCC_OscConfig+0x108>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d157      	bne.n	8001f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e236      	b.n	80022da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e74:	d106      	bne.n	8001e84 <HAL_RCC_OscConfig+0x74>
 8001e76:	4b91      	ldr	r3, [pc, #580]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a90      	ldr	r2, [pc, #576]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e01d      	b.n	8001ec0 <HAL_RCC_OscConfig+0xb0>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x98>
 8001e8e:	4b8b      	ldr	r3, [pc, #556]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a8a      	ldr	r2, [pc, #552]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b88      	ldr	r3, [pc, #544]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a87      	ldr	r2, [pc, #540]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0xb0>
 8001ea8:	4b84      	ldr	r3, [pc, #528]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a83      	ldr	r2, [pc, #524]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b81      	ldr	r3, [pc, #516]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a80      	ldr	r2, [pc, #512]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fce6 	bl	8001898 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7ff fce2 	bl	8001898 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	; 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e1fb      	b.n	80022da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	4b76      	ldr	r3, [pc, #472]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0xc0>
 8001eee:	e014      	b.n	8001f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fcd2 	bl	8001898 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7ff fcce 	bl	8001898 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	; 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e1e7      	b.n	80022da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	4b6c      	ldr	r3, [pc, #432]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xe8>
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d063      	beq.n	8001fee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f26:	4b65      	ldr	r3, [pc, #404]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00b      	beq.n	8001f4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f32:	4b62      	ldr	r3, [pc, #392]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d11c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3e:	4b5f      	ldr	r3, [pc, #380]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d116      	bne.n	8001f78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4a:	4b5c      	ldr	r3, [pc, #368]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_RCC_OscConfig+0x152>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e1bb      	b.n	80022da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f62:	4b56      	ldr	r3, [pc, #344]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4952      	ldr	r1, [pc, #328]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f76:	e03a      	b.n	8001fee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d020      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f80:	4b4f      	ldr	r3, [pc, #316]	; (80020c0 <HAL_RCC_OscConfig+0x2b0>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7ff fc87 	bl	8001898 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8e:	f7ff fc83 	bl	8001898 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e19c      	b.n	80022da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	4b46      	ldr	r3, [pc, #280]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fac:	4b43      	ldr	r3, [pc, #268]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4940      	ldr	r1, [pc, #256]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]
 8001fc0:	e015      	b.n	8001fee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc2:	4b3f      	ldr	r3, [pc, #252]	; (80020c0 <HAL_RCC_OscConfig+0x2b0>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fc66 	bl	8001898 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd0:	f7ff fc62 	bl	8001898 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e17b      	b.n	80022da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	4b36      	ldr	r3, [pc, #216]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d030      	beq.n	800205c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d016      	beq.n	8002030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002002:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <HAL_RCC_OscConfig+0x2b4>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002008:	f7ff fc46 	bl	8001898 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002010:	f7ff fc42 	bl	8001898 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e15b      	b.n	80022da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	4b26      	ldr	r3, [pc, #152]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8002024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x200>
 800202e:	e015      	b.n	800205c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_RCC_OscConfig+0x2b4>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002036:	f7ff fc2f 	bl	8001898 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203e:	f7ff fc2b 	bl	8001898 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e144      	b.n	80022da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8002052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f0      	bne.n	800203e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80a0 	beq.w	80021aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206a:	2300      	movs	r3, #0
 800206c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206e:	4b13      	ldr	r3, [pc, #76]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10f      	bne.n	800209a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a0e      	ldr	r2, [pc, #56]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002096:	2301      	movs	r3, #1
 8002098:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_RCC_OscConfig+0x2b8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d121      	bne.n	80020ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_RCC_OscConfig+0x2b8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <HAL_RCC_OscConfig+0x2b8>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b2:	f7ff fbf1 	bl	8001898 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	e011      	b.n	80020de <HAL_RCC_OscConfig+0x2ce>
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800
 80020c0:	42470000 	.word	0x42470000
 80020c4:	42470e80 	.word	0x42470e80
 80020c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020cc:	f7ff fbe4 	bl	8001898 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e0fd      	b.n	80022da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020de:	4b81      	ldr	r3, [pc, #516]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d106      	bne.n	8002100 <HAL_RCC_OscConfig+0x2f0>
 80020f2:	4b7d      	ldr	r3, [pc, #500]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f6:	4a7c      	ldr	r2, [pc, #496]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6713      	str	r3, [r2, #112]	; 0x70
 80020fe:	e01c      	b.n	800213a <HAL_RCC_OscConfig+0x32a>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b05      	cmp	r3, #5
 8002106:	d10c      	bne.n	8002122 <HAL_RCC_OscConfig+0x312>
 8002108:	4b77      	ldr	r3, [pc, #476]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210c:	4a76      	ldr	r2, [pc, #472]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 800210e:	f043 0304 	orr.w	r3, r3, #4
 8002112:	6713      	str	r3, [r2, #112]	; 0x70
 8002114:	4b74      	ldr	r3, [pc, #464]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 8002116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002118:	4a73      	ldr	r2, [pc, #460]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6713      	str	r3, [r2, #112]	; 0x70
 8002120:	e00b      	b.n	800213a <HAL_RCC_OscConfig+0x32a>
 8002122:	4b71      	ldr	r3, [pc, #452]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002126:	4a70      	ldr	r2, [pc, #448]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	6713      	str	r3, [r2, #112]	; 0x70
 800212e:	4b6e      	ldr	r3, [pc, #440]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	4a6d      	ldr	r2, [pc, #436]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d015      	beq.n	800216e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002142:	f7ff fba9 	bl	8001898 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002148:	e00a      	b.n	8002160 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800214a:	f7ff fba5 	bl	8001898 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f241 3288 	movw	r2, #5000	; 0x1388
 8002158:	4293      	cmp	r3, r2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e0bc      	b.n	80022da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002160:	4b61      	ldr	r3, [pc, #388]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 8002162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0ee      	beq.n	800214a <HAL_RCC_OscConfig+0x33a>
 800216c:	e014      	b.n	8002198 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216e:	f7ff fb93 	bl	8001898 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002174:	e00a      	b.n	800218c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7ff fb8f 	bl	8001898 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	; 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e0a6      	b.n	80022da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218c:	4b56      	ldr	r3, [pc, #344]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1ee      	bne.n	8002176 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d105      	bne.n	80021aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219e:	4b52      	ldr	r3, [pc, #328]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	4a51      	ldr	r2, [pc, #324]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 80021a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8092 	beq.w	80022d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021b4:	4b4c      	ldr	r3, [pc, #304]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d05c      	beq.n	800227a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d141      	bne.n	800224c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c8:	4b48      	ldr	r3, [pc, #288]	; (80022ec <HAL_RCC_OscConfig+0x4dc>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ce:	f7ff fb63 	bl	8001898 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d6:	f7ff fb5f 	bl	8001898 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e078      	b.n	80022da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e8:	4b3f      	ldr	r3, [pc, #252]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f0      	bne.n	80021d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69da      	ldr	r2, [r3, #28]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	019b      	lsls	r3, r3, #6
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	085b      	lsrs	r3, r3, #1
 800220c:	3b01      	subs	r3, #1
 800220e:	041b      	lsls	r3, r3, #16
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	061b      	lsls	r3, r3, #24
 8002218:	4933      	ldr	r1, [pc, #204]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 800221a:	4313      	orrs	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800221e:	4b33      	ldr	r3, [pc, #204]	; (80022ec <HAL_RCC_OscConfig+0x4dc>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7ff fb38 	bl	8001898 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800222c:	f7ff fb34 	bl	8001898 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e04d      	b.n	80022da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223e:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x41c>
 800224a:	e045      	b.n	80022d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224c:	4b27      	ldr	r3, [pc, #156]	; (80022ec <HAL_RCC_OscConfig+0x4dc>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7ff fb21 	bl	8001898 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225a:	f7ff fb1d 	bl	8001898 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e036      	b.n	80022da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226c:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x44a>
 8002278:	e02e      	b.n	80022d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e029      	b.n	80022da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	429a      	cmp	r2, r3
 8002298:	d11c      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d115      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022ae:	4013      	ands	r3, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d10d      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d106      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40007000 	.word	0x40007000
 80022e8:	40023800 	.word	0x40023800
 80022ec:	42470060 	.word	0x42470060

080022f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0cc      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002304:	4b68      	ldr	r3, [pc, #416]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d90c      	bls.n	800232c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b65      	ldr	r3, [pc, #404]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b63      	ldr	r3, [pc, #396]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0b8      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d020      	beq.n	800237a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002344:	4b59      	ldr	r3, [pc, #356]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a58      	ldr	r2, [pc, #352]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800234e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800235c:	4b53      	ldr	r3, [pc, #332]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4a52      	ldr	r2, [pc, #328]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002366:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002368:	4b50      	ldr	r3, [pc, #320]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	494d      	ldr	r1, [pc, #308]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d044      	beq.n	8002410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b47      	ldr	r3, [pc, #284]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d119      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e07f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d003      	beq.n	80023ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ae:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e06f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023be:	4b3b      	ldr	r3, [pc, #236]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e067      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ce:	4b37      	ldr	r3, [pc, #220]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 0203 	bic.w	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4934      	ldr	r1, [pc, #208]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e0:	f7ff fa5a 	bl	8001898 <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e8:	f7ff fa56 	bl	8001898 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e04f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	4b2b      	ldr	r3, [pc, #172]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 020c 	and.w	r2, r3, #12
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	429a      	cmp	r2, r3
 800240e:	d1eb      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002410:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d20c      	bcs.n	8002438 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e032      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4916      	ldr	r1, [pc, #88]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	490e      	ldr	r1, [pc, #56]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002476:	f000 f821 	bl	80024bc <HAL_RCC_GetSysClockFreq>
 800247a:	4602      	mov	r2, r0
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	490a      	ldr	r1, [pc, #40]	; (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	5ccb      	ldrb	r3, [r1, r3]
 800248a:	fa22 f303 	lsr.w	r3, r2, r3
 800248e:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff f9ba 	bl	8001810 <HAL_InitTick>

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023c00 	.word	0x40023c00
 80024ac:	40023800 	.word	0x40023800
 80024b0:	08003e84 	.word	0x08003e84
 80024b4:	20000078 	.word	0x20000078
 80024b8:	2000007c 	.word	0x2000007c

080024bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	2300      	movs	r3, #0
 80024ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024d4:	4b67      	ldr	r3, [pc, #412]	; (8002674 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d00d      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x40>
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	f200 80bd 	bhi.w	8002660 <HAL_RCC_GetSysClockFreq+0x1a4>
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x34>
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d003      	beq.n	80024f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80024ee:	e0b7      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024f0:	4b61      	ldr	r3, [pc, #388]	; (8002678 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80024f2:	60bb      	str	r3, [r7, #8]
       break;
 80024f4:	e0b7      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024f6:	4b61      	ldr	r3, [pc, #388]	; (800267c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80024f8:	60bb      	str	r3, [r7, #8]
      break;
 80024fa:	e0b4      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024fc:	4b5d      	ldr	r3, [pc, #372]	; (8002674 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002504:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002506:	4b5b      	ldr	r3, [pc, #364]	; (8002674 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d04d      	beq.n	80025ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002512:	4b58      	ldr	r3, [pc, #352]	; (8002674 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	099b      	lsrs	r3, r3, #6
 8002518:	461a      	mov	r2, r3
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002522:	f04f 0100 	mov.w	r1, #0
 8002526:	ea02 0800 	and.w	r8, r2, r0
 800252a:	ea03 0901 	and.w	r9, r3, r1
 800252e:	4640      	mov	r0, r8
 8002530:	4649      	mov	r1, r9
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	014b      	lsls	r3, r1, #5
 800253c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002540:	0142      	lsls	r2, r0, #5
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	ebb0 0008 	subs.w	r0, r0, r8
 800254a:	eb61 0109 	sbc.w	r1, r1, r9
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	018b      	lsls	r3, r1, #6
 8002558:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800255c:	0182      	lsls	r2, r0, #6
 800255e:	1a12      	subs	r2, r2, r0
 8002560:	eb63 0301 	sbc.w	r3, r3, r1
 8002564:	f04f 0000 	mov.w	r0, #0
 8002568:	f04f 0100 	mov.w	r1, #0
 800256c:	00d9      	lsls	r1, r3, #3
 800256e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002572:	00d0      	lsls	r0, r2, #3
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	eb12 0208 	adds.w	r2, r2, r8
 800257c:	eb43 0309 	adc.w	r3, r3, r9
 8002580:	f04f 0000 	mov.w	r0, #0
 8002584:	f04f 0100 	mov.w	r1, #0
 8002588:	0259      	lsls	r1, r3, #9
 800258a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800258e:	0250      	lsls	r0, r2, #9
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	461a      	mov	r2, r3
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	f7fe f9e8 	bl	8000974 <__aeabi_uldivmod>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4613      	mov	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	e04a      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ae:	4b31      	ldr	r3, [pc, #196]	; (8002674 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	099b      	lsrs	r3, r3, #6
 80025b4:	461a      	mov	r2, r3
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	ea02 0400 	and.w	r4, r2, r0
 80025c6:	ea03 0501 	and.w	r5, r3, r1
 80025ca:	4620      	mov	r0, r4
 80025cc:	4629      	mov	r1, r5
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	014b      	lsls	r3, r1, #5
 80025d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025dc:	0142      	lsls	r2, r0, #5
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	1b00      	subs	r0, r0, r4
 80025e4:	eb61 0105 	sbc.w	r1, r1, r5
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	018b      	lsls	r3, r1, #6
 80025f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025f6:	0182      	lsls	r2, r0, #6
 80025f8:	1a12      	subs	r2, r2, r0
 80025fa:	eb63 0301 	sbc.w	r3, r3, r1
 80025fe:	f04f 0000 	mov.w	r0, #0
 8002602:	f04f 0100 	mov.w	r1, #0
 8002606:	00d9      	lsls	r1, r3, #3
 8002608:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800260c:	00d0      	lsls	r0, r2, #3
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	1912      	adds	r2, r2, r4
 8002614:	eb45 0303 	adc.w	r3, r5, r3
 8002618:	f04f 0000 	mov.w	r0, #0
 800261c:	f04f 0100 	mov.w	r1, #0
 8002620:	0299      	lsls	r1, r3, #10
 8002622:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002626:	0290      	lsls	r0, r2, #10
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4610      	mov	r0, r2
 800262e:	4619      	mov	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	461a      	mov	r2, r3
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	f7fe f99c 	bl	8000974 <__aeabi_uldivmod>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4613      	mov	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	0c1b      	lsrs	r3, r3, #16
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	3301      	adds	r3, #1
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	fbb2 f3f3 	udiv	r3, r2, r3
 800265c:	60bb      	str	r3, [r7, #8]
      break;
 800265e:	e002      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002662:	60bb      	str	r3, [r7, #8]
      break;
 8002664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002666:	68bb      	ldr	r3, [r7, #8]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800
 8002678:	00f42400 	.word	0x00f42400
 800267c:	007a1200 	.word	0x007a1200

08002680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_RCC_GetHCLKFreq+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000078 	.word	0x20000078

08002698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800269c:	f7ff fff0 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026a0:	4602      	mov	r2, r0
 80026a2:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	0a9b      	lsrs	r3, r3, #10
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	4903      	ldr	r1, [pc, #12]	; (80026bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ae:	5ccb      	ldrb	r3, [r1, r3]
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40023800 	.word	0x40023800
 80026bc:	08003e94 	.word	0x08003e94

080026c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026c4:	f7ff ffdc 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	0b5b      	lsrs	r3, r3, #13
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	4903      	ldr	r1, [pc, #12]	; (80026e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40023800 	.word	0x40023800
 80026e4:	08003e94 	.word	0x08003e94

080026e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e01d      	b.n	8002736 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d106      	bne.n	8002714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7fe ff28 	bl	8001564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3304      	adds	r3, #4
 8002724:	4619      	mov	r1, r3
 8002726:	4610      	mov	r0, r2
 8002728:	f000 fc3c 	bl	8002fa4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2202      	movs	r2, #2
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b06      	cmp	r3, #6
 800275e:	d007      	beq.n	8002770 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002786:	b480      	push	{r7}
 8002788:	b085      	sub	sp, #20
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 0201 	orr.w	r2, r2, #1
 800279c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b06      	cmp	r3, #6
 80027ae:	d007      	beq.n	80027c0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e01d      	b.n	800281c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d106      	bne.n	80027fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f815 	bl	8002824 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2202      	movs	r2, #2
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3304      	adds	r3, #4
 800280a:	4619      	mov	r1, r3
 800280c:	4610      	mov	r0, r2
 800280e:	f000 fbc9 	bl	8002fa4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2201      	movs	r2, #1
 8002848:	6839      	ldr	r1, [r7, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f000 fe50 	bl	80034f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a10      	ldr	r2, [pc, #64]	; (8002898 <HAL_TIM_PWM_Start+0x60>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d107      	bne.n	800286a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002868:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b06      	cmp	r3, #6
 800287a:	d007      	beq.n	800288c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40010000 	.word	0x40010000

0800289c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e083      	b.n	80029b8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d106      	bne.n	80028ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7fe fe05 	bl	80014d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2202      	movs	r2, #2
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028e0:	f023 0307 	bic.w	r3, r3, #7
 80028e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3304      	adds	r3, #4
 80028ee:	4619      	mov	r1, r3
 80028f0:	4610      	mov	r0, r2
 80028f2:	f000 fb57 	bl	8002fa4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800291e:	f023 0303 	bic.w	r3, r3, #3
 8002922:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	4313      	orrs	r3, r2
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800293c:	f023 030c 	bic.w	r3, r3, #12
 8002940:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002948:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800294c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	4313      	orrs	r3, r2
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	011a      	lsls	r2, r3, #4
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	031b      	lsls	r3, r3, #12
 800296c:	4313      	orrs	r3, r2
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800297a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002982:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	4313      	orrs	r3, r2
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_TIM_Encoder_Start+0x18>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d008      	beq.n	80029e8 <HAL_TIM_Encoder_Start+0x28>
 80029d6:	e00f      	b.n	80029f8 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2201      	movs	r2, #1
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 fd85 	bl	80034f0 <TIM_CCxChannelCmd>
      break;
 80029e6:	e016      	b.n	8002a16 <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2201      	movs	r2, #1
 80029ee:	2104      	movs	r1, #4
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fd7d 	bl	80034f0 <TIM_CCxChannelCmd>
      break;
 80029f6:	e00e      	b.n	8002a16 <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2201      	movs	r2, #1
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fd75 	bl	80034f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	2104      	movs	r1, #4
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fd6e 	bl	80034f0 <TIM_CCxChannelCmd>
      break;
 8002a14:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d122      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d11b      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0202 	mvn.w	r2, #2
 8002a5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fa78 	bl	8002f68 <HAL_TIM_IC_CaptureCallback>
 8002a78:	e005      	b.n	8002a86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fa6a 	bl	8002f54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fa7b 	bl	8002f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d122      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d11b      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0204 	mvn.w	r2, #4
 8002ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fa4e 	bl	8002f68 <HAL_TIM_IC_CaptureCallback>
 8002acc:	e005      	b.n	8002ada <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fa40 	bl	8002f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 fa51 	bl	8002f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d122      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d11b      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0208 	mvn.w	r2, #8
 8002b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2204      	movs	r2, #4
 8002b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fa24 	bl	8002f68 <HAL_TIM_IC_CaptureCallback>
 8002b20:	e005      	b.n	8002b2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fa16 	bl	8002f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fa27 	bl	8002f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b10      	cmp	r3, #16
 8002b40:	d122      	bne.n	8002b88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d11b      	bne.n	8002b88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0210 	mvn.w	r2, #16
 8002b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f9fa 	bl	8002f68 <HAL_TIM_IC_CaptureCallback>
 8002b74:	e005      	b.n	8002b82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f9ec 	bl	8002f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f9fd 	bl	8002f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d10e      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d107      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f06f 0201 	mvn.w	r2, #1
 8002bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe fc46 	bl	8001440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbe:	2b80      	cmp	r3, #128	; 0x80
 8002bc0:	d10e      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bcc:	2b80      	cmp	r3, #128	; 0x80
 8002bce:	d107      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fd26 	bl	800362c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bea:	2b40      	cmp	r3, #64	; 0x40
 8002bec:	d10e      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf8:	2b40      	cmp	r3, #64	; 0x40
 8002bfa:	d107      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f9c2 	bl	8002f90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	d10e      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d107      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f06f 0220 	mvn.w	r2, #32
 8002c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fcf0 	bl	8003618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e0b4      	b.n	8002dc4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2202      	movs	r2, #2
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b0c      	cmp	r3, #12
 8002c6e:	f200 809f 	bhi.w	8002db0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002c72:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c78:	08002cad 	.word	0x08002cad
 8002c7c:	08002db1 	.word	0x08002db1
 8002c80:	08002db1 	.word	0x08002db1
 8002c84:	08002db1 	.word	0x08002db1
 8002c88:	08002ced 	.word	0x08002ced
 8002c8c:	08002db1 	.word	0x08002db1
 8002c90:	08002db1 	.word	0x08002db1
 8002c94:	08002db1 	.word	0x08002db1
 8002c98:	08002d2f 	.word	0x08002d2f
 8002c9c:	08002db1 	.word	0x08002db1
 8002ca0:	08002db1 	.word	0x08002db1
 8002ca4:	08002db1 	.word	0x08002db1
 8002ca8:	08002d6f 	.word	0x08002d6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f9f6 	bl	80030a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0208 	orr.w	r2, r2, #8
 8002cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0204 	bic.w	r2, r2, #4
 8002cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6999      	ldr	r1, [r3, #24]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	619a      	str	r2, [r3, #24]
      break;
 8002cea:	e062      	b.n	8002db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fa3c 	bl	8003170 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6999      	ldr	r1, [r3, #24]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	021a      	lsls	r2, r3, #8
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	619a      	str	r2, [r3, #24]
      break;
 8002d2c:	e041      	b.n	8002db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fa87 	bl	8003248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69da      	ldr	r2, [r3, #28]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0208 	orr.w	r2, r2, #8
 8002d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0204 	bic.w	r2, r2, #4
 8002d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69d9      	ldr	r1, [r3, #28]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	61da      	str	r2, [r3, #28]
      break;
 8002d6c:	e021      	b.n	8002db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fad1 	bl	800331c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	69da      	ldr	r2, [r3, #28]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69d9      	ldr	r1, [r3, #28]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	021a      	lsls	r2, r3, #8
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	61da      	str	r2, [r3, #28]
      break;
 8002dae:	e000      	b.n	8002db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002db0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_TIM_ConfigClockSource+0x18>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e0b3      	b.n	8002f4c <HAL_TIM_ConfigClockSource+0x180>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e1c:	d03e      	beq.n	8002e9c <HAL_TIM_ConfigClockSource+0xd0>
 8002e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e22:	f200 8087 	bhi.w	8002f34 <HAL_TIM_ConfigClockSource+0x168>
 8002e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2a:	f000 8085 	beq.w	8002f38 <HAL_TIM_ConfigClockSource+0x16c>
 8002e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e32:	d87f      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x168>
 8002e34:	2b70      	cmp	r3, #112	; 0x70
 8002e36:	d01a      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0xa2>
 8002e38:	2b70      	cmp	r3, #112	; 0x70
 8002e3a:	d87b      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x168>
 8002e3c:	2b60      	cmp	r3, #96	; 0x60
 8002e3e:	d050      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x116>
 8002e40:	2b60      	cmp	r3, #96	; 0x60
 8002e42:	d877      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x168>
 8002e44:	2b50      	cmp	r3, #80	; 0x50
 8002e46:	d03c      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0xf6>
 8002e48:	2b50      	cmp	r3, #80	; 0x50
 8002e4a:	d873      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x168>
 8002e4c:	2b40      	cmp	r3, #64	; 0x40
 8002e4e:	d058      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x136>
 8002e50:	2b40      	cmp	r3, #64	; 0x40
 8002e52:	d86f      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x168>
 8002e54:	2b30      	cmp	r3, #48	; 0x30
 8002e56:	d064      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x156>
 8002e58:	2b30      	cmp	r3, #48	; 0x30
 8002e5a:	d86b      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x168>
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d060      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x156>
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d867      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x168>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d05c      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x156>
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d05a      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002e6c:	e062      	b.n	8002f34 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6899      	ldr	r1, [r3, #8]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f000 fb17 	bl	80034b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e90:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	609a      	str	r2, [r3, #8]
      break;
 8002e9a:	e04e      	b.n	8002f3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	6899      	ldr	r1, [r3, #8]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f000 fb00 	bl	80034b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ebe:	609a      	str	r2, [r3, #8]
      break;
 8002ec0:	e03b      	b.n	8002f3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f000 fa74 	bl	80033bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2150      	movs	r1, #80	; 0x50
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 facd 	bl	800347a <TIM_ITRx_SetConfig>
      break;
 8002ee0:	e02b      	b.n	8002f3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6859      	ldr	r1, [r3, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f000 fa93 	bl	800341a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2160      	movs	r1, #96	; 0x60
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fabd 	bl	800347a <TIM_ITRx_SetConfig>
      break;
 8002f00:	e01b      	b.n	8002f3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	6859      	ldr	r1, [r3, #4]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f000 fa54 	bl	80033bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2140      	movs	r1, #64	; 0x40
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 faad 	bl	800347a <TIM_ITRx_SetConfig>
      break;
 8002f20:	e00b      	b.n	8002f3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	f000 faa4 	bl	800347a <TIM_ITRx_SetConfig>
      break;
 8002f32:	e002      	b.n	8002f3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f34:	bf00      	nop
 8002f36:	e000      	b.n	8002f3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a34      	ldr	r2, [pc, #208]	; (8003088 <TIM_Base_SetConfig+0xe4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00f      	beq.n	8002fdc <TIM_Base_SetConfig+0x38>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc2:	d00b      	beq.n	8002fdc <TIM_Base_SetConfig+0x38>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a31      	ldr	r2, [pc, #196]	; (800308c <TIM_Base_SetConfig+0xe8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d007      	beq.n	8002fdc <TIM_Base_SetConfig+0x38>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a30      	ldr	r2, [pc, #192]	; (8003090 <TIM_Base_SetConfig+0xec>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <TIM_Base_SetConfig+0x38>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a2f      	ldr	r2, [pc, #188]	; (8003094 <TIM_Base_SetConfig+0xf0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d108      	bne.n	8002fee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a25      	ldr	r2, [pc, #148]	; (8003088 <TIM_Base_SetConfig+0xe4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d01b      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffc:	d017      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a22      	ldr	r2, [pc, #136]	; (800308c <TIM_Base_SetConfig+0xe8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a21      	ldr	r2, [pc, #132]	; (8003090 <TIM_Base_SetConfig+0xec>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00f      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a20      	ldr	r2, [pc, #128]	; (8003094 <TIM_Base_SetConfig+0xf0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00b      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a1f      	ldr	r2, [pc, #124]	; (8003098 <TIM_Base_SetConfig+0xf4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d007      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a1e      	ldr	r2, [pc, #120]	; (800309c <TIM_Base_SetConfig+0xf8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d003      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <TIM_Base_SetConfig+0xfc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d108      	bne.n	8003040 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a08      	ldr	r2, [pc, #32]	; (8003088 <TIM_Base_SetConfig+0xe4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d103      	bne.n	8003074 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	615a      	str	r2, [r3, #20]
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40010000 	.word	0x40010000
 800308c:	40000400 	.word	0x40000400
 8003090:	40000800 	.word	0x40000800
 8003094:	40000c00 	.word	0x40000c00
 8003098:	40014000 	.word	0x40014000
 800309c:	40014400 	.word	0x40014400
 80030a0:	40014800 	.word	0x40014800

080030a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f023 0201 	bic.w	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0303 	bic.w	r3, r3, #3
 80030da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f023 0302 	bic.w	r3, r3, #2
 80030ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a1c      	ldr	r2, [pc, #112]	; (800316c <TIM_OC1_SetConfig+0xc8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d10c      	bne.n	800311a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f023 0308 	bic.w	r3, r3, #8
 8003106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f023 0304 	bic.w	r3, r3, #4
 8003118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a13      	ldr	r2, [pc, #76]	; (800316c <TIM_OC1_SetConfig+0xc8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d111      	bne.n	8003146 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	621a      	str	r2, [r3, #32]
}
 8003160:	bf00      	nop
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	40010000 	.word	0x40010000

08003170 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f023 0210 	bic.w	r2, r3, #16
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800319e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f023 0320 	bic.w	r3, r3, #32
 80031ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a1e      	ldr	r2, [pc, #120]	; (8003244 <TIM_OC2_SetConfig+0xd4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d10d      	bne.n	80031ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a15      	ldr	r2, [pc, #84]	; (8003244 <TIM_OC2_SetConfig+0xd4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d113      	bne.n	800321c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003202:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	621a      	str	r2, [r3, #32]
}
 8003236:	bf00      	nop
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40010000 	.word	0x40010000

08003248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0303 	bic.w	r3, r3, #3
 800327e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	4313      	orrs	r3, r2
 800329c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a1d      	ldr	r2, [pc, #116]	; (8003318 <TIM_OC3_SetConfig+0xd0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d10d      	bne.n	80032c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a14      	ldr	r2, [pc, #80]	; (8003318 <TIM_OC3_SetConfig+0xd0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d113      	bne.n	80032f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	621a      	str	r2, [r3, #32]
}
 800330c:	bf00      	nop
 800330e:	371c      	adds	r7, #28
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	40010000 	.word	0x40010000

0800331c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800334a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	021b      	lsls	r3, r3, #8
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	031b      	lsls	r3, r3, #12
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a10      	ldr	r2, [pc, #64]	; (80033b8 <TIM_OC4_SetConfig+0x9c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d109      	bne.n	8003390 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	019b      	lsls	r3, r3, #6
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	621a      	str	r2, [r3, #32]
}
 80033aa:	bf00      	nop
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40010000 	.word	0x40010000

080033bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	f023 0201 	bic.w	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f023 030a 	bic.w	r3, r3, #10
 80033f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	621a      	str	r2, [r3, #32]
}
 800340e:	bf00      	nop
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800341a:	b480      	push	{r7}
 800341c:	b087      	sub	sp, #28
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f023 0210 	bic.w	r2, r3, #16
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003444:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	031b      	lsls	r3, r3, #12
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003456:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	621a      	str	r2, [r3, #32]
}
 800346e:	bf00      	nop
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800347a:	b480      	push	{r7}
 800347c:	b085      	sub	sp, #20
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	f043 0307 	orr.w	r3, r3, #7
 800349c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	609a      	str	r2, [r3, #8]
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	021a      	lsls	r2, r3, #8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	609a      	str	r2, [r3, #8]
}
 80034e4:	bf00      	nop
 80034e6:	371c      	adds	r7, #28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	2201      	movs	r2, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a1a      	ldr	r2, [r3, #32]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	43db      	mvns	r3, r3
 8003512:	401a      	ands	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a1a      	ldr	r2, [r3, #32]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	fa01 f303 	lsl.w	r3, r1, r3
 8003528:	431a      	orrs	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	621a      	str	r2, [r3, #32]
}
 800352e:	bf00      	nop
 8003530:	371c      	adds	r7, #28
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003550:	2302      	movs	r3, #2
 8003552:	e050      	b.n	80035f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1c      	ldr	r2, [pc, #112]	; (8003604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d018      	beq.n	80035ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a0:	d013      	beq.n	80035ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a18      	ldr	r2, [pc, #96]	; (8003608 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00e      	beq.n	80035ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a16      	ldr	r2, [pc, #88]	; (800360c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d009      	beq.n	80035ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a15      	ldr	r2, [pc, #84]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d004      	beq.n	80035ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a13      	ldr	r2, [pc, #76]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d10c      	bne.n	80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40010000 	.word	0x40010000
 8003608:	40000400 	.word	0x40000400
 800360c:	40000800 	.word	0x40000800
 8003610:	40000c00 	.word	0x40000c00
 8003614:	40014000 	.word	0x40014000

08003618 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e03f      	b.n	80036d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd fff4 	bl	8001654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	; 0x24
 8003670:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f829 	bl	80036dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e0:	b0bd      	sub	sp, #244	; 0xf4
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f8:	68d9      	ldr	r1, [r3, #12]
 80036fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	ea40 0301 	orr.w	r3, r0, r1
 8003704:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	431a      	orrs	r2, r3
 8003714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	431a      	orrs	r2, r3
 800371c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8003728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003734:	f021 010c 	bic.w	r1, r1, #12
 8003738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003742:	430b      	orrs	r3, r1
 8003744:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003756:	6999      	ldr	r1, [r3, #24]
 8003758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	ea40 0301 	orr.w	r3, r0, r1
 8003762:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800376e:	f040 81a5 	bne.w	8003abc <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4bcd      	ldr	r3, [pc, #820]	; (8003ab0 <UART_SetConfig+0x3d4>)
 800377a:	429a      	cmp	r2, r3
 800377c:	d006      	beq.n	800378c <UART_SetConfig+0xb0>
 800377e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	4bcb      	ldr	r3, [pc, #812]	; (8003ab4 <UART_SetConfig+0x3d8>)
 8003786:	429a      	cmp	r2, r3
 8003788:	f040 80cb 	bne.w	8003922 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800378c:	f7fe ff98 	bl	80026c0 <HAL_RCC_GetPCLK2Freq>
 8003790:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003794:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003798:	461c      	mov	r4, r3
 800379a:	f04f 0500 	mov.w	r5, #0
 800379e:	4622      	mov	r2, r4
 80037a0:	462b      	mov	r3, r5
 80037a2:	1891      	adds	r1, r2, r2
 80037a4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80037a8:	415b      	adcs	r3, r3
 80037aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80037ae:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80037b2:	1912      	adds	r2, r2, r4
 80037b4:	eb45 0303 	adc.w	r3, r5, r3
 80037b8:	f04f 0000 	mov.w	r0, #0
 80037bc:	f04f 0100 	mov.w	r1, #0
 80037c0:	00d9      	lsls	r1, r3, #3
 80037c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037c6:	00d0      	lsls	r0, r2, #3
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	1911      	adds	r1, r2, r4
 80037ce:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80037d2:	416b      	adcs	r3, r5
 80037d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80037d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	461a      	mov	r2, r3
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	1891      	adds	r1, r2, r2
 80037e6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80037ea:	415b      	adcs	r3, r3
 80037ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037f0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80037f4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80037f8:	f7fd f8bc 	bl	8000974 <__aeabi_uldivmod>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4bad      	ldr	r3, [pc, #692]	; (8003ab8 <UART_SetConfig+0x3dc>)
 8003802:	fba3 2302 	umull	r2, r3, r3, r2
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	011e      	lsls	r6, r3, #4
 800380a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800380e:	461c      	mov	r4, r3
 8003810:	f04f 0500 	mov.w	r5, #0
 8003814:	4622      	mov	r2, r4
 8003816:	462b      	mov	r3, r5
 8003818:	1891      	adds	r1, r2, r2
 800381a:	67b9      	str	r1, [r7, #120]	; 0x78
 800381c:	415b      	adcs	r3, r3
 800381e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003820:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003824:	1912      	adds	r2, r2, r4
 8003826:	eb45 0303 	adc.w	r3, r5, r3
 800382a:	f04f 0000 	mov.w	r0, #0
 800382e:	f04f 0100 	mov.w	r1, #0
 8003832:	00d9      	lsls	r1, r3, #3
 8003834:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003838:	00d0      	lsls	r0, r2, #3
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	1911      	adds	r1, r2, r4
 8003840:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003844:	416b      	adcs	r3, r5
 8003846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800384a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	461a      	mov	r2, r3
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	1891      	adds	r1, r2, r2
 8003858:	6739      	str	r1, [r7, #112]	; 0x70
 800385a:	415b      	adcs	r3, r3
 800385c:	677b      	str	r3, [r7, #116]	; 0x74
 800385e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003862:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003866:	f7fd f885 	bl	8000974 <__aeabi_uldivmod>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4b92      	ldr	r3, [pc, #584]	; (8003ab8 <UART_SetConfig+0x3dc>)
 8003870:	fba3 1302 	umull	r1, r3, r3, r2
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	2164      	movs	r1, #100	; 0x64
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	3332      	adds	r3, #50	; 0x32
 8003882:	4a8d      	ldr	r2, [pc, #564]	; (8003ab8 <UART_SetConfig+0x3dc>)
 8003884:	fba2 2303 	umull	r2, r3, r2, r3
 8003888:	095b      	lsrs	r3, r3, #5
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003890:	441e      	add	r6, r3
 8003892:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003896:	4618      	mov	r0, r3
 8003898:	f04f 0100 	mov.w	r1, #0
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	1894      	adds	r4, r2, r2
 80038a2:	66bc      	str	r4, [r7, #104]	; 0x68
 80038a4:	415b      	adcs	r3, r3
 80038a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038a8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80038ac:	1812      	adds	r2, r2, r0
 80038ae:	eb41 0303 	adc.w	r3, r1, r3
 80038b2:	f04f 0400 	mov.w	r4, #0
 80038b6:	f04f 0500 	mov.w	r5, #0
 80038ba:	00dd      	lsls	r5, r3, #3
 80038bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038c0:	00d4      	lsls	r4, r2, #3
 80038c2:	4622      	mov	r2, r4
 80038c4:	462b      	mov	r3, r5
 80038c6:	1814      	adds	r4, r2, r0
 80038c8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80038cc:	414b      	adcs	r3, r1
 80038ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	461a      	mov	r2, r3
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	1891      	adds	r1, r2, r2
 80038e0:	6639      	str	r1, [r7, #96]	; 0x60
 80038e2:	415b      	adcs	r3, r3
 80038e4:	667b      	str	r3, [r7, #100]	; 0x64
 80038e6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80038ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038ee:	f7fd f841 	bl	8000974 <__aeabi_uldivmod>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4b70      	ldr	r3, [pc, #448]	; (8003ab8 <UART_SetConfig+0x3dc>)
 80038f8:	fba3 1302 	umull	r1, r3, r3, r2
 80038fc:	095b      	lsrs	r3, r3, #5
 80038fe:	2164      	movs	r1, #100	; 0x64
 8003900:	fb01 f303 	mul.w	r3, r1, r3
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	3332      	adds	r3, #50	; 0x32
 800390a:	4a6b      	ldr	r2, [pc, #428]	; (8003ab8 <UART_SetConfig+0x3dc>)
 800390c:	fba2 2303 	umull	r2, r3, r2, r3
 8003910:	095b      	lsrs	r3, r3, #5
 8003912:	f003 0207 	and.w	r2, r3, #7
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4432      	add	r2, r6
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	e26d      	b.n	8003dfe <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003922:	f7fe feb9 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8003926:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800392a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800392e:	461c      	mov	r4, r3
 8003930:	f04f 0500 	mov.w	r5, #0
 8003934:	4622      	mov	r2, r4
 8003936:	462b      	mov	r3, r5
 8003938:	1891      	adds	r1, r2, r2
 800393a:	65b9      	str	r1, [r7, #88]	; 0x58
 800393c:	415b      	adcs	r3, r3
 800393e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003940:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003944:	1912      	adds	r2, r2, r4
 8003946:	eb45 0303 	adc.w	r3, r5, r3
 800394a:	f04f 0000 	mov.w	r0, #0
 800394e:	f04f 0100 	mov.w	r1, #0
 8003952:	00d9      	lsls	r1, r3, #3
 8003954:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003958:	00d0      	lsls	r0, r2, #3
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	1911      	adds	r1, r2, r4
 8003960:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003964:	416b      	adcs	r3, r5
 8003966:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800396a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	461a      	mov	r2, r3
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	1891      	adds	r1, r2, r2
 8003978:	6539      	str	r1, [r7, #80]	; 0x50
 800397a:	415b      	adcs	r3, r3
 800397c:	657b      	str	r3, [r7, #84]	; 0x54
 800397e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003982:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003986:	f7fc fff5 	bl	8000974 <__aeabi_uldivmod>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4b4a      	ldr	r3, [pc, #296]	; (8003ab8 <UART_SetConfig+0x3dc>)
 8003990:	fba3 2302 	umull	r2, r3, r3, r2
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	011e      	lsls	r6, r3, #4
 8003998:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800399c:	461c      	mov	r4, r3
 800399e:	f04f 0500 	mov.w	r5, #0
 80039a2:	4622      	mov	r2, r4
 80039a4:	462b      	mov	r3, r5
 80039a6:	1891      	adds	r1, r2, r2
 80039a8:	64b9      	str	r1, [r7, #72]	; 0x48
 80039aa:	415b      	adcs	r3, r3
 80039ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039b2:	1912      	adds	r2, r2, r4
 80039b4:	eb45 0303 	adc.w	r3, r5, r3
 80039b8:	f04f 0000 	mov.w	r0, #0
 80039bc:	f04f 0100 	mov.w	r1, #0
 80039c0:	00d9      	lsls	r1, r3, #3
 80039c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039c6:	00d0      	lsls	r0, r2, #3
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	1911      	adds	r1, r2, r4
 80039ce:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80039d2:	416b      	adcs	r3, r5
 80039d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80039d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	461a      	mov	r2, r3
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	1891      	adds	r1, r2, r2
 80039e6:	6439      	str	r1, [r7, #64]	; 0x40
 80039e8:	415b      	adcs	r3, r3
 80039ea:	647b      	str	r3, [r7, #68]	; 0x44
 80039ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039f0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80039f4:	f7fc ffbe 	bl	8000974 <__aeabi_uldivmod>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4b2e      	ldr	r3, [pc, #184]	; (8003ab8 <UART_SetConfig+0x3dc>)
 80039fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	2164      	movs	r1, #100	; 0x64
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	3332      	adds	r3, #50	; 0x32
 8003a10:	4a29      	ldr	r2, [pc, #164]	; (8003ab8 <UART_SetConfig+0x3dc>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a1e:	441e      	add	r6, r3
 8003a20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003a24:	4618      	mov	r0, r3
 8003a26:	f04f 0100 	mov.w	r1, #0
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	1894      	adds	r4, r2, r2
 8003a30:	63bc      	str	r4, [r7, #56]	; 0x38
 8003a32:	415b      	adcs	r3, r3
 8003a34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a36:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a3a:	1812      	adds	r2, r2, r0
 8003a3c:	eb41 0303 	adc.w	r3, r1, r3
 8003a40:	f04f 0400 	mov.w	r4, #0
 8003a44:	f04f 0500 	mov.w	r5, #0
 8003a48:	00dd      	lsls	r5, r3, #3
 8003a4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a4e:	00d4      	lsls	r4, r2, #3
 8003a50:	4622      	mov	r2, r4
 8003a52:	462b      	mov	r3, r5
 8003a54:	1814      	adds	r4, r2, r0
 8003a56:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8003a5a:	414b      	adcs	r3, r1
 8003a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	1891      	adds	r1, r2, r2
 8003a6e:	6339      	str	r1, [r7, #48]	; 0x30
 8003a70:	415b      	adcs	r3, r3
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
 8003a74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a78:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a7c:	f7fc ff7a 	bl	8000974 <__aeabi_uldivmod>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <UART_SetConfig+0x3dc>)
 8003a86:	fba3 1302 	umull	r1, r3, r3, r2
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	2164      	movs	r1, #100	; 0x64
 8003a8e:	fb01 f303 	mul.w	r3, r1, r3
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	3332      	adds	r3, #50	; 0x32
 8003a98:	4a07      	ldr	r2, [pc, #28]	; (8003ab8 <UART_SetConfig+0x3dc>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	f003 0207 	and.w	r2, r3, #7
 8003aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4432      	add	r2, r6
 8003aac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003aae:	e1a6      	b.n	8003dfe <UART_SetConfig+0x722>
 8003ab0:	40011000 	.word	0x40011000
 8003ab4:	40011400 	.word	0x40011400
 8003ab8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4bd1      	ldr	r3, [pc, #836]	; (8003e08 <UART_SetConfig+0x72c>)
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d006      	beq.n	8003ad6 <UART_SetConfig+0x3fa>
 8003ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	4bcf      	ldr	r3, [pc, #828]	; (8003e0c <UART_SetConfig+0x730>)
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	f040 80ca 	bne.w	8003c6a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ad6:	f7fe fdf3 	bl	80026c0 <HAL_RCC_GetPCLK2Freq>
 8003ada:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ade:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ae2:	461c      	mov	r4, r3
 8003ae4:	f04f 0500 	mov.w	r5, #0
 8003ae8:	4622      	mov	r2, r4
 8003aea:	462b      	mov	r3, r5
 8003aec:	1891      	adds	r1, r2, r2
 8003aee:	62b9      	str	r1, [r7, #40]	; 0x28
 8003af0:	415b      	adcs	r3, r3
 8003af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003af8:	1912      	adds	r2, r2, r4
 8003afa:	eb45 0303 	adc.w	r3, r5, r3
 8003afe:	f04f 0000 	mov.w	r0, #0
 8003b02:	f04f 0100 	mov.w	r1, #0
 8003b06:	00d9      	lsls	r1, r3, #3
 8003b08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b0c:	00d0      	lsls	r0, r2, #3
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	eb12 0a04 	adds.w	sl, r2, r4
 8003b16:	eb43 0b05 	adc.w	fp, r3, r5
 8003b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f04f 0100 	mov.w	r1, #0
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	008b      	lsls	r3, r1, #2
 8003b30:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b34:	0082      	lsls	r2, r0, #2
 8003b36:	4650      	mov	r0, sl
 8003b38:	4659      	mov	r1, fp
 8003b3a:	f7fc ff1b 	bl	8000974 <__aeabi_uldivmod>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4bb3      	ldr	r3, [pc, #716]	; (8003e10 <UART_SetConfig+0x734>)
 8003b44:	fba3 2302 	umull	r2, r3, r3, r2
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	011e      	lsls	r6, r3, #4
 8003b4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003b50:	4618      	mov	r0, r3
 8003b52:	f04f 0100 	mov.w	r1, #0
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	1894      	adds	r4, r2, r2
 8003b5c:	623c      	str	r4, [r7, #32]
 8003b5e:	415b      	adcs	r3, r3
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
 8003b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b66:	1812      	adds	r2, r2, r0
 8003b68:	eb41 0303 	adc.w	r3, r1, r3
 8003b6c:	f04f 0400 	mov.w	r4, #0
 8003b70:	f04f 0500 	mov.w	r5, #0
 8003b74:	00dd      	lsls	r5, r3, #3
 8003b76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b7a:	00d4      	lsls	r4, r2, #3
 8003b7c:	4622      	mov	r2, r4
 8003b7e:	462b      	mov	r3, r5
 8003b80:	1814      	adds	r4, r2, r0
 8003b82:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003b86:	414b      	adcs	r3, r1
 8003b88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f04f 0100 	mov.w	r1, #0
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	008b      	lsls	r3, r1, #2
 8003ba2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ba6:	0082      	lsls	r2, r0, #2
 8003ba8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8003bac:	f7fc fee2 	bl	8000974 <__aeabi_uldivmod>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4b96      	ldr	r3, [pc, #600]	; (8003e10 <UART_SetConfig+0x734>)
 8003bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	2164      	movs	r1, #100	; 0x64
 8003bbe:	fb01 f303 	mul.w	r3, r1, r3
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	3332      	adds	r3, #50	; 0x32
 8003bc8:	4a91      	ldr	r2, [pc, #580]	; (8003e10 <UART_SetConfig+0x734>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd4:	441e      	add	r6, r3
 8003bd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f04f 0100 	mov.w	r1, #0
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	1894      	adds	r4, r2, r2
 8003be6:	61bc      	str	r4, [r7, #24]
 8003be8:	415b      	adcs	r3, r3
 8003bea:	61fb      	str	r3, [r7, #28]
 8003bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf0:	1812      	adds	r2, r2, r0
 8003bf2:	eb41 0303 	adc.w	r3, r1, r3
 8003bf6:	f04f 0400 	mov.w	r4, #0
 8003bfa:	f04f 0500 	mov.w	r5, #0
 8003bfe:	00dd      	lsls	r5, r3, #3
 8003c00:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c04:	00d4      	lsls	r4, r2, #3
 8003c06:	4622      	mov	r2, r4
 8003c08:	462b      	mov	r3, r5
 8003c0a:	1814      	adds	r4, r2, r0
 8003c0c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8003c10:	414b      	adcs	r3, r1
 8003c12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f04f 0100 	mov.w	r1, #0
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	008b      	lsls	r3, r1, #2
 8003c2c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c30:	0082      	lsls	r2, r0, #2
 8003c32:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003c36:	f7fc fe9d 	bl	8000974 <__aeabi_uldivmod>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4b74      	ldr	r3, [pc, #464]	; (8003e10 <UART_SetConfig+0x734>)
 8003c40:	fba3 1302 	umull	r1, r3, r3, r2
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	2164      	movs	r1, #100	; 0x64
 8003c48:	fb01 f303 	mul.w	r3, r1, r3
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	3332      	adds	r3, #50	; 0x32
 8003c52:	4a6f      	ldr	r2, [pc, #444]	; (8003e10 <UART_SetConfig+0x734>)
 8003c54:	fba2 2303 	umull	r2, r3, r2, r3
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	f003 020f 	and.w	r2, r3, #15
 8003c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4432      	add	r2, r6
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	e0c9      	b.n	8003dfe <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c6a:	f7fe fd15 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8003c6e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003c76:	461c      	mov	r4, r3
 8003c78:	f04f 0500 	mov.w	r5, #0
 8003c7c:	4622      	mov	r2, r4
 8003c7e:	462b      	mov	r3, r5
 8003c80:	1891      	adds	r1, r2, r2
 8003c82:	6139      	str	r1, [r7, #16]
 8003c84:	415b      	adcs	r3, r3
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c8c:	1912      	adds	r2, r2, r4
 8003c8e:	eb45 0303 	adc.w	r3, r5, r3
 8003c92:	f04f 0000 	mov.w	r0, #0
 8003c96:	f04f 0100 	mov.w	r1, #0
 8003c9a:	00d9      	lsls	r1, r3, #3
 8003c9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ca0:	00d0      	lsls	r0, r2, #3
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	eb12 0804 	adds.w	r8, r2, r4
 8003caa:	eb43 0905 	adc.w	r9, r3, r5
 8003cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f04f 0100 	mov.w	r1, #0
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	008b      	lsls	r3, r1, #2
 8003cc4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cc8:	0082      	lsls	r2, r0, #2
 8003cca:	4640      	mov	r0, r8
 8003ccc:	4649      	mov	r1, r9
 8003cce:	f7fc fe51 	bl	8000974 <__aeabi_uldivmod>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4b4e      	ldr	r3, [pc, #312]	; (8003e10 <UART_SetConfig+0x734>)
 8003cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	011e      	lsls	r6, r3, #4
 8003ce0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f04f 0100 	mov.w	r1, #0
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	1894      	adds	r4, r2, r2
 8003cf0:	60bc      	str	r4, [r7, #8]
 8003cf2:	415b      	adcs	r3, r3
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cfa:	1812      	adds	r2, r2, r0
 8003cfc:	eb41 0303 	adc.w	r3, r1, r3
 8003d00:	f04f 0400 	mov.w	r4, #0
 8003d04:	f04f 0500 	mov.w	r5, #0
 8003d08:	00dd      	lsls	r5, r3, #3
 8003d0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d0e:	00d4      	lsls	r4, r2, #3
 8003d10:	4622      	mov	r2, r4
 8003d12:	462b      	mov	r3, r5
 8003d14:	1814      	adds	r4, r2, r0
 8003d16:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003d1a:	414b      	adcs	r3, r1
 8003d1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f04f 0100 	mov.w	r1, #0
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	008b      	lsls	r3, r1, #2
 8003d36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d3a:	0082      	lsls	r2, r0, #2
 8003d3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d40:	f7fc fe18 	bl	8000974 <__aeabi_uldivmod>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4b31      	ldr	r3, [pc, #196]	; (8003e10 <UART_SetConfig+0x734>)
 8003d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	2164      	movs	r1, #100	; 0x64
 8003d52:	fb01 f303 	mul.w	r3, r1, r3
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	3332      	adds	r3, #50	; 0x32
 8003d5c:	4a2c      	ldr	r2, [pc, #176]	; (8003e10 <UART_SetConfig+0x734>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d68:	441e      	add	r6, r3
 8003d6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f04f 0100 	mov.w	r1, #0
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	1894      	adds	r4, r2, r2
 8003d7a:	603c      	str	r4, [r7, #0]
 8003d7c:	415b      	adcs	r3, r3
 8003d7e:	607b      	str	r3, [r7, #4]
 8003d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d84:	1812      	adds	r2, r2, r0
 8003d86:	eb41 0303 	adc.w	r3, r1, r3
 8003d8a:	f04f 0400 	mov.w	r4, #0
 8003d8e:	f04f 0500 	mov.w	r5, #0
 8003d92:	00dd      	lsls	r5, r3, #3
 8003d94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d98:	00d4      	lsls	r4, r2, #3
 8003d9a:	4622      	mov	r2, r4
 8003d9c:	462b      	mov	r3, r5
 8003d9e:	1814      	adds	r4, r2, r0
 8003da0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8003da4:	414b      	adcs	r3, r1
 8003da6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f04f 0100 	mov.w	r1, #0
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	008b      	lsls	r3, r1, #2
 8003dc0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003dc4:	0082      	lsls	r2, r0, #2
 8003dc6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8003dca:	f7fc fdd3 	bl	8000974 <__aeabi_uldivmod>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <UART_SetConfig+0x734>)
 8003dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	2164      	movs	r1, #100	; 0x64
 8003ddc:	fb01 f303 	mul.w	r3, r1, r3
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	3332      	adds	r3, #50	; 0x32
 8003de6:	4a0a      	ldr	r2, [pc, #40]	; (8003e10 <UART_SetConfig+0x734>)
 8003de8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dec:	095b      	lsrs	r3, r3, #5
 8003dee:	f003 020f 	and.w	r2, r3, #15
 8003df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4432      	add	r2, r6
 8003dfa:	609a      	str	r2, [r3, #8]
}
 8003dfc:	e7ff      	b.n	8003dfe <UART_SetConfig+0x722>
 8003dfe:	bf00      	nop
 8003e00:	37f4      	adds	r7, #244	; 0xf4
 8003e02:	46bd      	mov	sp, r7
 8003e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e08:	40011000 	.word	0x40011000
 8003e0c:	40011400 	.word	0x40011400
 8003e10:	51eb851f 	.word	0x51eb851f

08003e14 <__libc_init_array>:
 8003e14:	b570      	push	{r4, r5, r6, lr}
 8003e16:	4d0d      	ldr	r5, [pc, #52]	; (8003e4c <__libc_init_array+0x38>)
 8003e18:	4c0d      	ldr	r4, [pc, #52]	; (8003e50 <__libc_init_array+0x3c>)
 8003e1a:	1b64      	subs	r4, r4, r5
 8003e1c:	10a4      	asrs	r4, r4, #2
 8003e1e:	2600      	movs	r6, #0
 8003e20:	42a6      	cmp	r6, r4
 8003e22:	d109      	bne.n	8003e38 <__libc_init_array+0x24>
 8003e24:	4d0b      	ldr	r5, [pc, #44]	; (8003e54 <__libc_init_array+0x40>)
 8003e26:	4c0c      	ldr	r4, [pc, #48]	; (8003e58 <__libc_init_array+0x44>)
 8003e28:	f000 f820 	bl	8003e6c <_init>
 8003e2c:	1b64      	subs	r4, r4, r5
 8003e2e:	10a4      	asrs	r4, r4, #2
 8003e30:	2600      	movs	r6, #0
 8003e32:	42a6      	cmp	r6, r4
 8003e34:	d105      	bne.n	8003e42 <__libc_init_array+0x2e>
 8003e36:	bd70      	pop	{r4, r5, r6, pc}
 8003e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e3c:	4798      	blx	r3
 8003e3e:	3601      	adds	r6, #1
 8003e40:	e7ee      	b.n	8003e20 <__libc_init_array+0xc>
 8003e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e46:	4798      	blx	r3
 8003e48:	3601      	adds	r6, #1
 8003e4a:	e7f2      	b.n	8003e32 <__libc_init_array+0x1e>
 8003e4c:	08003ea4 	.word	0x08003ea4
 8003e50:	08003ea4 	.word	0x08003ea4
 8003e54:	08003ea4 	.word	0x08003ea4
 8003e58:	08003ea8 	.word	0x08003ea8

08003e5c <memset>:
 8003e5c:	4402      	add	r2, r0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d100      	bne.n	8003e66 <memset+0xa>
 8003e64:	4770      	bx	lr
 8003e66:	f803 1b01 	strb.w	r1, [r3], #1
 8003e6a:	e7f9      	b.n	8003e60 <memset+0x4>

08003e6c <_init>:
 8003e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6e:	bf00      	nop
 8003e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e72:	bc08      	pop	{r3}
 8003e74:	469e      	mov	lr, r3
 8003e76:	4770      	bx	lr

08003e78 <_fini>:
 8003e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7a:	bf00      	nop
 8003e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7e:	bc08      	pop	{r3}
 8003e80:	469e      	mov	lr, r3
 8003e82:	4770      	bx	lr
