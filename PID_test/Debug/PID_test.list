
PID_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004730  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080048c8  080048c8  000148c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e0  080048e0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080048e0  080048e0  000148e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048e8  080048e8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e8  080048e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048ec  080048ec  000148ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080048f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002328  20000088  08004974  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200023b0  08004974  000223b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b401  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001960  00000000  00000000  0002b4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0002ce18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  0002d978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e86  00000000  00000000  0002e420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a564  00000000  00000000  000442a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c506  00000000  00000000  0004e80a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dad10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003230  00000000  00000000  000dad64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000088 	.word	0x20000088
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080048b0 	.word	0x080048b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	080048b0 	.word	0x080048b0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b96e 	b.w	8000e08 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9d08      	ldr	r5, [sp, #32]
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	468c      	mov	ip, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f040 8083 	bne.w	8000c5a <__udivmoddi4+0x116>
 8000b54:	428a      	cmp	r2, r1
 8000b56:	4617      	mov	r7, r2
 8000b58:	d947      	bls.n	8000bea <__udivmoddi4+0xa6>
 8000b5a:	fab2 f282 	clz	r2, r2
 8000b5e:	b142      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b60:	f1c2 0020 	rsb	r0, r2, #32
 8000b64:	fa24 f000 	lsr.w	r0, r4, r0
 8000b68:	4091      	lsls	r1, r2
 8000b6a:	4097      	lsls	r7, r2
 8000b6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b70:	4094      	lsls	r4, r2
 8000b72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b76:	0c23      	lsrs	r3, r4, #16
 8000b78:	fbbc f6f8 	udiv	r6, ip, r8
 8000b7c:	fa1f fe87 	uxth.w	lr, r7
 8000b80:	fb08 c116 	mls	r1, r8, r6, ip
 8000b84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b88:	fb06 f10e 	mul.w	r1, r6, lr
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x60>
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b96:	f080 8119 	bcs.w	8000dcc <__udivmoddi4+0x288>
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	f240 8116 	bls.w	8000dcc <__udivmoddi4+0x288>
 8000ba0:	3e02      	subs	r6, #2
 8000ba2:	443b      	add	r3, r7
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bac:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb8:	45a6      	cmp	lr, r4
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x8c>
 8000bbc:	193c      	adds	r4, r7, r4
 8000bbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc2:	f080 8105 	bcs.w	8000dd0 <__udivmoddi4+0x28c>
 8000bc6:	45a6      	cmp	lr, r4
 8000bc8:	f240 8102 	bls.w	8000dd0 <__udivmoddi4+0x28c>
 8000bcc:	3802      	subs	r0, #2
 8000bce:	443c      	add	r4, r7
 8000bd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd4:	eba4 040e 	sub.w	r4, r4, lr
 8000bd8:	2600      	movs	r6, #0
 8000bda:	b11d      	cbz	r5, 8000be4 <__udivmoddi4+0xa0>
 8000bdc:	40d4      	lsrs	r4, r2
 8000bde:	2300      	movs	r3, #0
 8000be0:	e9c5 4300 	strd	r4, r3, [r5]
 8000be4:	4631      	mov	r1, r6
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	b902      	cbnz	r2, 8000bee <__udivmoddi4+0xaa>
 8000bec:	deff      	udf	#255	; 0xff
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	d150      	bne.n	8000c98 <__udivmoddi4+0x154>
 8000bf6:	1bcb      	subs	r3, r1, r7
 8000bf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	2601      	movs	r6, #1
 8000c02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c06:	0c21      	lsrs	r1, r4, #16
 8000c08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c10:	fb08 f30c 	mul.w	r3, r8, ip
 8000c14:	428b      	cmp	r3, r1
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0xe4>
 8000c18:	1879      	adds	r1, r7, r1
 8000c1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0xe2>
 8000c20:	428b      	cmp	r3, r1
 8000c22:	f200 80e9 	bhi.w	8000df8 <__udivmoddi4+0x2b4>
 8000c26:	4684      	mov	ip, r0
 8000c28:	1ac9      	subs	r1, r1, r3
 8000c2a:	b2a3      	uxth	r3, r4
 8000c2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c38:	fb08 f800 	mul.w	r8, r8, r0
 8000c3c:	45a0      	cmp	r8, r4
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x10c>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x10a>
 8000c48:	45a0      	cmp	r8, r4
 8000c4a:	f200 80d9 	bhi.w	8000e00 <__udivmoddi4+0x2bc>
 8000c4e:	4618      	mov	r0, r3
 8000c50:	eba4 0408 	sub.w	r4, r4, r8
 8000c54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c58:	e7bf      	b.n	8000bda <__udivmoddi4+0x96>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0x12e>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	f000 80b1 	beq.w	8000dc6 <__udivmoddi4+0x282>
 8000c64:	2600      	movs	r6, #0
 8000c66:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	fab3 f683 	clz	r6, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d14a      	bne.n	8000d10 <__udivmoddi4+0x1cc>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0x140>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 80b8 	bhi.w	8000df4 <__udivmoddi4+0x2b0>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb61 0103 	sbc.w	r1, r1, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	468c      	mov	ip, r1
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0a8      	beq.n	8000be4 <__udivmoddi4+0xa0>
 8000c92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c96:	e7a5      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000c98:	f1c2 0320 	rsb	r3, r2, #32
 8000c9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ca0:	4097      	lsls	r7, r2
 8000ca2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ca6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000caa:	40d9      	lsrs	r1, r3
 8000cac:	4330      	orrs	r0, r6
 8000cae:	0c03      	lsrs	r3, r0, #16
 8000cb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cb4:	fa1f f887 	uxth.w	r8, r7
 8000cb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc0:	fb06 f108 	mul.w	r1, r6, r8
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cca:	d909      	bls.n	8000ce0 <__udivmoddi4+0x19c>
 8000ccc:	18fb      	adds	r3, r7, r3
 8000cce:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cd2:	f080 808d 	bcs.w	8000df0 <__udivmoddi4+0x2ac>
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	f240 808a 	bls.w	8000df0 <__udivmoddi4+0x2ac>
 8000cdc:	3e02      	subs	r6, #2
 8000cde:	443b      	add	r3, r7
 8000ce0:	1a5b      	subs	r3, r3, r1
 8000ce2:	b281      	uxth	r1, r0
 8000ce4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf0:	fb00 f308 	mul.w	r3, r0, r8
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x1c4>
 8000cf8:	1879      	adds	r1, r7, r1
 8000cfa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cfe:	d273      	bcs.n	8000de8 <__udivmoddi4+0x2a4>
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d971      	bls.n	8000de8 <__udivmoddi4+0x2a4>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4439      	add	r1, r7
 8000d08:	1acb      	subs	r3, r1, r3
 8000d0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d0e:	e778      	b.n	8000c02 <__udivmoddi4+0xbe>
 8000d10:	f1c6 0c20 	rsb	ip, r6, #32
 8000d14:	fa03 f406 	lsl.w	r4, r3, r6
 8000d18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d1c:	431c      	orrs	r4, r3
 8000d1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d22:	fa01 f306 	lsl.w	r3, r1, r6
 8000d26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	0c3b      	lsrs	r3, r7, #16
 8000d32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d36:	fa1f f884 	uxth.w	r8, r4
 8000d3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d42:	fb09 fa08 	mul.w	sl, r9, r8
 8000d46:	458a      	cmp	sl, r1
 8000d48:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x220>
 8000d52:	1861      	adds	r1, r4, r1
 8000d54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d58:	d248      	bcs.n	8000dec <__udivmoddi4+0x2a8>
 8000d5a:	458a      	cmp	sl, r1
 8000d5c:	d946      	bls.n	8000dec <__udivmoddi4+0x2a8>
 8000d5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d62:	4421      	add	r1, r4
 8000d64:	eba1 010a 	sub.w	r1, r1, sl
 8000d68:	b2bf      	uxth	r7, r7
 8000d6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d76:	fb00 f808 	mul.w	r8, r0, r8
 8000d7a:	45b8      	cmp	r8, r7
 8000d7c:	d907      	bls.n	8000d8e <__udivmoddi4+0x24a>
 8000d7e:	19e7      	adds	r7, r4, r7
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d22e      	bcs.n	8000de4 <__udivmoddi4+0x2a0>
 8000d86:	45b8      	cmp	r8, r7
 8000d88:	d92c      	bls.n	8000de4 <__udivmoddi4+0x2a0>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4427      	add	r7, r4
 8000d8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d92:	eba7 0708 	sub.w	r7, r7, r8
 8000d96:	fba0 8902 	umull	r8, r9, r0, r2
 8000d9a:	454f      	cmp	r7, r9
 8000d9c:	46c6      	mov	lr, r8
 8000d9e:	4649      	mov	r1, r9
 8000da0:	d31a      	bcc.n	8000dd8 <__udivmoddi4+0x294>
 8000da2:	d017      	beq.n	8000dd4 <__udivmoddi4+0x290>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x27a>
 8000da6:	ebb3 020e 	subs.w	r2, r3, lr
 8000daa:	eb67 0701 	sbc.w	r7, r7, r1
 8000dae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000db2:	40f2      	lsrs	r2, r6
 8000db4:	ea4c 0202 	orr.w	r2, ip, r2
 8000db8:	40f7      	lsrs	r7, r6
 8000dba:	e9c5 2700 	strd	r2, r7, [r5]
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	462e      	mov	r6, r5
 8000dc8:	4628      	mov	r0, r5
 8000dca:	e70b      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000dcc:	4606      	mov	r6, r0
 8000dce:	e6e9      	b.n	8000ba4 <__udivmoddi4+0x60>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6fd      	b.n	8000bd0 <__udivmoddi4+0x8c>
 8000dd4:	4543      	cmp	r3, r8
 8000dd6:	d2e5      	bcs.n	8000da4 <__udivmoddi4+0x260>
 8000dd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ddc:	eb69 0104 	sbc.w	r1, r9, r4
 8000de0:	3801      	subs	r0, #1
 8000de2:	e7df      	b.n	8000da4 <__udivmoddi4+0x260>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e7d2      	b.n	8000d8e <__udivmoddi4+0x24a>
 8000de8:	4660      	mov	r0, ip
 8000dea:	e78d      	b.n	8000d08 <__udivmoddi4+0x1c4>
 8000dec:	4681      	mov	r9, r0
 8000dee:	e7b9      	b.n	8000d64 <__udivmoddi4+0x220>
 8000df0:	4666      	mov	r6, ip
 8000df2:	e775      	b.n	8000ce0 <__udivmoddi4+0x19c>
 8000df4:	4630      	mov	r0, r6
 8000df6:	e74a      	b.n	8000c8e <__udivmoddi4+0x14a>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	4439      	add	r1, r7
 8000dfe:	e713      	b.n	8000c28 <__udivmoddi4+0xe4>
 8000e00:	3802      	subs	r0, #2
 8000e02:	443c      	add	r4, r7
 8000e04:	e724      	b.n	8000c50 <__udivmoddi4+0x10c>
 8000e06:	bf00      	nop

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	0000      	movs	r0, r0
	...

08000e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e14:	ed2d 8b02 	vpush	{d8}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1c:	f001 f9f8 	bl	8002210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e20:	f000 f984 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e24:	f000 fb3c 	bl	80014a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e28:	f000 fb10 	bl	800144c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000e2c:	f000 f9e6 	bl	80011fc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e30:	f000 fa3c 	bl	80012ac <MX_TIM3_Init>
  MX_TIM5_Init();
 8000e34:	f000 fabc 	bl	80013b0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // start micro
  HAL_TIM_Base_Start_IT(&htim5);
 8000e38:	48a7      	ldr	r0, [pc, #668]	; (80010d8 <main+0x2c8>)
 8000e3a:	f002 f9c6 	bl	80031ca <HAL_TIM_Base_Start_IT>

  // start PWM
  HAL_TIM_Base_Start(&htim3);
 8000e3e:	48a7      	ldr	r0, [pc, #668]	; (80010dc <main+0x2cc>)
 8000e40:	f002 f99f 	bl	8003182 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e44:	2100      	movs	r1, #0
 8000e46:	48a5      	ldr	r0, [pc, #660]	; (80010dc <main+0x2cc>)
 8000e48:	f002 fa18 	bl	800327c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	48a3      	ldr	r0, [pc, #652]	; (80010dc <main+0x2cc>)
 8000e50:	f002 fa14 	bl	800327c <HAL_TIM_PWM_Start>


  // start QEI
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000e54:	213c      	movs	r1, #60	; 0x3c
 8000e56:	48a2      	ldr	r0, [pc, #648]	; (80010e0 <main+0x2d0>)
 8000e58:	f002 fad4 	bl	8003404 <HAL_TIM_Encoder_Start>


  //init lowpass_filter
  for(int i = 0;i < 10;i++){
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	e00f      	b.n	8000e82 <main+0x72>
	  lowpass_filters[i].Wc = Wc_arr[i];
 8000e62:	4aa0      	ldr	r2, [pc, #640]	; (80010e4 <main+0x2d4>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	4413      	add	r3, r2
 8000e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6e:	489e      	ldr	r0, [pc, #632]	; (80010e8 <main+0x2d8>)
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	0149      	lsls	r1, r1, #5
 8000e74:	4401      	add	r1, r0
 8000e76:	3118      	adds	r1, #24
 8000e78:	e9c1 2300 	strd	r2, r3, [r1]
  for(int i = 0;i < 10;i++){
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b09      	cmp	r3, #9
 8000e86:	ddec      	ble.n	8000e62 <main+0x52>
  }

  //init pid
  pids[0].dt = pids[1].dt = 0.02;
 8000e88:	4998      	ldr	r1, [pc, #608]	; (80010ec <main+0x2dc>)
 8000e8a:	a38b      	add	r3, pc, #556	; (adr r3, 80010b8 <main+0x2a8>)
 8000e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e90:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 8000e94:	4b95      	ldr	r3, [pc, #596]	; (80010ec <main+0x2dc>)
 8000e96:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8000e9a:	4994      	ldr	r1, [pc, #592]	; (80010ec <main+0x2dc>)
 8000e9c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  pids[0].min = pids[1].min = -10000;
 8000ea0:	4992      	ldr	r1, [pc, #584]	; (80010ec <main+0x2dc>)
 8000ea2:	a387      	add	r3, pc, #540	; (adr r3, 80010c0 <main+0x2b0>)
 8000ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea8:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8000eac:	4b8f      	ldr	r3, [pc, #572]	; (80010ec <main+0x2dc>)
 8000eae:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8000eb2:	498e      	ldr	r1, [pc, #568]	; (80010ec <main+0x2dc>)
 8000eb4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  pids[0].max = pids[1].max = 10000;
 8000eb8:	498c      	ldr	r1, [pc, #560]	; (80010ec <main+0x2dc>)
 8000eba:	a383      	add	r3, pc, #524	; (adr r3, 80010c8 <main+0x2b8>)
 8000ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8000ec4:	4b89      	ldr	r3, [pc, #548]	; (80010ec <main+0x2dc>)
 8000ec6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8000eca:	4988      	ldr	r1, [pc, #544]	; (80010ec <main+0x2dc>)
 8000ecc:	e9c1 2308 	strd	r2, r3, [r1, #32]
  pids[0].tau = pids[1].tau = 0.02;
 8000ed0:	4986      	ldr	r1, [pc, #536]	; (80010ec <main+0x2dc>)
 8000ed2:	a379      	add	r3, pc, #484	; (adr r3, 80010b8 <main+0x2a8>)
 8000ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8000edc:	4b83      	ldr	r3, [pc, #524]	; (80010ec <main+0x2dc>)
 8000ede:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8000ee2:	4982      	ldr	r1, [pc, #520]	; (80010ec <main+0x2dc>)
 8000ee4:	e9c1 2306 	strd	r2, r3, [r1, #24]
   */



  //PID position control
  pids[1].kp = 500;
 8000ee8:	4980      	ldr	r1, [pc, #512]	; (80010ec <main+0x2dc>)
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	4b80      	ldr	r3, [pc, #512]	; (80010f0 <main+0x2e0>)
 8000ef0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
  pids[1].ki = 1000;
 8000ef4:	497d      	ldr	r1, [pc, #500]	; (80010ec <main+0x2dc>)
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	4b7e      	ldr	r3, [pc, #504]	; (80010f4 <main+0x2e4>)
 8000efc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
  pids[1].kd = 1;
 8000f00:	497a      	ldr	r1, [pc, #488]	; (80010ec <main+0x2dc>)
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	4b7c      	ldr	r3, [pc, #496]	; (80010f8 <main+0x2e8>)
 8000f08:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68



  targectory_cal(paths, &path_n_cnt, 0, 180, 0.02);
 8000f0c:	ed9f 0b6a 	vldr	d0, [pc, #424]	; 80010b8 <main+0x2a8>
 8000f10:	23b4      	movs	r3, #180	; 0xb4
 8000f12:	2200      	movs	r2, #0
 8000f14:	4979      	ldr	r1, [pc, #484]	; (80010fc <main+0x2ec>)
 8000f16:	487a      	ldr	r0, [pc, #488]	; (8001100 <main+0x2f0>)
 8000f18:	f000 fdae 	bl	8001a78 <targectory_cal>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  encoder_value = unwraping_update();
 8000f1c:	f000 fb30 	bl	8001580 <unwraping_update>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a78      	ldr	r2, [pc, #480]	; (8001104 <main+0x2f4>)
 8000f24:	6013      	str	r3, [r2, #0]

	  // read encoder with low-pass
	  if(micros() - time_stamp > 1000){ // 1kHz
 8000f26:	f000 ff95 	bl	8001e54 <micros>
 8000f2a:	4b77      	ldr	r3, [pc, #476]	; (8001108 <main+0x2f8>)
 8000f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f30:	1a84      	subs	r4, r0, r2
 8000f32:	eb61 0503 	sbc.w	r5, r1, r3
 8000f36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f3a:	f04f 0300 	mov.w	r3, #0
 8000f3e:	42ab      	cmp	r3, r5
 8000f40:	bf08      	it	eq
 8000f42:	42a2      	cmpeq	r2, r4
 8000f44:	d243      	bcs.n	8000fce <main+0x1be>
		  time_stamp = micros();
 8000f46:	f000 ff85 	bl	8001e54 <micros>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	496e      	ldr	r1, [pc, #440]	; (8001108 <main+0x2f8>)
 8000f50:	e9c1 2300 	strd	r2, r3, [r1]

		  encoder_velocity = velocity_update(encoder_value);
 8000f54:	4b6b      	ldr	r3, [pc, #428]	; (8001104 <main+0x2f4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 fb4f 	bl	80015fc <velocity_update>
 8000f5e:	eeb0 7a40 	vmov.f32	s14, s0
 8000f62:	eef0 7a60 	vmov.f32	s15, s1
 8000f66:	4b69      	ldr	r3, [pc, #420]	; (800110c <main+0x2fc>)
 8000f68:	ed83 7b00 	vstr	d7, [r3]

		  for(int i = 0;i < 10;i++){
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	e01a      	b.n	8000fa8 <main+0x198>
			  lowpass_output[i] = low_pass_process(&lowpass_filters[i], encoder_velocity);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	015b      	lsls	r3, r3, #5
 8000f76:	4a5c      	ldr	r2, [pc, #368]	; (80010e8 <main+0x2d8>)
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a64      	ldr	r2, [pc, #400]	; (800110c <main+0x2fc>)
 8000f7c:	ed92 7b00 	vldr	d7, [r2]
 8000f80:	eeb0 0a47 	vmov.f32	s0, s14
 8000f84:	eef0 0a67 	vmov.f32	s1, s15
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 fb9b 	bl	80016c4 <low_pass_process>
 8000f8e:	eeb0 7a40 	vmov.f32	s14, s0
 8000f92:	eef0 7a60 	vmov.f32	s15, s1
 8000f96:	4a5e      	ldr	r2, [pc, #376]	; (8001110 <main+0x300>)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	4413      	add	r3, r2
 8000f9e:	ed83 7b00 	vstr	d7, [r3]
		  for(int i = 0;i < 10;i++){
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	2b09      	cmp	r3, #9
 8000fac:	dde1      	ble.n	8000f72 <main+0x162>
		  }

		  encoder_velocity_rpm = ppms_to_rpm(lowpass_output[1]);
 8000fae:	4b58      	ldr	r3, [pc, #352]	; (8001110 <main+0x300>)
 8000fb0:	ed93 7b02 	vldr	d7, [r3, #8]
 8000fb4:	eeb0 0a47 	vmov.f32	s0, s14
 8000fb8:	eef0 0a67 	vmov.f32	s1, s15
 8000fbc:	f000 fb5c 	bl	8001678 <ppms_to_rpm>
 8000fc0:	eeb0 7a40 	vmov.f32	s14, s0
 8000fc4:	eef0 7a60 	vmov.f32	s15, s1
 8000fc8:	4b52      	ldr	r3, [pc, #328]	; (8001114 <main+0x304>)
 8000fca:	ed83 7b00 	vstr	d7, [r3]
		  //kalman_output = kalman_filter_update(encoder_velocity*300);
	  }

	  //pid control , system dead-time = 0.16 sec = 6.25 Hz 165000
	  if(micros() - time_stamp2 > 20000){ // 6.06Hz
 8000fce:	f000 ff41 	bl	8001e54 <micros>
 8000fd2:	4b51      	ldr	r3, [pc, #324]	; (8001118 <main+0x308>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	ebb0 0802 	subs.w	r8, r0, r2
 8000fdc:	eb61 0903 	sbc.w	r9, r1, r3
 8000fe0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000fe4:	f04f 0300 	mov.w	r3, #0
 8000fe8:	454b      	cmp	r3, r9
 8000fea:	bf08      	it	eq
 8000fec:	4542      	cmpeq	r2, r8
 8000fee:	d295      	bcs.n	8000f1c <main+0x10c>
	  		  time_stamp2 = micros();
 8000ff0:	f000 ff30 	bl	8001e54 <micros>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4947      	ldr	r1, [pc, #284]	; (8001118 <main+0x308>)
 8000ffa:	e9c1 2300 	strd	r2, r3, [r1]


	  		  //setpoint = paths_ind < path_n_cnt ? paths[paths_ind++]/6:0;
	  		  //pid_pwm_output = pid_update(&pids[0], setpoint, encoder_velocity_rpm);
	  		  pid_pwm_output = pid_update(&pids[1], setpoint, (double)encoder_value/(12*64*4-1)*360);
 8000ffe:	4b47      	ldr	r3, [pc, #284]	; (800111c <main+0x30c>)
 8001000:	ed93 8b00 	vldr	d8, [r3]
 8001004:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <main+0x2f4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fa37 	bl	800047c <__aeabi_i2d>
 800100e:	a330      	add	r3, pc, #192	; (adr r3, 80010d0 <main+0x2c0>)
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	f7ff fbc6 	bl	80007a4 <__aeabi_ddiv>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	4b3e      	ldr	r3, [pc, #248]	; (8001120 <main+0x310>)
 8001026:	f7ff fa93 	bl	8000550 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	ec43 2b17 	vmov	d7, r2, r3
 8001032:	eeb0 1a47 	vmov.f32	s2, s14
 8001036:	eef0 1a67 	vmov.f32	s3, s15
 800103a:	eeb0 0a48 	vmov.f32	s0, s16
 800103e:	eef0 0a68 	vmov.f32	s1, s17
 8001042:	4838      	ldr	r0, [pc, #224]	; (8001124 <main+0x314>)
 8001044:	f000 fbd0 	bl	80017e8 <pid_update>
 8001048:	eeb0 7a40 	vmov.f32	s14, s0
 800104c:	eef0 7a60 	vmov.f32	s15, s1
 8001050:	4b35      	ldr	r3, [pc, #212]	; (8001128 <main+0x318>)
 8001052:	ed83 7b00 	vstr	d7, [r3]



	  		  if(pid_pwm_output > 0){
 8001056:	4b34      	ldr	r3, [pc, #208]	; (8001128 <main+0x318>)
 8001058:	e9d3 0100 	ldrd	r0, r1, [r3]
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	f7ff fd04 	bl	8000a70 <__aeabi_dcmpgt>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00f      	beq.n	800108e <main+0x27e>
	  			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,pid_pwm_output);
 800106e:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <main+0x318>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	4919      	ldr	r1, [pc, #100]	; (80010dc <main+0x2cc>)
 8001076:	680e      	ldr	r6, [r1, #0]
 8001078:	4610      	mov	r0, r2
 800107a:	4619      	mov	r1, r3
 800107c:	f7ff fd2a 	bl	8000ad4 <__aeabi_d2uiz>
 8001080:	4603      	mov	r3, r0
 8001082:	6373      	str	r3, [r6, #52]	; 0x34
	  			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 8001084:	4b15      	ldr	r3, [pc, #84]	; (80010dc <main+0x2cc>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2200      	movs	r2, #0
 800108a:	639a      	str	r2, [r3, #56]	; 0x38
 800108c:	e746      	b.n	8000f1c <main+0x10c>
	  		  }
	  		  else{
	  			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <main+0x2cc>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2200      	movs	r2, #0
 8001094:	635a      	str	r2, [r3, #52]	; 0x34
	  			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,-pid_pwm_output);
 8001096:	4b24      	ldr	r3, [pc, #144]	; (8001128 <main+0x318>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	4692      	mov	sl, r2
 800109e:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <main+0x2cc>)
 80010a4:	681e      	ldr	r6, [r3, #0]
 80010a6:	4650      	mov	r0, sl
 80010a8:	4659      	mov	r1, fp
 80010aa:	f7ff fd13 	bl	8000ad4 <__aeabi_d2uiz>
 80010ae:	4603      	mov	r3, r0
 80010b0:	63b3      	str	r3, [r6, #56]	; 0x38
	  encoder_value = unwraping_update();
 80010b2:	e733      	b.n	8000f1c <main+0x10c>
 80010b4:	f3af 8000 	nop.w
 80010b8:	47ae147b 	.word	0x47ae147b
 80010bc:	3f947ae1 	.word	0x3f947ae1
 80010c0:	00000000 	.word	0x00000000
 80010c4:	c0c38800 	.word	0xc0c38800
 80010c8:	00000000 	.word	0x00000000
 80010cc:	40c38800 	.word	0x40c38800
 80010d0:	00000000 	.word	0x00000000
 80010d4:	40a7fe00 	.word	0x40a7fe00
 80010d8:	200022ac 	.word	0x200022ac
 80010dc:	200022ec 	.word	0x200022ec
 80010e0:	2000232c 	.word	0x2000232c
 80010e4:	20000000 	.word	0x20000000
 80010e8:	200000d8 	.word	0x200000d8
 80010ec:	20000290 	.word	0x20000290
 80010f0:	407f4000 	.word	0x407f4000
 80010f4:	408f4000 	.word	0x408f4000
 80010f8:	3ff00000 	.word	0x3ff00000
 80010fc:	20002290 	.word	0x20002290
 8001100:	20000350 	.word	0x20000350
 8001104:	200000b0 	.word	0x200000b0
 8001108:	200000c8 	.word	0x200000c8
 800110c:	200000b8 	.word	0x200000b8
 8001110:	20000218 	.word	0x20000218
 8001114:	200000c0 	.word	0x200000c0
 8001118:	200000d0 	.word	0x200000d0
 800111c:	20000348 	.word	0x20000348
 8001120:	40768000 	.word	0x40768000
 8001124:	200002e8 	.word	0x200002e8
 8001128:	20000340 	.word	0x20000340

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	; 0x50
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	2230      	movs	r2, #48	; 0x30
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f003 fbb0 	bl	80048a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <SystemClock_Config+0xc8>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	4a26      	ldr	r2, [pc, #152]	; (80011f4 <SystemClock_Config+0xc8>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	; 0x40
 8001160:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <SystemClock_Config+0xc8>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <SystemClock_Config+0xcc>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a20      	ldr	r2, [pc, #128]	; (80011f8 <SystemClock_Config+0xcc>)
 8001176:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <SystemClock_Config+0xcc>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001188:	2302      	movs	r3, #2
 800118a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800118c:	2301      	movs	r3, #1
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001190:	2310      	movs	r3, #16
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001194:	2302      	movs	r3, #2
 8001196:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001198:	2300      	movs	r3, #0
 800119a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800119c:	2308      	movs	r3, #8
 800119e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80011a0:	2364      	movs	r3, #100	; 0x64
 80011a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011a8:	2304      	movs	r3, #4
 80011aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ac:	f107 0320 	add.w	r3, r7, #32
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 fb4f 	bl	8002854 <HAL_RCC_OscConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011bc:	f000 fe7e 	bl	8001ebc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c0:	230f      	movs	r3, #15
 80011c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c4:	2302      	movs	r3, #2
 80011c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	2103      	movs	r1, #3
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 fda9 	bl	8002d34 <HAL_RCC_ClockConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011e8:	f000 fe68 	bl	8001ebc <Error_Handler>
  }
}
 80011ec:	bf00      	nop
 80011ee:	3750      	adds	r7, #80	; 0x50
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40007000 	.word	0x40007000

080011fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	; 0x30
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	2224      	movs	r2, #36	; 0x24
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f003 fb48 	bl	80048a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001218:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <MX_TIM1_Init+0xa8>)
 800121a:	4a23      	ldr	r2, [pc, #140]	; (80012a8 <MX_TIM1_Init+0xac>)
 800121c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_TIM1_Init+0xa8>)
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_TIM1_Init+0xa8>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = (12*64*4) -1;
 800122a:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <MX_TIM1_Init+0xa8>)
 800122c:	f640 32ff 	movw	r2, #3071	; 0xbff
 8001230:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_TIM1_Init+0xa8>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_TIM1_Init+0xa8>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_TIM1_Init+0xa8>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001244:	2303      	movs	r3, #3
 8001246:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800124c:	2301      	movs	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800125c:	2301      	movs	r3, #1
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	4619      	mov	r1, r3
 800126e:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_TIM1_Init+0xa8>)
 8001270:	f002 f836 	bl	80032e0 <HAL_TIM_Encoder_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800127a:	f000 fe1f 	bl	8001ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	4619      	mov	r1, r3
 800128a:	4806      	ldr	r0, [pc, #24]	; (80012a4 <MX_TIM1_Init+0xa8>)
 800128c:	f002 fe78 	bl	8003f80 <HAL_TIMEx_MasterConfigSynchronization>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001296:	f000 fe11 	bl	8001ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	3730      	adds	r7, #48	; 0x30
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2000232c 	.word	0x2000232c
 80012a8:	40010000 	.word	0x40010000

080012ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08e      	sub	sp, #56	; 0x38
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c0:	f107 0320 	add.w	r3, r7, #32
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
 80012d8:	615a      	str	r2, [r3, #20]
 80012da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012dc:	4b32      	ldr	r3, [pc, #200]	; (80013a8 <MX_TIM3_Init+0xfc>)
 80012de:	4a33      	ldr	r2, [pc, #204]	; (80013ac <MX_TIM3_Init+0x100>)
 80012e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012e2:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <MX_TIM3_Init+0xfc>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e8:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <MX_TIM3_Init+0xfc>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80012ee:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <MX_TIM3_Init+0xfc>)
 80012f0:	f242 7210 	movw	r2, #10000	; 0x2710
 80012f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f6:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <MX_TIM3_Init+0xfc>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fc:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <MX_TIM3_Init+0xfc>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001302:	4829      	ldr	r0, [pc, #164]	; (80013a8 <MX_TIM3_Init+0xfc>)
 8001304:	f001 ff12 	bl	800312c <HAL_TIM_Base_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800130e:	f000 fdd5 	bl	8001ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800131c:	4619      	mov	r1, r3
 800131e:	4822      	ldr	r0, [pc, #136]	; (80013a8 <MX_TIM3_Init+0xfc>)
 8001320:	f002 fa76 	bl	8003810 <HAL_TIM_ConfigClockSource>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800132a:	f000 fdc7 	bl	8001ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800132e:	481e      	ldr	r0, [pc, #120]	; (80013a8 <MX_TIM3_Init+0xfc>)
 8001330:	f001 ff6f 	bl	8003212 <HAL_TIM_PWM_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800133a:	f000 fdbf 	bl	8001ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001346:	f107 0320 	add.w	r3, r7, #32
 800134a:	4619      	mov	r1, r3
 800134c:	4816      	ldr	r0, [pc, #88]	; (80013a8 <MX_TIM3_Init+0xfc>)
 800134e:	f002 fe17 	bl	8003f80 <HAL_TIMEx_MasterConfigSynchronization>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001358:	f000 fdb0 	bl	8001ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800135c:	2360      	movs	r3, #96	; 0x60
 800135e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2200      	movs	r2, #0
 8001370:	4619      	mov	r1, r3
 8001372:	480d      	ldr	r0, [pc, #52]	; (80013a8 <MX_TIM3_Init+0xfc>)
 8001374:	f002 f986 	bl	8003684 <HAL_TIM_PWM_ConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800137e:	f000 fd9d 	bl	8001ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2204      	movs	r2, #4
 8001386:	4619      	mov	r1, r3
 8001388:	4807      	ldr	r0, [pc, #28]	; (80013a8 <MX_TIM3_Init+0xfc>)
 800138a:	f002 f97b 	bl	8003684 <HAL_TIM_PWM_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001394:	f000 fd92 	bl	8001ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001398:	4803      	ldr	r0, [pc, #12]	; (80013a8 <MX_TIM3_Init+0xfc>)
 800139a:	f000 fe43 	bl	8002024 <HAL_TIM_MspPostInit>

}
 800139e:	bf00      	nop
 80013a0:	3738      	adds	r7, #56	; 0x38
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200022ec 	.word	0x200022ec
 80013ac:	40000400 	.word	0x40000400

080013b0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	463b      	mov	r3, r7
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_TIM5_Init+0x94>)
 80013ce:	4a1e      	ldr	r2, [pc, #120]	; (8001448 <MX_TIM5_Init+0x98>)
 80013d0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_TIM5_Init+0x94>)
 80013d4:	2263      	movs	r2, #99	; 0x63
 80013d6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_TIM5_Init+0x94>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_TIM5_Init+0x94>)
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_TIM5_Init+0x94>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b15      	ldr	r3, [pc, #84]	; (8001444 <MX_TIM5_Init+0x94>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013f2:	4814      	ldr	r0, [pc, #80]	; (8001444 <MX_TIM5_Init+0x94>)
 80013f4:	f001 fe9a 	bl	800312c <HAL_TIM_Base_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80013fe:	f000 fd5d 	bl	8001ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001406:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	4619      	mov	r1, r3
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_TIM5_Init+0x94>)
 8001410:	f002 f9fe 	bl	8003810 <HAL_TIM_ConfigClockSource>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800141a:	f000 fd4f 	bl	8001ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001426:	463b      	mov	r3, r7
 8001428:	4619      	mov	r1, r3
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <MX_TIM5_Init+0x94>)
 800142c:	f002 fda8 	bl	8003f80 <HAL_TIMEx_MasterConfigSynchronization>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001436:	f000 fd41 	bl	8001ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200022ac 	.word	0x200022ac
 8001448:	40000c00 	.word	0x40000c00

0800144c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <MX_USART2_UART_Init+0x50>)
 8001454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001484:	f002 fdfe 	bl	8004084 <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800148e:	f000 fd15 	bl	8001ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	2000236c 	.word	0x2000236c
 800149c:	40004400 	.word	0x40004400

080014a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <MX_GPIO_Init+0xd0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a2c      	ldr	r2, [pc, #176]	; (8001570 <MX_GPIO_Init+0xd0>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <MX_GPIO_Init+0xd0>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <MX_GPIO_Init+0xd0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a25      	ldr	r2, [pc, #148]	; (8001570 <MX_GPIO_Init+0xd0>)
 80014dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b23      	ldr	r3, [pc, #140]	; (8001570 <MX_GPIO_Init+0xd0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <MX_GPIO_Init+0xd0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a1e      	ldr	r2, [pc, #120]	; (8001570 <MX_GPIO_Init+0xd0>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <MX_GPIO_Init+0xd0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <MX_GPIO_Init+0xd0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a17      	ldr	r2, [pc, #92]	; (8001570 <MX_GPIO_Init+0xd0>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <MX_GPIO_Init+0xd0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2120      	movs	r1, #32
 800152a:	4812      	ldr	r0, [pc, #72]	; (8001574 <MX_GPIO_Init+0xd4>)
 800152c:	f001 f978 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <MX_GPIO_Init+0xd8>)
 8001538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <MX_GPIO_Init+0xdc>)
 8001546:	f000 ffe7 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800154a:	2320      	movs	r3, #32
 800154c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <MX_GPIO_Init+0xd4>)
 8001562:	f000 ffd9 	bl	8002518 <HAL_GPIO_Init>

}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	; 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40020000 	.word	0x40020000
 8001578:	10210000 	.word	0x10210000
 800157c:	40020800 	.word	0x40020800

08001580 <unwraping_update>:
static int pre_enc_cnt = 0;
static int k = 0;

#define half_enc_cnt (12*64*4)/2
#define enc_cnt 12*64*4
int unwraping_update(){
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

	static int cur_enc_cnt = 0;

	cur_enc_cnt = TIM1->CNT;
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <unwraping_update+0x6c>)
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	461a      	mov	r2, r3
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <unwraping_update+0x70>)
 800158c:	601a      	str	r2, [r3, #0]


	if(abs((int)cur_enc_cnt - pre_enc_cnt) > half_enc_cnt){
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <unwraping_update+0x70>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <unwraping_update+0x74>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	bfb8      	it	lt
 800159c:	425b      	neglt	r3, r3
 800159e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80015a2:	dd0f      	ble.n	80015c4 <unwraping_update+0x44>
		k+= (int)cur_enc_cnt - pre_enc_cnt > 0 ? -1 : 1 ;
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <unwraping_update+0x70>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <unwraping_update+0x74>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	dd02      	ble.n	80015b8 <unwraping_update+0x38>
 80015b2:	f04f 32ff 	mov.w	r2, #4294967295
 80015b6:	e000      	b.n	80015ba <unwraping_update+0x3a>
 80015b8:	2201      	movs	r2, #1
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <unwraping_update+0x78>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <unwraping_update+0x78>)
 80015c2:	6013      	str	r3, [r2, #0]
	}

	pre_enc_cnt = cur_enc_cnt;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <unwraping_update+0x70>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <unwraping_update+0x74>)
 80015ca:	6013      	str	r3, [r2, #0]
	return enc_cnt * k + cur_enc_cnt;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <unwraping_update+0x78>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	029b      	lsls	r3, r3, #10
 80015d8:	461a      	mov	r2, r3
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <unwraping_update+0x70>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4413      	add	r3, r2
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40010000 	.word	0x40010000
 80015f0:	2000229c 	.word	0x2000229c
 80015f4:	20002294 	.word	0x20002294
 80015f8:	20002298 	.word	0x20002298

080015fc <velocity_update>:

double velocity_update(int cur_pos){
 80015fc:	b5b0      	push	{r4, r5, r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	static int pre_pos = 0;
	static int pre_time = 0;
	static int cur_time = 0;

	cur_time = micros();
 8001604:	f000 fc26 	bl	8001e54 <micros>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <velocity_update+0x70>)
 800160e:	601a      	str	r2, [r3, #0]

	double velo = (double)(cur_pos - pre_pos)/(cur_time - pre_time);
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <velocity_update+0x74>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ff2f 	bl	800047c <__aeabi_i2d>
 800161e:	4604      	mov	r4, r0
 8001620:	460d      	mov	r5, r1
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <velocity_update+0x70>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <velocity_update+0x78>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ff25 	bl	800047c <__aeabi_i2d>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4620      	mov	r0, r4
 8001638:	4629      	mov	r1, r5
 800163a:	f7ff f8b3 	bl	80007a4 <__aeabi_ddiv>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pre_pos = cur_pos;
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <velocity_update+0x74>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6013      	str	r3, [r2, #0]
	pre_time = cur_time;
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <velocity_update+0x70>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a08      	ldr	r2, [pc, #32]	; (8001674 <velocity_update+0x78>)
 8001652:	6013      	str	r3, [r2, #0]

	return velo;
 8001654:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001658:	ec43 2b17 	vmov	d7, r2, r3

}
 800165c:	eeb0 0a47 	vmov.f32	s0, s14
 8001660:	eef0 0a67 	vmov.f32	s1, s15
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bdb0      	pop	{r4, r5, r7, pc}
 800166a:	bf00      	nop
 800166c:	200022a0 	.word	0x200022a0
 8001670:	200022a4 	.word	0x200022a4
 8001674:	200022a8 	.word	0x200022a8

08001678 <ppms_to_rpm>:

double ppms_to_rpm(double input){
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	ed87 0b00 	vstr	d0, [r7]
	return input*60e6/(enc_cnt);
 8001682:	a30e      	add	r3, pc, #56	; (adr r3, 80016bc <ppms_to_rpm+0x44>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	e9d7 0100 	ldrd	r0, r1, [r7]
 800168c:	f7fe ff60 	bl	8000550 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <ppms_to_rpm+0x40>)
 800169e:	f7ff f881 	bl	80007a4 <__aeabi_ddiv>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	ec43 2b17 	vmov	d7, r2, r3
}
 80016aa:	eeb0 0a47 	vmov.f32	s0, s14
 80016ae:	eef0 0a67 	vmov.f32	s1, s15
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40a80000 	.word	0x40a80000
 80016bc:	00000000 	.word	0x00000000
 80016c0:	418c9c38 	.word	0x418c9c38

080016c4 <low_pass_process>:

double low_pass_process(LowPass *lowpass,double input){
 80016c4:	b5b0      	push	{r4, r5, r7, lr}
 80016c6:	b08c      	sub	sp, #48	; 0x30
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	ed87 0b00 	vstr	d0, [r7]

	double cur_time = micros();
 80016d0:	f000 fbc0 	bl	8001e54 <micros>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f7fe ff02 	bl	80004e4 <__aeabi_ul2d>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double delta_t = cur_time - lowpass->pre_time;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016f2:	f7fe fd75 	bl	80001e0 <__aeabi_dsub>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double k = (lowpass->Wc*delta_t)/(2+ lowpass->Wc*delta_t);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001704:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001708:	f7fe ff22 	bl	8000550 <__aeabi_dmul>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4614      	mov	r4, r2
 8001712:	461d      	mov	r5, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800171a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800171e:	f7fe ff17 	bl	8000550 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001732:	f7fe fd57 	bl	80001e4 <__adddf3>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4620      	mov	r0, r4
 800173c:	4629      	mov	r1, r5
 800173e:	f7ff f831 	bl	80007a4 <__aeabi_ddiv>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double output = (1 - 2*k)*(lowpass->pre_output) +k*(input+lowpass->pre_input);
 800174a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	f7fe fd47 	bl	80001e4 <__adddf3>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	f04f 0000 	mov.w	r0, #0
 800175e:	4921      	ldr	r1, [pc, #132]	; (80017e4 <low_pass_process+0x120>)
 8001760:	f7fe fd3e 	bl	80001e0 <__aeabi_dsub>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001772:	f7fe feed 	bl	8000550 <__aeabi_dmul>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4614      	mov	r4, r2
 800177c:	461d      	mov	r5, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001788:	f7fe fd2c 	bl	80001e4 <__adddf3>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001798:	f7fe feda 	bl	8000550 <__aeabi_dmul>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4620      	mov	r0, r4
 80017a2:	4629      	mov	r1, r5
 80017a4:	f7fe fd1e 	bl	80001e4 <__adddf3>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	e9c7 2304 	strd	r2, r3, [r7, #16]

	lowpass->pre_time = cur_time;
 80017b0:	68f9      	ldr	r1, [r7, #12]
 80017b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	lowpass->pre_input = input;
 80017ba:	68f9      	ldr	r1, [r7, #12]
 80017bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017c0:	e9c1 2300 	strd	r2, r3, [r1]
	lowpass->pre_output = output;
 80017c4:	68f9      	ldr	r1, [r7, #12]
 80017c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017ca:	e9c1 2302 	strd	r2, r3, [r1, #8]

	return output;
 80017ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80017d6:	eeb0 0a47 	vmov.f32	s0, s14
 80017da:	eef0 0a67 	vmov.f32	s1, s15
 80017de:	3730      	adds	r7, #48	; 0x30
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bdb0      	pop	{r4, r5, r7, pc}
 80017e4:	3ff00000 	.word	0x3ff00000

080017e8 <pid_update>:
	P = (1-K*H)*P+Q;

	return U_hat;
}

double pid_update(PID *pid,double setpoint,double mea){
 80017e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017ec:	b090      	sub	sp, #64	; 0x40
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6178      	str	r0, [r7, #20]
 80017f2:	ed87 0b02 	vstr	d0, [r7, #8]
 80017f6:	ed87 1b00 	vstr	d1, [r7]

	//Error
	double error = setpoint - mea;
 80017fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001802:	f7fe fced 	bl	80001e0 <__aeabi_dsub>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	//Proportional
	double proportional = pid->kp * error;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001818:	f7fe fe9a 	bl	8000550 <__aeabi_dmul>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	//Integral
	pid->integral = pid->integral + 0.5f * pid->ki * pid->dt * (error + pid->pre_error);
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	e9d3 890e 	ldrd	r8, r9, [r3, #56]	; 0x38
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	4b8f      	ldr	r3, [pc, #572]	; (8001a74 <pid_update+0x28c>)
 8001836:	f7fe fe8b 	bl	8000550 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001848:	f7fe fe82 	bl	8000550 <__aeabi_dmul>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4692      	mov	sl, r2
 8001852:	469b      	mov	fp, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800185a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800185e:	f7fe fcc1 	bl	80001e4 <__adddf3>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4650      	mov	r0, sl
 8001868:	4659      	mov	r1, fp
 800186a:	f7fe fe71 	bl	8000550 <__aeabi_dmul>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4640      	mov	r0, r8
 8001874:	4649      	mov	r1, r9
 8001876:	f7fe fcb5 	bl	80001e4 <__adddf3>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	6979      	ldr	r1, [r7, #20]
 8001880:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	//calculate integral anti wind up
	double max_i,min_i;

	max_i = pid->max > proportional ? pid->max - proportional : 0;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800188a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800188e:	f7ff f8d1 	bl	8000a34 <__aeabi_dcmplt>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d009      	beq.n	80018ac <pid_update+0xc4>
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800189e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018a2:	f7fe fc9d 	bl	80001e0 <__aeabi_dsub>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	e003      	b.n	80018b4 <pid_update+0xcc>
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	min_i = pid->min < proportional ? pid->min - proportional : 0;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80018be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018c2:	f7ff f8d5 	bl	8000a70 <__aeabi_dcmpgt>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d009      	beq.n	80018e0 <pid_update+0xf8>
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80018d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018d6:	f7fe fc83 	bl	80001e0 <__aeabi_dsub>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	e003      	b.n	80018e8 <pid_update+0x100>
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	e9c7 2306 	strd	r2, r3, [r7, #24]


	//integral clamp
	if(pid->integral > max_i){
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80018f2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018f6:	f7ff f89d 	bl	8000a34 <__aeabi_dcmplt>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <pid_update+0x124>
		pid->integral = max_i;
 8001900:	6979      	ldr	r1, [r7, #20]
 8001902:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001906:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800190a:	e00e      	b.n	800192a <pid_update+0x142>
	}
	else if(pid->integral < min_i){
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001912:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001916:	f7ff f8ab 	bl	8000a70 <__aeabi_dcmpgt>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d004      	beq.n	800192a <pid_update+0x142>
		pid->integral = min_i;
 8001920:	6979      	ldr	r1, [r7, #20]
 8001922:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001926:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	}

	//Derivative
	pid->diff = -(2.0f * pid->kd * (mea - pid->pre_mea) + (2.0f * pid->tau - pid->dt) * pid->diff) / (2.0f * pid->tau + pid->dt);
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	f7fe fc56 	bl	80001e4 <__adddf3>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4690      	mov	r8, r2
 800193e:	4699      	mov	r9, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001946:	e9d7 0100 	ldrd	r0, r1, [r7]
 800194a:	f7fe fc49 	bl	80001e0 <__aeabi_dsub>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4640      	mov	r0, r8
 8001954:	4649      	mov	r1, r9
 8001956:	f7fe fdfb 	bl	8000550 <__aeabi_dmul>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4690      	mov	r8, r2
 8001960:	4699      	mov	r9, r3
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	f7fe fc3a 	bl	80001e4 <__adddf3>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800197e:	f7fe fc2f 	bl	80001e0 <__aeabi_dsub>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001990:	f7fe fdde 	bl	8000550 <__aeabi_dmul>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4640      	mov	r0, r8
 800199a:	4649      	mov	r1, r9
 800199c:	f7fe fc22 	bl	80001e4 <__adddf3>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4614      	mov	r4, r2
 80019a6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	f7fe fc16 	bl	80001e4 <__adddf3>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80019c6:	f7fe fc0d 	bl	80001e4 <__adddf3>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4620      	mov	r0, r4
 80019d0:	4629      	mov	r1, r5
 80019d2:	f7fe fee7 	bl	80007a4 <__aeabi_ddiv>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	6979      	ldr	r1, [r7, #20]
 80019dc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	double output = proportional + pid->integral + pid->diff;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80019e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019ea:	f7fe fbfb 	bl	80001e4 <__adddf3>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80019fc:	f7fe fbf2 	bl	80001e4 <__adddf3>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	if(output > pid->max){
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001a0e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a12:	f7ff f82d 	bl	8000a70 <__aeabi_dcmpgt>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <pid_update+0x240>
		output = pid->max;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001a22:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001a26:	e00e      	b.n	8001a46 <pid_update+0x25e>
	}
	else if(output < pid->min){
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001a2e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a32:	f7fe ffff 	bl	8000a34 <__aeabi_dcmplt>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d004      	beq.n	8001a46 <pid_update+0x25e>
		output = pid->min;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001a42:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}

	pid->pre_error = error;
 8001a46:	6979      	ldr	r1, [r7, #20]
 8001a48:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a4c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pid->pre_mea = mea;
 8001a50:	6979      	ldr	r1, [r7, #20]
 8001a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a56:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	return output;
 8001a5a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001a5e:	ec43 2b17 	vmov	d7, r2, r3

}
 8001a62:	eeb0 0a47 	vmov.f32	s0, s14
 8001a66:	eef0 0a67 	vmov.f32	s1, s15
 8001a6a:	3740      	adds	r7, #64	; 0x40
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a72:	bf00      	nop
 8001a74:	3fe00000 	.word	0x3fe00000

08001a78 <targectory_cal>:


void targectory_cal(double *datas,int *n,int start_pos,int stop_pos,double dt){
 8001a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a7c:	b09f      	sub	sp, #124	; 0x7c
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6178      	str	r0, [r7, #20]
 8001a82:	6139      	str	r1, [r7, #16]
 8001a84:	60fa      	str	r2, [r7, #12]
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	ed87 0b00 	vstr	d0, [r7]
    double v_max = 10*6;            // degree per sec
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	4b7f      	ldr	r3, [pc, #508]	; (8001c90 <targectory_cal+0x218>)
 8001a92:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    double a_max = 0.5 * 57.296;    // degree per sec^2
 8001a96:	a37c      	add	r3, pc, #496	; (adr r3, 8001c88 <targectory_cal+0x210>)
 8001a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

    int dis = (stop_pos - start_pos +360)%360;
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001aaa:	4a7a      	ldr	r2, [pc, #488]	; (8001c94 <targectory_cal+0x21c>)
 8001aac:	fb82 1203 	smull	r1, r2, r2, r3
 8001ab0:	441a      	add	r2, r3
 8001ab2:	1211      	asrs	r1, r2, #8
 8001ab4:	17da      	asrs	r2, r3, #31
 8001ab6:	1a8a      	subs	r2, r1, r2
 8001ab8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001abc:	fb01 f202 	mul.w	r2, r1, r2
 8001ac0:	1a9b      	subs	r3, r3, r2
 8001ac2:	677b      	str	r3, [r7, #116]	; 0x74
    int inverse = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	673b      	str	r3, [r7, #112]	; 0x70
    if ((start_pos - stop_pos +360)%360 < dis){
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ad2:	4a70      	ldr	r2, [pc, #448]	; (8001c94 <targectory_cal+0x21c>)
 8001ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad8:	441a      	add	r2, r3
 8001ada:	1211      	asrs	r1, r2, #8
 8001adc:	17da      	asrs	r2, r3, #31
 8001ade:	1a8a      	subs	r2, r1, r2
 8001ae0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001ae4:	fb01 f202 	mul.w	r2, r1, r2
 8001ae8:	1a9a      	subs	r2, r3, r2
 8001aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aec:	4293      	cmp	r3, r2
 8001aee:	dd13      	ble.n	8001b18 <targectory_cal+0xa0>
        inverse = 1;
 8001af0:	2301      	movs	r3, #1
 8001af2:	673b      	str	r3, [r7, #112]	; 0x70
        dis = (start_pos - stop_pos +360)%360;
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001afe:	4a65      	ldr	r2, [pc, #404]	; (8001c94 <targectory_cal+0x21c>)
 8001b00:	fb82 1203 	smull	r1, r2, r2, r3
 8001b04:	441a      	add	r2, r3
 8001b06:	1211      	asrs	r1, r2, #8
 8001b08:	17da      	asrs	r2, r3, #31
 8001b0a:	1a8a      	subs	r2, r1, r2
 8001b0c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001b10:	fb01 f202 	mul.w	r2, r1, r2
 8001b14:	1a9b      	subs	r3, r3, r2
 8001b16:	677b      	str	r3, [r7, #116]	; 0x74
    }
    start_pos = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
    stop_pos = dis;
 8001b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b1e:	60bb      	str	r3, [r7, #8]

    double tf = 10;
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	4b5c      	ldr	r3, [pc, #368]	; (8001c98 <targectory_cal+0x220>)
 8001b26:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double a0 = 0;
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double a1 = 0;
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double a2 = 0;
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double a3 = 10*((double)dis)/(tf*tf*tf);
 8001b4e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b50:	f7fe fc94 	bl	800047c <__aeabi_i2d>
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	4b4f      	ldr	r3, [pc, #316]	; (8001c98 <targectory_cal+0x220>)
 8001b5a:	f7fe fcf9 	bl	8000550 <__aeabi_dmul>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4690      	mov	r8, r2
 8001b64:	4699      	mov	r9, r3
 8001b66:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001b6e:	f7fe fcef 	bl	8000550 <__aeabi_dmul>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b7e:	f7fe fce7 	bl	8000550 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4640      	mov	r0, r8
 8001b88:	4649      	mov	r1, r9
 8001b8a:	f7fe fe0b 	bl	80007a4 <__aeabi_ddiv>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double a4 = -15*((double)dis)/(tf*tf*tf*tf);
 8001b96:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b98:	f7fe fc70 	bl	800047c <__aeabi_i2d>
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	4b3e      	ldr	r3, [pc, #248]	; (8001c9c <targectory_cal+0x224>)
 8001ba2:	f7fe fcd5 	bl	8000550 <__aeabi_dmul>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4690      	mov	r8, r2
 8001bac:	4699      	mov	r9, r3
 8001bae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bb2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001bb6:	f7fe fccb 	bl	8000550 <__aeabi_dmul>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bc6:	f7fe fcc3 	bl	8000550 <__aeabi_dmul>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bd6:	f7fe fcbb 	bl	8000550 <__aeabi_dmul>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4640      	mov	r0, r8
 8001be0:	4649      	mov	r1, r9
 8001be2:	f7fe fddf 	bl	80007a4 <__aeabi_ddiv>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double a5 = 6*((double)dis)/(tf*tf*tf*tf*tf);
 8001bee:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001bf0:	f7fe fc44 	bl	800047c <__aeabi_i2d>
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	4b29      	ldr	r3, [pc, #164]	; (8001ca0 <targectory_cal+0x228>)
 8001bfa:	f7fe fca9 	bl	8000550 <__aeabi_dmul>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4690      	mov	r8, r2
 8001c04:	4699      	mov	r9, r3
 8001c06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c0a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001c0e:	f7fe fc9f 	bl	8000550 <__aeabi_dmul>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c1e:	f7fe fc97 	bl	8000550 <__aeabi_dmul>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c2e:	f7fe fc8f 	bl	8000550 <__aeabi_dmul>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c3e:	f7fe fc87 	bl	8000550 <__aeabi_dmul>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4640      	mov	r0, r8
 8001c48:	4649      	mov	r1, r9
 8001c4a:	f7fe fdab 	bl	80007a4 <__aeabi_ddiv>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	e9c7 2306 	strd	r2, r3, [r7, #24]

    *n = (int)(tf/dt);
 8001c56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c5a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001c5e:	f7fe fda1 	bl	80007a4 <__aeabi_ddiv>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7fe ff0b 	bl	8000a84 <__aeabi_d2iz>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	601a      	str	r2, [r3, #0]

    double t = 0;
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    for(int i =0;i < *n ; i++){
 8001c80:	2300      	movs	r3, #0
 8001c82:	667b      	str	r3, [r7, #100]	; 0x64
 8001c84:	e0b8      	b.n	8001df8 <targectory_cal+0x380>
 8001c86:	bf00      	nop
 8001c88:	53f7ced9 	.word	0x53f7ced9
 8001c8c:	403ca5e3 	.word	0x403ca5e3
 8001c90:	404e0000 	.word	0x404e0000
 8001c94:	b60b60b7 	.word	0xb60b60b7
 8001c98:	40240000 	.word	0x40240000
 8001c9c:	c02e0000 	.word	0xc02e0000
 8001ca0:	40180000 	.word	0x40180000
        datas[i] = a1 + 2*a2*t + 3*a3*t*t + 4*a4*t*t*t + 5*a5*t*t*t*t;
 8001ca4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	f7fe fa9a 	bl	80001e4 <__adddf3>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001cbc:	f7fe fc48 	bl	8000550 <__aeabi_dmul>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ccc:	f7fe fa8a 	bl	80001e4 <__adddf3>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4690      	mov	r8, r2
 8001cd6:	4699      	mov	r9, r3
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	4b5a      	ldr	r3, [pc, #360]	; (8001e48 <targectory_cal+0x3d0>)
 8001cde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ce2:	f7fe fc35 	bl	8000550 <__aeabi_dmul>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001cf2:	f7fe fc2d 	bl	8000550 <__aeabi_dmul>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d02:	f7fe fc25 	bl	8000550 <__aeabi_dmul>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4640      	mov	r0, r8
 8001d0c:	4649      	mov	r1, r9
 8001d0e:	f7fe fa69 	bl	80001e4 <__adddf3>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4690      	mov	r8, r2
 8001d18:	4699      	mov	r9, r3
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	4b4b      	ldr	r3, [pc, #300]	; (8001e4c <targectory_cal+0x3d4>)
 8001d20:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d24:	f7fe fc14 	bl	8000550 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d34:	f7fe fc0c 	bl	8000550 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d44:	f7fe fc04 	bl	8000550 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d54:	f7fe fbfc 	bl	8000550 <__aeabi_dmul>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4640      	mov	r0, r8
 8001d5e:	4649      	mov	r1, r9
 8001d60:	f7fe fa40 	bl	80001e4 <__adddf3>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4690      	mov	r8, r2
 8001d6a:	4699      	mov	r9, r3
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	4b37      	ldr	r3, [pc, #220]	; (8001e50 <targectory_cal+0x3d8>)
 8001d72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d76:	f7fe fbeb 	bl	8000550 <__aeabi_dmul>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d86:	f7fe fbe3 	bl	8000550 <__aeabi_dmul>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d96:	f7fe fbdb 	bl	8000550 <__aeabi_dmul>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001da6:	f7fe fbd3 	bl	8000550 <__aeabi_dmul>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001db6:	f7fe fbcb 	bl	8000550 <__aeabi_dmul>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	18d6      	adds	r6, r2, r3
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4640      	mov	r0, r8
 8001dd0:	4649      	mov	r1, r9
 8001dd2:	f7fe fa07 	bl	80001e4 <__adddf3>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	e9c6 2300 	strd	r2, r3, [r6]
        t+=dt;
 8001dde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001de2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001de6:	f7fe f9fd 	bl	80001e4 <__adddf3>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    for(int i =0;i < *n ; i++){
 8001df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001df4:	3301      	adds	r3, #1
 8001df6:	667b      	str	r3, [r7, #100]	; 0x64
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	f6ff af50 	blt.w	8001ca4 <targectory_cal+0x22c>
    }

    if(inverse){
 8001e04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d019      	beq.n	8001e3e <targectory_cal+0x3c6>
        for(int i = 0;i<*n;i++){
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	663b      	str	r3, [r7, #96]	; 0x60
 8001e0e:	e011      	b.n	8001e34 <targectory_cal+0x3bc>
            datas[i] *= -1;
 8001e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	4413      	add	r3, r2
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001e1e:	00c9      	lsls	r1, r1, #3
 8001e20:	6978      	ldr	r0, [r7, #20]
 8001e22:	4401      	add	r1, r0
 8001e24:	4614      	mov	r4, r2
 8001e26:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e2a:	e9c1 4500 	strd	r4, r5, [r1]
        for(int i = 0;i<*n;i++){
 8001e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e30:	3301      	adds	r3, #1
 8001e32:	663b      	str	r3, [r7, #96]	; 0x60
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	dbe8      	blt.n	8001e10 <targectory_cal+0x398>
        }
    }
}
 8001e3e:	bf00      	nop
 8001e40:	377c      	adds	r7, #124	; 0x7c
 8001e42:	46bd      	mov	sp, r7
 8001e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e48:	40080000 	.word	0x40080000
 8001e4c:	40100000 	.word	0x40100000
 8001e50:	40140000 	.word	0x40140000

08001e54 <micros>:





uint64_t micros(){
 8001e54:	b4b0      	push	{r4, r5, r7}
 8001e56:	af00      	add	r7, sp, #0
	return _micro + TIM5->CNT;
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <micros+0x28>)
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f04f 0100 	mov.w	r1, #0
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <micros+0x2c>)
 8001e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e68:	1884      	adds	r4, r0, r2
 8001e6a:	eb41 0503 	adc.w	r5, r1, r3
 8001e6e:	4622      	mov	r2, r4
 8001e70:	462b      	mov	r3, r5
}
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bcb0      	pop	{r4, r5, r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	40000c00 	.word	0x40000c00
 8001e80:	200000a8 	.word	0x200000a8

08001e84 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e84:	b4b0      	push	{r4, r5, r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]

	if(htim == &htim5){
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d109      	bne.n	8001ea8 <HAL_TIM_PeriodElapsedCallback+0x24>
		_micro += ((uint64_t)1<<32)-1;
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	f112 34ff 	adds.w	r4, r2, #4294967295
 8001e9e:	f143 0500 	adc.w	r5, r3, #0
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ea4:	e9c3 4500 	strd	r4, r5, [r3]
	}

}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bcb0      	pop	{r4, r5, r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	200022ac 	.word	0x200022ac
 8001eb8:	200000a8 	.word	0x200000a8

08001ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec0:	b672      	cpsid	i
}
 8001ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <Error_Handler+0x8>
	...

08001ec8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <HAL_MspInit+0x4c>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	4a0f      	ldr	r2, [pc, #60]	; (8001f14 <HAL_MspInit+0x4c>)
 8001ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <HAL_MspInit+0x4c>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <HAL_MspInit+0x4c>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	4a08      	ldr	r2, [pc, #32]	; (8001f14 <HAL_MspInit+0x4c>)
 8001ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_MspInit+0x4c>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f06:	2007      	movs	r0, #7
 8001f08:	f000 fac4 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40023800 	.word	0x40023800

08001f18 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	; 0x28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <HAL_TIM_Encoder_MspInit+0x84>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d12c      	bne.n	8001f94 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	4a17      	ldr	r2, [pc, #92]	; (8001fa0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a10      	ldr	r2, [pc, #64]	; (8001fa0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f84:	2301      	movs	r3, #1
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4805      	ldr	r0, [pc, #20]	; (8001fa4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001f90:	f000 fac2 	bl	8002518 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f94:	bf00      	nop
 8001f96:	3728      	adds	r7, #40	; 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020000 	.word	0x40020000

08001fa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a18      	ldr	r2, [pc, #96]	; (8002018 <HAL_TIM_Base_MspInit+0x70>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d10e      	bne.n	8001fd8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <HAL_TIM_Base_MspInit+0x74>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	4a16      	ldr	r2, [pc, #88]	; (800201c <HAL_TIM_Base_MspInit+0x74>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fca:	4b14      	ldr	r3, [pc, #80]	; (800201c <HAL_TIM_Base_MspInit+0x74>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001fd6:	e01a      	b.n	800200e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a10      	ldr	r2, [pc, #64]	; (8002020 <HAL_TIM_Base_MspInit+0x78>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d115      	bne.n	800200e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_TIM_Base_MspInit+0x74>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	4a0c      	ldr	r2, [pc, #48]	; (800201c <HAL_TIM_Base_MspInit+0x74>)
 8001fec:	f043 0308 	orr.w	r3, r3, #8
 8001ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <HAL_TIM_Base_MspInit+0x74>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	2032      	movs	r0, #50	; 0x32
 8002004:	f000 fa51 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002008:	2032      	movs	r0, #50	; 0x32
 800200a:	f000 fa6a 	bl	80024e2 <HAL_NVIC_EnableIRQ>
}
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40000400 	.word	0x40000400
 800201c:	40023800 	.word	0x40023800
 8002020:	40000c00 	.word	0x40000c00

08002024 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a12      	ldr	r2, [pc, #72]	; (800208c <HAL_TIM_MspPostInit+0x68>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d11d      	bne.n	8002082 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_TIM_MspPostInit+0x6c>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <HAL_TIM_MspPostInit+0x6c>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_TIM_MspPostInit+0x6c>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002062:	23c0      	movs	r3, #192	; 0xc0
 8002064:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002072:	2302      	movs	r3, #2
 8002074:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002076:	f107 030c 	add.w	r3, r7, #12
 800207a:	4619      	mov	r1, r3
 800207c:	4805      	ldr	r0, [pc, #20]	; (8002094 <HAL_TIM_MspPostInit+0x70>)
 800207e:	f000 fa4b 	bl	8002518 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002082:	bf00      	nop
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40000400 	.word	0x40000400
 8002090:	40023800 	.word	0x40023800
 8002094:	40020000 	.word	0x40020000

08002098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a19      	ldr	r2, [pc, #100]	; (800211c <HAL_UART_MspInit+0x84>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d12b      	bne.n	8002112 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_UART_MspInit+0x88>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4a17      	ldr	r2, [pc, #92]	; (8002120 <HAL_UART_MspInit+0x88>)
 80020c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_UART_MspInit+0x88>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_UART_MspInit+0x88>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a10      	ldr	r2, [pc, #64]	; (8002120 <HAL_UART_MspInit+0x88>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <HAL_UART_MspInit+0x88>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020f2:	230c      	movs	r3, #12
 80020f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fe:	2303      	movs	r3, #3
 8002100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002102:	2307      	movs	r3, #7
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002106:	f107 0314 	add.w	r3, r7, #20
 800210a:	4619      	mov	r1, r3
 800210c:	4805      	ldr	r0, [pc, #20]	; (8002124 <HAL_UART_MspInit+0x8c>)
 800210e:	f000 fa03 	bl	8002518 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002112:	bf00      	nop
 8002114:	3728      	adds	r7, #40	; 0x28
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40004400 	.word	0x40004400
 8002120:	40023800 	.word	0x40023800
 8002124:	40020000 	.word	0x40020000

08002128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800212c:	e7fe      	b.n	800212c <NMI_Handler+0x4>

0800212e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002132:	e7fe      	b.n	8002132 <HardFault_Handler+0x4>

08002134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <MemManage_Handler+0x4>

0800213a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213e:	e7fe      	b.n	800213e <BusFault_Handler+0x4>

08002140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <UsageFault_Handler+0x4>

08002146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002174:	f000 f89e 	bl	80022b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}

0800217c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <TIM5_IRQHandler+0x10>)
 8002182:	f001 f977 	bl	8003474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200022ac 	.word	0x200022ac

08002190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <SystemInit+0x28>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <SystemInit+0x28>)
 800219c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <SystemInit+0x28>)
 80021a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021aa:	609a      	str	r2, [r3, #8]
#endif
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021c2:	e003      	b.n	80021cc <LoopCopyDataInit>

080021c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021ca:	3104      	adds	r1, #4

080021cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021cc:	480b      	ldr	r0, [pc, #44]	; (80021fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021ce:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021d4:	d3f6      	bcc.n	80021c4 <CopyDataInit>
  ldr  r2, =_sbss
 80021d6:	4a0b      	ldr	r2, [pc, #44]	; (8002204 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80021d8:	e002      	b.n	80021e0 <LoopFillZerobss>

080021da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80021da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80021dc:	f842 3b04 	str.w	r3, [r2], #4

080021e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80021e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021e4:	d3f9      	bcc.n	80021da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021e6:	f7ff ffd3 	bl	8002190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ea:	f002 fb35 	bl	8004858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ee:	f7fe fe0f 	bl	8000e10 <main>
  bx  lr    
 80021f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80021f8:	080048f0 	.word	0x080048f0
  ldr  r0, =_sdata
 80021fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002200:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8002204:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8002208:	200023b0 	.word	0x200023b0

0800220c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800220c:	e7fe      	b.n	800220c <ADC_IRQHandler>
	...

08002210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002214:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <HAL_Init+0x40>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0d      	ldr	r2, [pc, #52]	; (8002250 <HAL_Init+0x40>)
 800221a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800221e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_Init+0x40>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <HAL_Init+0x40>)
 8002226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800222a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_Init+0x40>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a07      	ldr	r2, [pc, #28]	; (8002250 <HAL_Init+0x40>)
 8002232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002238:	2003      	movs	r0, #3
 800223a:	f000 f92b 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800223e:	2000      	movs	r0, #0
 8002240:	f000 f808 	bl	8002254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002244:	f7ff fe40 	bl	8001ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40023c00 	.word	0x40023c00

08002254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_InitTick+0x54>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_InitTick+0x58>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	4619      	mov	r1, r3
 8002266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800226a:	fbb3 f3f1 	udiv	r3, r3, r1
 800226e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f943 	bl	80024fe <HAL_SYSTICK_Config>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e00e      	b.n	80022a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b0f      	cmp	r3, #15
 8002286:	d80a      	bhi.n	800229e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002288:	2200      	movs	r2, #0
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	f04f 30ff 	mov.w	r0, #4294967295
 8002290:	f000 f90b 	bl	80024aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002294:	4a06      	ldr	r2, [pc, #24]	; (80022b0 <HAL_InitTick+0x5c>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	e000      	b.n	80022a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000078 	.word	0x20000078
 80022ac:	20000080 	.word	0x20000080
 80022b0:	2000007c 	.word	0x2000007c

080022b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_IncTick+0x20>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_IncTick+0x24>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <HAL_IncTick+0x24>)
 80022c6:	6013      	str	r3, [r2, #0]
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000080 	.word	0x20000080
 80022d8:	200023ac 	.word	0x200023ac

080022dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return uwTick;
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <HAL_GetTick+0x14>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	200023ac 	.word	0x200023ac

080022f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800231c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002326:	4a04      	ldr	r2, [pc, #16]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	60d3      	str	r3, [r2, #12]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <__NVIC_GetPriorityGrouping+0x18>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 0307 	and.w	r3, r3, #7
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	2b00      	cmp	r3, #0
 8002368:	db0b      	blt.n	8002382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4907      	ldr	r1, [pc, #28]	; (8002390 <__NVIC_EnableIRQ+0x38>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2001      	movs	r0, #1
 800237a:	fa00 f202 	lsl.w	r2, r0, r2
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db0a      	blt.n	80023be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	490c      	ldr	r1, [pc, #48]	; (80023e0 <__NVIC_SetPriority+0x4c>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023bc:	e00a      	b.n	80023d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4908      	ldr	r1, [pc, #32]	; (80023e4 <__NVIC_SetPriority+0x50>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	761a      	strb	r2, [r3, #24]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f1c3 0307 	rsb	r3, r3, #7
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf28      	it	cs
 8002406:	2304      	movcs	r3, #4
 8002408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3304      	adds	r3, #4
 800240e:	2b06      	cmp	r3, #6
 8002410:	d902      	bls.n	8002418 <NVIC_EncodePriority+0x30>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b03      	subs	r3, #3
 8002416:	e000      	b.n	800241a <NVIC_EncodePriority+0x32>
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	f04f 32ff 	mov.w	r2, #4294967295
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
         );
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002460:	d301      	bcc.n	8002466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002462:	2301      	movs	r3, #1
 8002464:	e00f      	b.n	8002486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <SysTick_Config+0x40>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246e:	210f      	movs	r1, #15
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	f7ff ff8e 	bl	8002394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <SysTick_Config+0x40>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <SysTick_Config+0x40>)
 8002480:	2207      	movs	r2, #7
 8002482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	e000e010 	.word	0xe000e010

08002494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ff29 	bl	80022f4 <__NVIC_SetPriorityGrouping>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024bc:	f7ff ff3e 	bl	800233c <__NVIC_GetPriorityGrouping>
 80024c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	6978      	ldr	r0, [r7, #20]
 80024c8:	f7ff ff8e 	bl	80023e8 <NVIC_EncodePriority>
 80024cc:	4602      	mov	r2, r0
 80024ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff5d 	bl	8002394 <__NVIC_SetPriority>
}
 80024da:	bf00      	nop
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff31 	bl	8002358 <__NVIC_EnableIRQ>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffa2 	bl	8002450 <SysTick_Config>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	e159      	b.n	80027e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002534:	2201      	movs	r2, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	429a      	cmp	r2, r3
 800254e:	f040 8148 	bne.w	80027e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d00b      	beq.n	8002572 <HAL_GPIO_Init+0x5a>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d007      	beq.n	8002572 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002566:	2b11      	cmp	r3, #17
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b12      	cmp	r3, #18
 8002570:	d130      	bne.n	80025d4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	2203      	movs	r2, #3
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a8:	2201      	movs	r2, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 0201 	and.w	r2, r3, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	2203      	movs	r2, #3
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0xfc>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b12      	cmp	r3, #18
 8002612:	d123      	bne.n	800265c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	08da      	lsrs	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3208      	adds	r2, #8
 800261c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	220f      	movs	r2, #15
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	08da      	lsrs	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3208      	adds	r2, #8
 8002656:	69b9      	ldr	r1, [r7, #24]
 8002658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	2203      	movs	r2, #3
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0203 	and.w	r2, r3, #3
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80a2 	beq.w	80027e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b57      	ldr	r3, [pc, #348]	; (8002800 <HAL_GPIO_Init+0x2e8>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	4a56      	ldr	r2, [pc, #344]	; (8002800 <HAL_GPIO_Init+0x2e8>)
 80026a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ac:	6453      	str	r3, [r2, #68]	; 0x44
 80026ae:	4b54      	ldr	r3, [pc, #336]	; (8002800 <HAL_GPIO_Init+0x2e8>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ba:	4a52      	ldr	r2, [pc, #328]	; (8002804 <HAL_GPIO_Init+0x2ec>)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a49      	ldr	r2, [pc, #292]	; (8002808 <HAL_GPIO_Init+0x2f0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d019      	beq.n	800271a <HAL_GPIO_Init+0x202>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a48      	ldr	r2, [pc, #288]	; (800280c <HAL_GPIO_Init+0x2f4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d013      	beq.n	8002716 <HAL_GPIO_Init+0x1fe>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a47      	ldr	r2, [pc, #284]	; (8002810 <HAL_GPIO_Init+0x2f8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00d      	beq.n	8002712 <HAL_GPIO_Init+0x1fa>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a46      	ldr	r2, [pc, #280]	; (8002814 <HAL_GPIO_Init+0x2fc>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d007      	beq.n	800270e <HAL_GPIO_Init+0x1f6>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a45      	ldr	r2, [pc, #276]	; (8002818 <HAL_GPIO_Init+0x300>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d101      	bne.n	800270a <HAL_GPIO_Init+0x1f2>
 8002706:	2304      	movs	r3, #4
 8002708:	e008      	b.n	800271c <HAL_GPIO_Init+0x204>
 800270a:	2307      	movs	r3, #7
 800270c:	e006      	b.n	800271c <HAL_GPIO_Init+0x204>
 800270e:	2303      	movs	r3, #3
 8002710:	e004      	b.n	800271c <HAL_GPIO_Init+0x204>
 8002712:	2302      	movs	r3, #2
 8002714:	e002      	b.n	800271c <HAL_GPIO_Init+0x204>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <HAL_GPIO_Init+0x204>
 800271a:	2300      	movs	r3, #0
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	f002 0203 	and.w	r2, r2, #3
 8002722:	0092      	lsls	r2, r2, #2
 8002724:	4093      	lsls	r3, r2
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800272c:	4935      	ldr	r1, [pc, #212]	; (8002804 <HAL_GPIO_Init+0x2ec>)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	089b      	lsrs	r3, r3, #2
 8002732:	3302      	adds	r3, #2
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800273a:	4b38      	ldr	r3, [pc, #224]	; (800281c <HAL_GPIO_Init+0x304>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800275e:	4a2f      	ldr	r2, [pc, #188]	; (800281c <HAL_GPIO_Init+0x304>)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002764:	4b2d      	ldr	r3, [pc, #180]	; (800281c <HAL_GPIO_Init+0x304>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002788:	4a24      	ldr	r2, [pc, #144]	; (800281c <HAL_GPIO_Init+0x304>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800278e:	4b23      	ldr	r3, [pc, #140]	; (800281c <HAL_GPIO_Init+0x304>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027b2:	4a1a      	ldr	r2, [pc, #104]	; (800281c <HAL_GPIO_Init+0x304>)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027b8:	4b18      	ldr	r3, [pc, #96]	; (800281c <HAL_GPIO_Init+0x304>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027dc:	4a0f      	ldr	r2, [pc, #60]	; (800281c <HAL_GPIO_Init+0x304>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3301      	adds	r3, #1
 80027e6:	61fb      	str	r3, [r7, #28]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b0f      	cmp	r3, #15
 80027ec:	f67f aea2 	bls.w	8002534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3724      	adds	r7, #36	; 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800
 8002804:	40013800 	.word	0x40013800
 8002808:	40020000 	.word	0x40020000
 800280c:	40020400 	.word	0x40020400
 8002810:	40020800 	.word	0x40020800
 8002814:	40020c00 	.word	0x40020c00
 8002818:	40021000 	.word	0x40021000
 800281c:	40013c00 	.word	0x40013c00

08002820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
 800282c:	4613      	mov	r3, r2
 800282e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002830:	787b      	ldrb	r3, [r7, #1]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002836:	887a      	ldrh	r2, [r7, #2]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800283c:	e003      	b.n	8002846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800283e:	887b      	ldrh	r3, [r7, #2]
 8002840:	041a      	lsls	r2, r3, #16
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	619a      	str	r2, [r3, #24]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e25b      	b.n	8002d1e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d075      	beq.n	800295e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002872:	4ba3      	ldr	r3, [pc, #652]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b04      	cmp	r3, #4
 800287c:	d00c      	beq.n	8002898 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287e:	4ba0      	ldr	r3, [pc, #640]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002886:	2b08      	cmp	r3, #8
 8002888:	d112      	bne.n	80028b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800288a:	4b9d      	ldr	r3, [pc, #628]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002896:	d10b      	bne.n	80028b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002898:	4b99      	ldr	r3, [pc, #612]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d05b      	beq.n	800295c <HAL_RCC_OscConfig+0x108>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d157      	bne.n	800295c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e236      	b.n	8002d1e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b8:	d106      	bne.n	80028c8 <HAL_RCC_OscConfig+0x74>
 80028ba:	4b91      	ldr	r3, [pc, #580]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a90      	ldr	r2, [pc, #576]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e01d      	b.n	8002904 <HAL_RCC_OscConfig+0xb0>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0x98>
 80028d2:	4b8b      	ldr	r3, [pc, #556]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a8a      	ldr	r2, [pc, #552]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	4b88      	ldr	r3, [pc, #544]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a87      	ldr	r2, [pc, #540]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e00b      	b.n	8002904 <HAL_RCC_OscConfig+0xb0>
 80028ec:	4b84      	ldr	r3, [pc, #528]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a83      	ldr	r2, [pc, #524]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	4b81      	ldr	r3, [pc, #516]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a80      	ldr	r2, [pc, #512]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d013      	beq.n	8002934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7ff fce6 	bl	80022dc <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002914:	f7ff fce2 	bl	80022dc <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e1fb      	b.n	8002d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	4b76      	ldr	r3, [pc, #472]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0xc0>
 8002932:	e014      	b.n	800295e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7ff fcd2 	bl	80022dc <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800293c:	f7ff fcce 	bl	80022dc <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e1e7      	b.n	8002d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	4b6c      	ldr	r3, [pc, #432]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0xe8>
 800295a:	e000      	b.n	800295e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d063      	beq.n	8002a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800296a:	4b65      	ldr	r3, [pc, #404]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002976:	4b62      	ldr	r3, [pc, #392]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800297e:	2b08      	cmp	r3, #8
 8002980:	d11c      	bne.n	80029bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002982:	4b5f      	ldr	r3, [pc, #380]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d116      	bne.n	80029bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298e:	4b5c      	ldr	r3, [pc, #368]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d005      	beq.n	80029a6 <HAL_RCC_OscConfig+0x152>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d001      	beq.n	80029a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e1bb      	b.n	8002d1e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a6:	4b56      	ldr	r3, [pc, #344]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4952      	ldr	r1, [pc, #328]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ba:	e03a      	b.n	8002a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d020      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c4:	4b4f      	ldr	r3, [pc, #316]	; (8002b04 <HAL_RCC_OscConfig+0x2b0>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7ff fc87 	bl	80022dc <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d2:	f7ff fc83 	bl	80022dc <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e19c      	b.n	8002d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	4b46      	ldr	r3, [pc, #280]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f0:	4b43      	ldr	r3, [pc, #268]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4940      	ldr	r1, [pc, #256]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	600b      	str	r3, [r1, #0]
 8002a04:	e015      	b.n	8002a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a06:	4b3f      	ldr	r3, [pc, #252]	; (8002b04 <HAL_RCC_OscConfig+0x2b0>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7ff fc66 	bl	80022dc <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a14:	f7ff fc62 	bl	80022dc <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e17b      	b.n	8002d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d030      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d016      	beq.n	8002a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a46:	4b30      	ldr	r3, [pc, #192]	; (8002b08 <HAL_RCC_OscConfig+0x2b4>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7ff fc46 	bl	80022dc <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a54:	f7ff fc42 	bl	80022dc <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e15b      	b.n	8002d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a66:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0x200>
 8002a72:	e015      	b.n	8002aa0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a74:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <HAL_RCC_OscConfig+0x2b4>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7a:	f7ff fc2f 	bl	80022dc <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a82:	f7ff fc2b 	bl	80022dc <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e144      	b.n	8002d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f0      	bne.n	8002a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80a0 	beq.w	8002bee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab2:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10f      	bne.n	8002ade <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	4a0e      	ldr	r2, [pc, #56]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002acc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ace:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_RCC_OscConfig+0x2b8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d121      	bne.n	8002b2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <HAL_RCC_OscConfig+0x2b8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a07      	ldr	r2, [pc, #28]	; (8002b0c <HAL_RCC_OscConfig+0x2b8>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af6:	f7ff fbf1 	bl	80022dc <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	e011      	b.n	8002b22 <HAL_RCC_OscConfig+0x2ce>
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	42470000 	.word	0x42470000
 8002b08:	42470e80 	.word	0x42470e80
 8002b0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b10:	f7ff fbe4 	bl	80022dc <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e0fd      	b.n	8002d1e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b22:	4b81      	ldr	r3, [pc, #516]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d106      	bne.n	8002b44 <HAL_RCC_OscConfig+0x2f0>
 8002b36:	4b7d      	ldr	r3, [pc, #500]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	4a7c      	ldr	r2, [pc, #496]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6713      	str	r3, [r2, #112]	; 0x70
 8002b42:	e01c      	b.n	8002b7e <HAL_RCC_OscConfig+0x32a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b05      	cmp	r3, #5
 8002b4a:	d10c      	bne.n	8002b66 <HAL_RCC_OscConfig+0x312>
 8002b4c:	4b77      	ldr	r3, [pc, #476]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	4a76      	ldr	r2, [pc, #472]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002b52:	f043 0304 	orr.w	r3, r3, #4
 8002b56:	6713      	str	r3, [r2, #112]	; 0x70
 8002b58:	4b74      	ldr	r3, [pc, #464]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	4a73      	ldr	r2, [pc, #460]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6713      	str	r3, [r2, #112]	; 0x70
 8002b64:	e00b      	b.n	8002b7e <HAL_RCC_OscConfig+0x32a>
 8002b66:	4b71      	ldr	r3, [pc, #452]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a70      	ldr	r2, [pc, #448]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
 8002b72:	4b6e      	ldr	r3, [pc, #440]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	4a6d      	ldr	r2, [pc, #436]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002b78:	f023 0304 	bic.w	r3, r3, #4
 8002b7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d015      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7ff fba9 	bl	80022dc <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8e:	f7ff fba5 	bl	80022dc <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e0bc      	b.n	8002d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba4:	4b61      	ldr	r3, [pc, #388]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0ee      	beq.n	8002b8e <HAL_RCC_OscConfig+0x33a>
 8002bb0:	e014      	b.n	8002bdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb2:	f7ff fb93 	bl	80022dc <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7ff fb8f 	bl	80022dc <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e0a6      	b.n	8002d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd0:	4b56      	ldr	r3, [pc, #344]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1ee      	bne.n	8002bba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d105      	bne.n	8002bee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be2:	4b52      	ldr	r3, [pc, #328]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	4a51      	ldr	r2, [pc, #324]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 8092 	beq.w	8002d1c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bf8:	4b4c      	ldr	r3, [pc, #304]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d05c      	beq.n	8002cbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d141      	bne.n	8002c90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0c:	4b48      	ldr	r3, [pc, #288]	; (8002d30 <HAL_RCC_OscConfig+0x4dc>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7ff fb63 	bl	80022dc <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1a:	f7ff fb5f 	bl	80022dc <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e078      	b.n	8002d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2c:	4b3f      	ldr	r3, [pc, #252]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1f0      	bne.n	8002c1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	019b      	lsls	r3, r3, #6
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	3b01      	subs	r3, #1
 8002c52:	041b      	lsls	r3, r3, #16
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	061b      	lsls	r3, r3, #24
 8002c5c:	4933      	ldr	r1, [pc, #204]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c62:	4b33      	ldr	r3, [pc, #204]	; (8002d30 <HAL_RCC_OscConfig+0x4dc>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7ff fb38 	bl	80022dc <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c70:	f7ff fb34 	bl	80022dc <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e04d      	b.n	8002d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c82:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0x41c>
 8002c8e:	e045      	b.n	8002d1c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c90:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <HAL_RCC_OscConfig+0x4dc>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c96:	f7ff fb21 	bl	80022dc <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7ff fb1d 	bl	80022dc <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e036      	b.n	8002d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb0:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f0      	bne.n	8002c9e <HAL_RCC_OscConfig+0x44a>
 8002cbc:	e02e      	b.n	8002d1c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e029      	b.n	8002d1e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cca:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d11c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d115      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d10d      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d106      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40007000 	.word	0x40007000
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	42470060 	.word	0x42470060

08002d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0cc      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d48:	4b68      	ldr	r3, [pc, #416]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d90c      	bls.n	8002d70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d56:	4b65      	ldr	r3, [pc, #404]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5e:	4b63      	ldr	r3, [pc, #396]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0b8      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d020      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d88:	4b59      	ldr	r3, [pc, #356]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4a58      	ldr	r2, [pc, #352]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da0:	4b53      	ldr	r3, [pc, #332]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4a52      	ldr	r2, [pc, #328]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002daa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dac:	4b50      	ldr	r3, [pc, #320]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	494d      	ldr	r1, [pc, #308]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d044      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d107      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd2:	4b47      	ldr	r3, [pc, #284]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d119      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e07f      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d003      	beq.n	8002df2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d107      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df2:	4b3f      	ldr	r3, [pc, #252]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e06f      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e02:	4b3b      	ldr	r3, [pc, #236]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e067      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e12:	4b37      	ldr	r3, [pc, #220]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f023 0203 	bic.w	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4934      	ldr	r1, [pc, #208]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e24:	f7ff fa5a 	bl	80022dc <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2c:	f7ff fa56 	bl	80022dc <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e04f      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	4b2b      	ldr	r3, [pc, #172]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 020c 	and.w	r2, r3, #12
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d1eb      	bne.n	8002e2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e54:	4b25      	ldr	r3, [pc, #148]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d20c      	bcs.n	8002e7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b22      	ldr	r3, [pc, #136]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6a:	4b20      	ldr	r3, [pc, #128]	; (8002eec <HAL_RCC_ClockConfig+0x1b8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d001      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e032      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e88:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4916      	ldr	r1, [pc, #88]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ea6:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	490e      	ldr	r1, [pc, #56]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eba:	f000 f821 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	490a      	ldr	r1, [pc, #40]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	5ccb      	ldrb	r3, [r1, r3]
 8002ece:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed2:	4a09      	ldr	r2, [pc, #36]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <HAL_RCC_ClockConfig+0x1c8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff f9ba 	bl	8002254 <HAL_InitTick>

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40023c00 	.word	0x40023c00
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	080048c8 	.word	0x080048c8
 8002ef8:	20000078 	.word	0x20000078
 8002efc:	2000007c 	.word	0x2000007c

08002f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	2300      	movs	r3, #0
 8002f12:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f18:	4b67      	ldr	r3, [pc, #412]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d00d      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x40>
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	f200 80bd 	bhi.w	80030a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_RCC_GetSysClockFreq+0x34>
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d003      	beq.n	8002f3a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f32:	e0b7      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f34:	4b61      	ldr	r3, [pc, #388]	; (80030bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f36:	60bb      	str	r3, [r7, #8]
       break;
 8002f38:	e0b7      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f3a:	4b61      	ldr	r3, [pc, #388]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002f3c:	60bb      	str	r3, [r7, #8]
      break;
 8002f3e:	e0b4      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f40:	4b5d      	ldr	r3, [pc, #372]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f4a:	4b5b      	ldr	r3, [pc, #364]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d04d      	beq.n	8002ff2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f56:	4b58      	ldr	r3, [pc, #352]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	099b      	lsrs	r3, r3, #6
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f66:	f04f 0100 	mov.w	r1, #0
 8002f6a:	ea02 0800 	and.w	r8, r2, r0
 8002f6e:	ea03 0901 	and.w	r9, r3, r1
 8002f72:	4640      	mov	r0, r8
 8002f74:	4649      	mov	r1, r9
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	014b      	lsls	r3, r1, #5
 8002f80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f84:	0142      	lsls	r2, r0, #5
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	ebb0 0008 	subs.w	r0, r0, r8
 8002f8e:	eb61 0109 	sbc.w	r1, r1, r9
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	018b      	lsls	r3, r1, #6
 8002f9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fa0:	0182      	lsls	r2, r0, #6
 8002fa2:	1a12      	subs	r2, r2, r0
 8002fa4:	eb63 0301 	sbc.w	r3, r3, r1
 8002fa8:	f04f 0000 	mov.w	r0, #0
 8002fac:	f04f 0100 	mov.w	r1, #0
 8002fb0:	00d9      	lsls	r1, r3, #3
 8002fb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fb6:	00d0      	lsls	r0, r2, #3
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	eb12 0208 	adds.w	r2, r2, r8
 8002fc0:	eb43 0309 	adc.w	r3, r3, r9
 8002fc4:	f04f 0000 	mov.w	r0, #0
 8002fc8:	f04f 0100 	mov.w	r1, #0
 8002fcc:	0259      	lsls	r1, r3, #9
 8002fce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002fd2:	0250      	lsls	r0, r2, #9
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4619      	mov	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	f7fd fd96 	bl	8000b14 <__aeabi_uldivmod>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4613      	mov	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	e04a      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff2:	4b31      	ldr	r3, [pc, #196]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	099b      	lsrs	r3, r3, #6
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003002:	f04f 0100 	mov.w	r1, #0
 8003006:	ea02 0400 	and.w	r4, r2, r0
 800300a:	ea03 0501 	and.w	r5, r3, r1
 800300e:	4620      	mov	r0, r4
 8003010:	4629      	mov	r1, r5
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	014b      	lsls	r3, r1, #5
 800301c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003020:	0142      	lsls	r2, r0, #5
 8003022:	4610      	mov	r0, r2
 8003024:	4619      	mov	r1, r3
 8003026:	1b00      	subs	r0, r0, r4
 8003028:	eb61 0105 	sbc.w	r1, r1, r5
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	018b      	lsls	r3, r1, #6
 8003036:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800303a:	0182      	lsls	r2, r0, #6
 800303c:	1a12      	subs	r2, r2, r0
 800303e:	eb63 0301 	sbc.w	r3, r3, r1
 8003042:	f04f 0000 	mov.w	r0, #0
 8003046:	f04f 0100 	mov.w	r1, #0
 800304a:	00d9      	lsls	r1, r3, #3
 800304c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003050:	00d0      	lsls	r0, r2, #3
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	1912      	adds	r2, r2, r4
 8003058:	eb45 0303 	adc.w	r3, r5, r3
 800305c:	f04f 0000 	mov.w	r0, #0
 8003060:	f04f 0100 	mov.w	r1, #0
 8003064:	0299      	lsls	r1, r3, #10
 8003066:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800306a:	0290      	lsls	r0, r2, #10
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	461a      	mov	r2, r3
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	f7fd fd4a 	bl	8000b14 <__aeabi_uldivmod>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4613      	mov	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	0c1b      	lsrs	r3, r3, #16
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	3301      	adds	r3, #1
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a0:	60bb      	str	r3, [r7, #8]
      break;
 80030a2:	e002      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030a6:	60bb      	str	r3, [r7, #8]
      break;
 80030a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030aa:	68bb      	ldr	r3, [r7, #8]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800
 80030bc:	00f42400 	.word	0x00f42400
 80030c0:	007a1200 	.word	0x007a1200

080030c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000078 	.word	0x20000078

080030dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030e0:	f7ff fff0 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	0a9b      	lsrs	r3, r3, #10
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	4903      	ldr	r1, [pc, #12]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40023800 	.word	0x40023800
 8003100:	080048d8 	.word	0x080048d8

08003104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003108:	f7ff ffdc 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	0b5b      	lsrs	r3, r3, #13
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4903      	ldr	r1, [pc, #12]	; (8003128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40023800 	.word	0x40023800
 8003128:	080048d8 	.word	0x080048d8

0800312c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e01d      	b.n	800317a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fe ff28 	bl	8001fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3304      	adds	r3, #4
 8003168:	4619      	mov	r1, r3
 800316a:	4610      	mov	r0, r2
 800316c:	f000 fc3c 	bl	80039e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003182:	b480      	push	{r7}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2202      	movs	r2, #2
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2b06      	cmp	r3, #6
 80031a2:	d007      	beq.n	80031b4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b085      	sub	sp, #20
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b06      	cmp	r3, #6
 80031f2:	d007      	beq.n	8003204 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e01d      	b.n	8003260 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d106      	bne.n	800323e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f815 	bl	8003268 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3304      	adds	r3, #4
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f000 fbc9 	bl	80039e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2201      	movs	r2, #1
 800328c:	6839      	ldr	r1, [r7, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fe50 	bl	8003f34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a10      	ldr	r2, [pc, #64]	; (80032dc <HAL_TIM_PWM_Start+0x60>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d107      	bne.n	80032ae <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b06      	cmp	r3, #6
 80032be:	d007      	beq.n	80032d0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40010000 	.word	0x40010000

080032e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e083      	b.n	80033fc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d106      	bne.n	800330e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7fe fe05 	bl	8001f18 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003324:	f023 0307 	bic.w	r3, r3, #7
 8003328:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3304      	adds	r3, #4
 8003332:	4619      	mov	r1, r3
 8003334:	4610      	mov	r0, r2
 8003336:	f000 fb57 	bl	80039e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003362:	f023 0303 	bic.w	r3, r3, #3
 8003366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	4313      	orrs	r3, r2
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003380:	f023 030c 	bic.w	r3, r3, #12
 8003384:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800338c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003390:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	4313      	orrs	r3, r2
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	011a      	lsls	r2, r3, #4
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	031b      	lsls	r3, r3, #12
 80033b0:	4313      	orrs	r3, r2
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80033c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	4313      	orrs	r3, r2
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_TIM_Encoder_Start+0x18>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b04      	cmp	r3, #4
 8003418:	d008      	beq.n	800342c <HAL_TIM_Encoder_Start+0x28>
 800341a:	e00f      	b.n	800343c <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2201      	movs	r2, #1
 8003422:	2100      	movs	r1, #0
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fd85 	bl	8003f34 <TIM_CCxChannelCmd>
      break;
 800342a:	e016      	b.n	800345a <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2201      	movs	r2, #1
 8003432:	2104      	movs	r1, #4
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fd7d 	bl	8003f34 <TIM_CCxChannelCmd>
      break;
 800343a:	e00e      	b.n	800345a <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2201      	movs	r2, #1
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fd75 	bl	8003f34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2201      	movs	r2, #1
 8003450:	2104      	movs	r1, #4
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fd6e 	bl	8003f34 <TIM_CCxChannelCmd>
      break;
 8003458:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0201 	orr.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b02      	cmp	r3, #2
 8003488:	d122      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b02      	cmp	r3, #2
 8003496:	d11b      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0202 	mvn.w	r2, #2
 80034a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fa78 	bl	80039ac <HAL_TIM_IC_CaptureCallback>
 80034bc:	e005      	b.n	80034ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fa6a 	bl	8003998 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fa7b 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d122      	bne.n	8003524 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d11b      	bne.n	8003524 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0204 	mvn.w	r2, #4
 80034f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2202      	movs	r2, #2
 80034fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fa4e 	bl	80039ac <HAL_TIM_IC_CaptureCallback>
 8003510:	e005      	b.n	800351e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa40 	bl	8003998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fa51 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b08      	cmp	r3, #8
 8003530:	d122      	bne.n	8003578 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b08      	cmp	r3, #8
 800353e:	d11b      	bne.n	8003578 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0208 	mvn.w	r2, #8
 8003548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2204      	movs	r2, #4
 800354e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fa24 	bl	80039ac <HAL_TIM_IC_CaptureCallback>
 8003564:	e005      	b.n	8003572 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fa16 	bl	8003998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fa27 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f003 0310 	and.w	r3, r3, #16
 8003582:	2b10      	cmp	r3, #16
 8003584:	d122      	bne.n	80035cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b10      	cmp	r3, #16
 8003592:	d11b      	bne.n	80035cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f06f 0210 	mvn.w	r2, #16
 800359c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2208      	movs	r2, #8
 80035a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f9fa 	bl	80039ac <HAL_TIM_IC_CaptureCallback>
 80035b8:	e005      	b.n	80035c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f9ec 	bl	8003998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f9fd 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d10e      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d107      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0201 	mvn.w	r2, #1
 80035f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fe fc46 	bl	8001e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b80      	cmp	r3, #128	; 0x80
 8003604:	d10e      	bne.n	8003624 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003610:	2b80      	cmp	r3, #128	; 0x80
 8003612:	d107      	bne.n	8003624 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800361c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fd26 	bl	8004070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	2b40      	cmp	r3, #64	; 0x40
 8003630:	d10e      	bne.n	8003650 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363c:	2b40      	cmp	r3, #64	; 0x40
 800363e:	d107      	bne.n	8003650 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f9c2 	bl	80039d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b20      	cmp	r3, #32
 800365c:	d10e      	bne.n	800367c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b20      	cmp	r3, #32
 800366a:	d107      	bne.n	800367c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f06f 0220 	mvn.w	r2, #32
 8003674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fcf0 	bl	800405c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800367c:	bf00      	nop
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800369a:	2302      	movs	r3, #2
 800369c:	e0b4      	b.n	8003808 <HAL_TIM_PWM_ConfigChannel+0x184>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2202      	movs	r2, #2
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b0c      	cmp	r3, #12
 80036b2:	f200 809f 	bhi.w	80037f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80036b6:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80036b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036bc:	080036f1 	.word	0x080036f1
 80036c0:	080037f5 	.word	0x080037f5
 80036c4:	080037f5 	.word	0x080037f5
 80036c8:	080037f5 	.word	0x080037f5
 80036cc:	08003731 	.word	0x08003731
 80036d0:	080037f5 	.word	0x080037f5
 80036d4:	080037f5 	.word	0x080037f5
 80036d8:	080037f5 	.word	0x080037f5
 80036dc:	08003773 	.word	0x08003773
 80036e0:	080037f5 	.word	0x080037f5
 80036e4:	080037f5 	.word	0x080037f5
 80036e8:	080037f5 	.word	0x080037f5
 80036ec:	080037b3 	.word	0x080037b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f9f6 	bl	8003ae8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0208 	orr.w	r2, r2, #8
 800370a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0204 	bic.w	r2, r2, #4
 800371a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6999      	ldr	r1, [r3, #24]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	691a      	ldr	r2, [r3, #16]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	619a      	str	r2, [r3, #24]
      break;
 800372e:	e062      	b.n	80037f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fa3c 	bl	8003bb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800374a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699a      	ldr	r2, [r3, #24]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800375a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6999      	ldr	r1, [r3, #24]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	021a      	lsls	r2, r3, #8
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	619a      	str	r2, [r3, #24]
      break;
 8003770:	e041      	b.n	80037f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fa87 	bl	8003c8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 0208 	orr.w	r2, r2, #8
 800378c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0204 	bic.w	r2, r2, #4
 800379c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69d9      	ldr	r1, [r3, #28]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	61da      	str	r2, [r3, #28]
      break;
 80037b0:	e021      	b.n	80037f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68b9      	ldr	r1, [r7, #8]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fad1 	bl	8003d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69da      	ldr	r2, [r3, #28]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69da      	ldr	r2, [r3, #28]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69d9      	ldr	r1, [r3, #28]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	021a      	lsls	r2, r3, #8
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	61da      	str	r2, [r3, #28]
      break;
 80037f2:	e000      	b.n	80037f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80037f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_TIM_ConfigClockSource+0x18>
 8003824:	2302      	movs	r3, #2
 8003826:	e0b3      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x180>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003846:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800384e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003860:	d03e      	beq.n	80038e0 <HAL_TIM_ConfigClockSource+0xd0>
 8003862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003866:	f200 8087 	bhi.w	8003978 <HAL_TIM_ConfigClockSource+0x168>
 800386a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386e:	f000 8085 	beq.w	800397c <HAL_TIM_ConfigClockSource+0x16c>
 8003872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003876:	d87f      	bhi.n	8003978 <HAL_TIM_ConfigClockSource+0x168>
 8003878:	2b70      	cmp	r3, #112	; 0x70
 800387a:	d01a      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0xa2>
 800387c:	2b70      	cmp	r3, #112	; 0x70
 800387e:	d87b      	bhi.n	8003978 <HAL_TIM_ConfigClockSource+0x168>
 8003880:	2b60      	cmp	r3, #96	; 0x60
 8003882:	d050      	beq.n	8003926 <HAL_TIM_ConfigClockSource+0x116>
 8003884:	2b60      	cmp	r3, #96	; 0x60
 8003886:	d877      	bhi.n	8003978 <HAL_TIM_ConfigClockSource+0x168>
 8003888:	2b50      	cmp	r3, #80	; 0x50
 800388a:	d03c      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0xf6>
 800388c:	2b50      	cmp	r3, #80	; 0x50
 800388e:	d873      	bhi.n	8003978 <HAL_TIM_ConfigClockSource+0x168>
 8003890:	2b40      	cmp	r3, #64	; 0x40
 8003892:	d058      	beq.n	8003946 <HAL_TIM_ConfigClockSource+0x136>
 8003894:	2b40      	cmp	r3, #64	; 0x40
 8003896:	d86f      	bhi.n	8003978 <HAL_TIM_ConfigClockSource+0x168>
 8003898:	2b30      	cmp	r3, #48	; 0x30
 800389a:	d064      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0x156>
 800389c:	2b30      	cmp	r3, #48	; 0x30
 800389e:	d86b      	bhi.n	8003978 <HAL_TIM_ConfigClockSource+0x168>
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d060      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0x156>
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d867      	bhi.n	8003978 <HAL_TIM_ConfigClockSource+0x168>
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d05c      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0x156>
 80038ac:	2b10      	cmp	r3, #16
 80038ae:	d05a      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80038b0:	e062      	b.n	8003978 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	6899      	ldr	r1, [r3, #8]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f000 fb17 	bl	8003ef4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	609a      	str	r2, [r3, #8]
      break;
 80038de:	e04e      	b.n	800397e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	6899      	ldr	r1, [r3, #8]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f000 fb00 	bl	8003ef4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003902:	609a      	str	r2, [r3, #8]
      break;
 8003904:	e03b      	b.n	800397e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	6859      	ldr	r1, [r3, #4]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	461a      	mov	r2, r3
 8003914:	f000 fa74 	bl	8003e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2150      	movs	r1, #80	; 0x50
 800391e:	4618      	mov	r0, r3
 8003920:	f000 facd 	bl	8003ebe <TIM_ITRx_SetConfig>
      break;
 8003924:	e02b      	b.n	800397e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	6859      	ldr	r1, [r3, #4]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	461a      	mov	r2, r3
 8003934:	f000 fa93 	bl	8003e5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2160      	movs	r1, #96	; 0x60
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fabd 	bl	8003ebe <TIM_ITRx_SetConfig>
      break;
 8003944:	e01b      	b.n	800397e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6859      	ldr	r1, [r3, #4]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	461a      	mov	r2, r3
 8003954:	f000 fa54 	bl	8003e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2140      	movs	r1, #64	; 0x40
 800395e:	4618      	mov	r0, r3
 8003960:	f000 faad 	bl	8003ebe <TIM_ITRx_SetConfig>
      break;
 8003964:	e00b      	b.n	800397e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4619      	mov	r1, r3
 8003970:	4610      	mov	r0, r2
 8003972:	f000 faa4 	bl	8003ebe <TIM_ITRx_SetConfig>
      break;
 8003976:	e002      	b.n	800397e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003978:	bf00      	nop
 800397a:	e000      	b.n	800397e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800397c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a34      	ldr	r2, [pc, #208]	; (8003acc <TIM_Base_SetConfig+0xe4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00f      	beq.n	8003a20 <TIM_Base_SetConfig+0x38>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a06:	d00b      	beq.n	8003a20 <TIM_Base_SetConfig+0x38>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a31      	ldr	r2, [pc, #196]	; (8003ad0 <TIM_Base_SetConfig+0xe8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d007      	beq.n	8003a20 <TIM_Base_SetConfig+0x38>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a30      	ldr	r2, [pc, #192]	; (8003ad4 <TIM_Base_SetConfig+0xec>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d003      	beq.n	8003a20 <TIM_Base_SetConfig+0x38>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a2f      	ldr	r2, [pc, #188]	; (8003ad8 <TIM_Base_SetConfig+0xf0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d108      	bne.n	8003a32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a25      	ldr	r2, [pc, #148]	; (8003acc <TIM_Base_SetConfig+0xe4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d01b      	beq.n	8003a72 <TIM_Base_SetConfig+0x8a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a40:	d017      	beq.n	8003a72 <TIM_Base_SetConfig+0x8a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a22      	ldr	r2, [pc, #136]	; (8003ad0 <TIM_Base_SetConfig+0xe8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d013      	beq.n	8003a72 <TIM_Base_SetConfig+0x8a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a21      	ldr	r2, [pc, #132]	; (8003ad4 <TIM_Base_SetConfig+0xec>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00f      	beq.n	8003a72 <TIM_Base_SetConfig+0x8a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a20      	ldr	r2, [pc, #128]	; (8003ad8 <TIM_Base_SetConfig+0xf0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00b      	beq.n	8003a72 <TIM_Base_SetConfig+0x8a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <TIM_Base_SetConfig+0xf4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d007      	beq.n	8003a72 <TIM_Base_SetConfig+0x8a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a1e      	ldr	r2, [pc, #120]	; (8003ae0 <TIM_Base_SetConfig+0xf8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d003      	beq.n	8003a72 <TIM_Base_SetConfig+0x8a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ae4 <TIM_Base_SetConfig+0xfc>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d108      	bne.n	8003a84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a08      	ldr	r2, [pc, #32]	; (8003acc <TIM_Base_SetConfig+0xe4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d103      	bne.n	8003ab8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	615a      	str	r2, [r3, #20]
}
 8003abe:	bf00      	nop
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40010000 	.word	0x40010000
 8003ad0:	40000400 	.word	0x40000400
 8003ad4:	40000800 	.word	0x40000800
 8003ad8:	40000c00 	.word	0x40000c00
 8003adc:	40014000 	.word	0x40014000
 8003ae0:	40014400 	.word	0x40014400
 8003ae4:	40014800 	.word	0x40014800

08003ae8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	f023 0201 	bic.w	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0303 	bic.w	r3, r3, #3
 8003b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f023 0302 	bic.w	r3, r3, #2
 8003b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a1c      	ldr	r2, [pc, #112]	; (8003bb0 <TIM_OC1_SetConfig+0xc8>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d10c      	bne.n	8003b5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f023 0308 	bic.w	r3, r3, #8
 8003b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f023 0304 	bic.w	r3, r3, #4
 8003b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a13      	ldr	r2, [pc, #76]	; (8003bb0 <TIM_OC1_SetConfig+0xc8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d111      	bne.n	8003b8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	621a      	str	r2, [r3, #32]
}
 8003ba4:	bf00      	nop
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	40010000 	.word	0x40010000

08003bb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	f023 0210 	bic.w	r2, r3, #16
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	021b      	lsls	r3, r3, #8
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f023 0320 	bic.w	r3, r3, #32
 8003bfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a1e      	ldr	r2, [pc, #120]	; (8003c88 <TIM_OC2_SetConfig+0xd4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d10d      	bne.n	8003c30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a15      	ldr	r2, [pc, #84]	; (8003c88 <TIM_OC2_SetConfig+0xd4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d113      	bne.n	8003c60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	621a      	str	r2, [r3, #32]
}
 8003c7a:	bf00      	nop
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40010000 	.word	0x40010000

08003c8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a1d      	ldr	r2, [pc, #116]	; (8003d5c <TIM_OC3_SetConfig+0xd0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d10d      	bne.n	8003d06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a14      	ldr	r2, [pc, #80]	; (8003d5c <TIM_OC3_SetConfig+0xd0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d113      	bne.n	8003d36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	621a      	str	r2, [r3, #32]
}
 8003d50:	bf00      	nop
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	40010000 	.word	0x40010000

08003d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	031b      	lsls	r3, r3, #12
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a10      	ldr	r2, [pc, #64]	; (8003dfc <TIM_OC4_SetConfig+0x9c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d109      	bne.n	8003dd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	019b      	lsls	r3, r3, #6
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	621a      	str	r2, [r3, #32]
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40010000 	.word	0x40010000

08003e00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	f023 0201 	bic.w	r2, r3, #1
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f023 030a 	bic.w	r3, r3, #10
 8003e3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	621a      	str	r2, [r3, #32]
}
 8003e52:	bf00      	nop
 8003e54:	371c      	adds	r7, #28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b087      	sub	sp, #28
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	f023 0210 	bic.w	r2, r3, #16
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	031b      	lsls	r3, r3, #12
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	621a      	str	r2, [r3, #32]
}
 8003eb2:	bf00      	nop
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b085      	sub	sp, #20
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f043 0307 	orr.w	r3, r3, #7
 8003ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	609a      	str	r2, [r3, #8]
}
 8003ee8:	bf00      	nop
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	021a      	lsls	r2, r3, #8
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	609a      	str	r2, [r3, #8]
}
 8003f28:	bf00      	nop
 8003f2a:	371c      	adds	r7, #28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f003 031f 	and.w	r3, r3, #31
 8003f46:	2201      	movs	r2, #1
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a1a      	ldr	r2, [r3, #32]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	401a      	ands	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a1a      	ldr	r2, [r3, #32]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	621a      	str	r2, [r3, #32]
}
 8003f72:	bf00      	nop
 8003f74:	371c      	adds	r7, #28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
	...

08003f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e050      	b.n	800403a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1c      	ldr	r2, [pc, #112]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d018      	beq.n	800400e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe4:	d013      	beq.n	800400e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a18      	ldr	r2, [pc, #96]	; (800404c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00e      	beq.n	800400e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a16      	ldr	r2, [pc, #88]	; (8004050 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d009      	beq.n	800400e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a15      	ldr	r2, [pc, #84]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a13      	ldr	r2, [pc, #76]	; (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d10c      	bne.n	8004028 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004014:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	4313      	orrs	r3, r2
 800401e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40010000 	.word	0x40010000
 800404c:	40000400 	.word	0x40000400
 8004050:	40000800 	.word	0x40000800
 8004054:	40000c00 	.word	0x40000c00
 8004058:	40014000 	.word	0x40014000

0800405c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e03f      	b.n	8004116 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fd fff4 	bl	8002098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2224      	movs	r2, #36	; 0x24
 80040b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f829 	bl	8004120 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695a      	ldr	r2, [r3, #20]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004124:	b0bd      	sub	sp, #244	; 0xf4
 8004126:	af00      	add	r7, sp, #0
 8004128:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800412c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800413c:	68d9      	ldr	r1, [r3, #12]
 800413e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	ea40 0301 	orr.w	r3, r0, r1
 8004148:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800414a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	431a      	orrs	r2, r3
 8004158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	431a      	orrs	r2, r3
 8004160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800416c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004178:	f021 010c 	bic.w	r1, r1, #12
 800417c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004186:	430b      	orrs	r3, r1
 8004188:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800418a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800419a:	6999      	ldr	r1, [r3, #24]
 800419c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	ea40 0301 	orr.w	r3, r0, r1
 80041a6:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b2:	f040 81a5 	bne.w	8004500 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4bcd      	ldr	r3, [pc, #820]	; (80044f4 <UART_SetConfig+0x3d4>)
 80041be:	429a      	cmp	r2, r3
 80041c0:	d006      	beq.n	80041d0 <UART_SetConfig+0xb0>
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4bcb      	ldr	r3, [pc, #812]	; (80044f8 <UART_SetConfig+0x3d8>)
 80041ca:	429a      	cmp	r2, r3
 80041cc:	f040 80cb 	bne.w	8004366 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041d0:	f7fe ff98 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 80041d4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041dc:	461c      	mov	r4, r3
 80041de:	f04f 0500 	mov.w	r5, #0
 80041e2:	4622      	mov	r2, r4
 80041e4:	462b      	mov	r3, r5
 80041e6:	1891      	adds	r1, r2, r2
 80041e8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80041ec:	415b      	adcs	r3, r3
 80041ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80041f2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80041f6:	1912      	adds	r2, r2, r4
 80041f8:	eb45 0303 	adc.w	r3, r5, r3
 80041fc:	f04f 0000 	mov.w	r0, #0
 8004200:	f04f 0100 	mov.w	r1, #0
 8004204:	00d9      	lsls	r1, r3, #3
 8004206:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800420a:	00d0      	lsls	r0, r2, #3
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	1911      	adds	r1, r2, r4
 8004212:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8004216:	416b      	adcs	r3, r5
 8004218:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800421c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	461a      	mov	r2, r3
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	1891      	adds	r1, r2, r2
 800422a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800422e:	415b      	adcs	r3, r3
 8004230:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004234:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004238:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800423c:	f7fc fc6a 	bl	8000b14 <__aeabi_uldivmod>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4bad      	ldr	r3, [pc, #692]	; (80044fc <UART_SetConfig+0x3dc>)
 8004246:	fba3 2302 	umull	r2, r3, r3, r2
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	011e      	lsls	r6, r3, #4
 800424e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004252:	461c      	mov	r4, r3
 8004254:	f04f 0500 	mov.w	r5, #0
 8004258:	4622      	mov	r2, r4
 800425a:	462b      	mov	r3, r5
 800425c:	1891      	adds	r1, r2, r2
 800425e:	67b9      	str	r1, [r7, #120]	; 0x78
 8004260:	415b      	adcs	r3, r3
 8004262:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004264:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004268:	1912      	adds	r2, r2, r4
 800426a:	eb45 0303 	adc.w	r3, r5, r3
 800426e:	f04f 0000 	mov.w	r0, #0
 8004272:	f04f 0100 	mov.w	r1, #0
 8004276:	00d9      	lsls	r1, r3, #3
 8004278:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800427c:	00d0      	lsls	r0, r2, #3
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	1911      	adds	r1, r2, r4
 8004284:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004288:	416b      	adcs	r3, r5
 800428a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800428e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	461a      	mov	r2, r3
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	1891      	adds	r1, r2, r2
 800429c:	6739      	str	r1, [r7, #112]	; 0x70
 800429e:	415b      	adcs	r3, r3
 80042a0:	677b      	str	r3, [r7, #116]	; 0x74
 80042a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80042a6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80042aa:	f7fc fc33 	bl	8000b14 <__aeabi_uldivmod>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4b92      	ldr	r3, [pc, #584]	; (80044fc <UART_SetConfig+0x3dc>)
 80042b4:	fba3 1302 	umull	r1, r3, r3, r2
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	2164      	movs	r1, #100	; 0x64
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	3332      	adds	r3, #50	; 0x32
 80042c6:	4a8d      	ldr	r2, [pc, #564]	; (80044fc <UART_SetConfig+0x3dc>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042d4:	441e      	add	r6, r3
 80042d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042da:	4618      	mov	r0, r3
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	1894      	adds	r4, r2, r2
 80042e6:	66bc      	str	r4, [r7, #104]	; 0x68
 80042e8:	415b      	adcs	r3, r3
 80042ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042ec:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80042f0:	1812      	adds	r2, r2, r0
 80042f2:	eb41 0303 	adc.w	r3, r1, r3
 80042f6:	f04f 0400 	mov.w	r4, #0
 80042fa:	f04f 0500 	mov.w	r5, #0
 80042fe:	00dd      	lsls	r5, r3, #3
 8004300:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004304:	00d4      	lsls	r4, r2, #3
 8004306:	4622      	mov	r2, r4
 8004308:	462b      	mov	r3, r5
 800430a:	1814      	adds	r4, r2, r0
 800430c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8004310:	414b      	adcs	r3, r1
 8004312:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	461a      	mov	r2, r3
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	1891      	adds	r1, r2, r2
 8004324:	6639      	str	r1, [r7, #96]	; 0x60
 8004326:	415b      	adcs	r3, r3
 8004328:	667b      	str	r3, [r7, #100]	; 0x64
 800432a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800432e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004332:	f7fc fbef 	bl	8000b14 <__aeabi_uldivmod>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4b70      	ldr	r3, [pc, #448]	; (80044fc <UART_SetConfig+0x3dc>)
 800433c:	fba3 1302 	umull	r1, r3, r3, r2
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	2164      	movs	r1, #100	; 0x64
 8004344:	fb01 f303 	mul.w	r3, r1, r3
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	3332      	adds	r3, #50	; 0x32
 800434e:	4a6b      	ldr	r2, [pc, #428]	; (80044fc <UART_SetConfig+0x3dc>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	f003 0207 	and.w	r2, r3, #7
 800435a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4432      	add	r2, r6
 8004362:	609a      	str	r2, [r3, #8]
 8004364:	e26d      	b.n	8004842 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004366:	f7fe feb9 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 800436a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800436e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004372:	461c      	mov	r4, r3
 8004374:	f04f 0500 	mov.w	r5, #0
 8004378:	4622      	mov	r2, r4
 800437a:	462b      	mov	r3, r5
 800437c:	1891      	adds	r1, r2, r2
 800437e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004380:	415b      	adcs	r3, r3
 8004382:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004384:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004388:	1912      	adds	r2, r2, r4
 800438a:	eb45 0303 	adc.w	r3, r5, r3
 800438e:	f04f 0000 	mov.w	r0, #0
 8004392:	f04f 0100 	mov.w	r1, #0
 8004396:	00d9      	lsls	r1, r3, #3
 8004398:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800439c:	00d0      	lsls	r0, r2, #3
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	1911      	adds	r1, r2, r4
 80043a4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80043a8:	416b      	adcs	r3, r5
 80043aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	461a      	mov	r2, r3
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	1891      	adds	r1, r2, r2
 80043bc:	6539      	str	r1, [r7, #80]	; 0x50
 80043be:	415b      	adcs	r3, r3
 80043c0:	657b      	str	r3, [r7, #84]	; 0x54
 80043c2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043c6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80043ca:	f7fc fba3 	bl	8000b14 <__aeabi_uldivmod>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4b4a      	ldr	r3, [pc, #296]	; (80044fc <UART_SetConfig+0x3dc>)
 80043d4:	fba3 2302 	umull	r2, r3, r3, r2
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	011e      	lsls	r6, r3, #4
 80043dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043e0:	461c      	mov	r4, r3
 80043e2:	f04f 0500 	mov.w	r5, #0
 80043e6:	4622      	mov	r2, r4
 80043e8:	462b      	mov	r3, r5
 80043ea:	1891      	adds	r1, r2, r2
 80043ec:	64b9      	str	r1, [r7, #72]	; 0x48
 80043ee:	415b      	adcs	r3, r3
 80043f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043f6:	1912      	adds	r2, r2, r4
 80043f8:	eb45 0303 	adc.w	r3, r5, r3
 80043fc:	f04f 0000 	mov.w	r0, #0
 8004400:	f04f 0100 	mov.w	r1, #0
 8004404:	00d9      	lsls	r1, r3, #3
 8004406:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800440a:	00d0      	lsls	r0, r2, #3
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	1911      	adds	r1, r2, r4
 8004412:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004416:	416b      	adcs	r3, r5
 8004418:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800441c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	461a      	mov	r2, r3
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	1891      	adds	r1, r2, r2
 800442a:	6439      	str	r1, [r7, #64]	; 0x40
 800442c:	415b      	adcs	r3, r3
 800442e:	647b      	str	r3, [r7, #68]	; 0x44
 8004430:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004434:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004438:	f7fc fb6c 	bl	8000b14 <__aeabi_uldivmod>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4b2e      	ldr	r3, [pc, #184]	; (80044fc <UART_SetConfig+0x3dc>)
 8004442:	fba3 1302 	umull	r1, r3, r3, r2
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	2164      	movs	r1, #100	; 0x64
 800444a:	fb01 f303 	mul.w	r3, r1, r3
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	3332      	adds	r3, #50	; 0x32
 8004454:	4a29      	ldr	r2, [pc, #164]	; (80044fc <UART_SetConfig+0x3dc>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004462:	441e      	add	r6, r3
 8004464:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004468:	4618      	mov	r0, r3
 800446a:	f04f 0100 	mov.w	r1, #0
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	1894      	adds	r4, r2, r2
 8004474:	63bc      	str	r4, [r7, #56]	; 0x38
 8004476:	415b      	adcs	r3, r3
 8004478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800447a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800447e:	1812      	adds	r2, r2, r0
 8004480:	eb41 0303 	adc.w	r3, r1, r3
 8004484:	f04f 0400 	mov.w	r4, #0
 8004488:	f04f 0500 	mov.w	r5, #0
 800448c:	00dd      	lsls	r5, r3, #3
 800448e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004492:	00d4      	lsls	r4, r2, #3
 8004494:	4622      	mov	r2, r4
 8004496:	462b      	mov	r3, r5
 8004498:	1814      	adds	r4, r2, r0
 800449a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800449e:	414b      	adcs	r3, r1
 80044a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	461a      	mov	r2, r3
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	1891      	adds	r1, r2, r2
 80044b2:	6339      	str	r1, [r7, #48]	; 0x30
 80044b4:	415b      	adcs	r3, r3
 80044b6:	637b      	str	r3, [r7, #52]	; 0x34
 80044b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80044bc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044c0:	f7fc fb28 	bl	8000b14 <__aeabi_uldivmod>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <UART_SetConfig+0x3dc>)
 80044ca:	fba3 1302 	umull	r1, r3, r3, r2
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	2164      	movs	r1, #100	; 0x64
 80044d2:	fb01 f303 	mul.w	r3, r1, r3
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	3332      	adds	r3, #50	; 0x32
 80044dc:	4a07      	ldr	r2, [pc, #28]	; (80044fc <UART_SetConfig+0x3dc>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	095b      	lsrs	r3, r3, #5
 80044e4:	f003 0207 	and.w	r2, r3, #7
 80044e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4432      	add	r2, r6
 80044f0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80044f2:	e1a6      	b.n	8004842 <UART_SetConfig+0x722>
 80044f4:	40011000 	.word	0x40011000
 80044f8:	40011400 	.word	0x40011400
 80044fc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	4bd1      	ldr	r3, [pc, #836]	; (800484c <UART_SetConfig+0x72c>)
 8004508:	429a      	cmp	r2, r3
 800450a:	d006      	beq.n	800451a <UART_SetConfig+0x3fa>
 800450c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4bcf      	ldr	r3, [pc, #828]	; (8004850 <UART_SetConfig+0x730>)
 8004514:	429a      	cmp	r2, r3
 8004516:	f040 80ca 	bne.w	80046ae <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800451a:	f7fe fdf3 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 800451e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004522:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004526:	461c      	mov	r4, r3
 8004528:	f04f 0500 	mov.w	r5, #0
 800452c:	4622      	mov	r2, r4
 800452e:	462b      	mov	r3, r5
 8004530:	1891      	adds	r1, r2, r2
 8004532:	62b9      	str	r1, [r7, #40]	; 0x28
 8004534:	415b      	adcs	r3, r3
 8004536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004538:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800453c:	1912      	adds	r2, r2, r4
 800453e:	eb45 0303 	adc.w	r3, r5, r3
 8004542:	f04f 0000 	mov.w	r0, #0
 8004546:	f04f 0100 	mov.w	r1, #0
 800454a:	00d9      	lsls	r1, r3, #3
 800454c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004550:	00d0      	lsls	r0, r2, #3
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	eb12 0a04 	adds.w	sl, r2, r4
 800455a:	eb43 0b05 	adc.w	fp, r3, r5
 800455e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	4618      	mov	r0, r3
 8004566:	f04f 0100 	mov.w	r1, #0
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	008b      	lsls	r3, r1, #2
 8004574:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004578:	0082      	lsls	r2, r0, #2
 800457a:	4650      	mov	r0, sl
 800457c:	4659      	mov	r1, fp
 800457e:	f7fc fac9 	bl	8000b14 <__aeabi_uldivmod>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4bb3      	ldr	r3, [pc, #716]	; (8004854 <UART_SetConfig+0x734>)
 8004588:	fba3 2302 	umull	r2, r3, r3, r2
 800458c:	095b      	lsrs	r3, r3, #5
 800458e:	011e      	lsls	r6, r3, #4
 8004590:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004594:	4618      	mov	r0, r3
 8004596:	f04f 0100 	mov.w	r1, #0
 800459a:	4602      	mov	r2, r0
 800459c:	460b      	mov	r3, r1
 800459e:	1894      	adds	r4, r2, r2
 80045a0:	623c      	str	r4, [r7, #32]
 80045a2:	415b      	adcs	r3, r3
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
 80045a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045aa:	1812      	adds	r2, r2, r0
 80045ac:	eb41 0303 	adc.w	r3, r1, r3
 80045b0:	f04f 0400 	mov.w	r4, #0
 80045b4:	f04f 0500 	mov.w	r5, #0
 80045b8:	00dd      	lsls	r5, r3, #3
 80045ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045be:	00d4      	lsls	r4, r2, #3
 80045c0:	4622      	mov	r2, r4
 80045c2:	462b      	mov	r3, r5
 80045c4:	1814      	adds	r4, r2, r0
 80045c6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80045ca:	414b      	adcs	r3, r1
 80045cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f04f 0100 	mov.w	r1, #0
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	008b      	lsls	r3, r1, #2
 80045e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045ea:	0082      	lsls	r2, r0, #2
 80045ec:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80045f0:	f7fc fa90 	bl	8000b14 <__aeabi_uldivmod>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4b96      	ldr	r3, [pc, #600]	; (8004854 <UART_SetConfig+0x734>)
 80045fa:	fba3 1302 	umull	r1, r3, r3, r2
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	2164      	movs	r1, #100	; 0x64
 8004602:	fb01 f303 	mul.w	r3, r1, r3
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	3332      	adds	r3, #50	; 0x32
 800460c:	4a91      	ldr	r2, [pc, #580]	; (8004854 <UART_SetConfig+0x734>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004618:	441e      	add	r6, r3
 800461a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800461e:	4618      	mov	r0, r3
 8004620:	f04f 0100 	mov.w	r1, #0
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	1894      	adds	r4, r2, r2
 800462a:	61bc      	str	r4, [r7, #24]
 800462c:	415b      	adcs	r3, r3
 800462e:	61fb      	str	r3, [r7, #28]
 8004630:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004634:	1812      	adds	r2, r2, r0
 8004636:	eb41 0303 	adc.w	r3, r1, r3
 800463a:	f04f 0400 	mov.w	r4, #0
 800463e:	f04f 0500 	mov.w	r5, #0
 8004642:	00dd      	lsls	r5, r3, #3
 8004644:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004648:	00d4      	lsls	r4, r2, #3
 800464a:	4622      	mov	r2, r4
 800464c:	462b      	mov	r3, r5
 800464e:	1814      	adds	r4, r2, r0
 8004650:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004654:	414b      	adcs	r3, r1
 8004656:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800465a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	4618      	mov	r0, r3
 8004662:	f04f 0100 	mov.w	r1, #0
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	008b      	lsls	r3, r1, #2
 8004670:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004674:	0082      	lsls	r2, r0, #2
 8004676:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800467a:	f7fc fa4b 	bl	8000b14 <__aeabi_uldivmod>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4b74      	ldr	r3, [pc, #464]	; (8004854 <UART_SetConfig+0x734>)
 8004684:	fba3 1302 	umull	r1, r3, r3, r2
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	2164      	movs	r1, #100	; 0x64
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	3332      	adds	r3, #50	; 0x32
 8004696:	4a6f      	ldr	r2, [pc, #444]	; (8004854 <UART_SetConfig+0x734>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	f003 020f 	and.w	r2, r3, #15
 80046a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4432      	add	r2, r6
 80046aa:	609a      	str	r2, [r3, #8]
 80046ac:	e0c9      	b.n	8004842 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80046ae:	f7fe fd15 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 80046b2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80046ba:	461c      	mov	r4, r3
 80046bc:	f04f 0500 	mov.w	r5, #0
 80046c0:	4622      	mov	r2, r4
 80046c2:	462b      	mov	r3, r5
 80046c4:	1891      	adds	r1, r2, r2
 80046c6:	6139      	str	r1, [r7, #16]
 80046c8:	415b      	adcs	r3, r3
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046d0:	1912      	adds	r2, r2, r4
 80046d2:	eb45 0303 	adc.w	r3, r5, r3
 80046d6:	f04f 0000 	mov.w	r0, #0
 80046da:	f04f 0100 	mov.w	r1, #0
 80046de:	00d9      	lsls	r1, r3, #3
 80046e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046e4:	00d0      	lsls	r0, r2, #3
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	eb12 0804 	adds.w	r8, r2, r4
 80046ee:	eb43 0905 	adc.w	r9, r3, r5
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f04f 0100 	mov.w	r1, #0
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	008b      	lsls	r3, r1, #2
 8004708:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800470c:	0082      	lsls	r2, r0, #2
 800470e:	4640      	mov	r0, r8
 8004710:	4649      	mov	r1, r9
 8004712:	f7fc f9ff 	bl	8000b14 <__aeabi_uldivmod>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4b4e      	ldr	r3, [pc, #312]	; (8004854 <UART_SetConfig+0x734>)
 800471c:	fba3 2302 	umull	r2, r3, r3, r2
 8004720:	095b      	lsrs	r3, r3, #5
 8004722:	011e      	lsls	r6, r3, #4
 8004724:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004728:	4618      	mov	r0, r3
 800472a:	f04f 0100 	mov.w	r1, #0
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	1894      	adds	r4, r2, r2
 8004734:	60bc      	str	r4, [r7, #8]
 8004736:	415b      	adcs	r3, r3
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800473e:	1812      	adds	r2, r2, r0
 8004740:	eb41 0303 	adc.w	r3, r1, r3
 8004744:	f04f 0400 	mov.w	r4, #0
 8004748:	f04f 0500 	mov.w	r5, #0
 800474c:	00dd      	lsls	r5, r3, #3
 800474e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004752:	00d4      	lsls	r4, r2, #3
 8004754:	4622      	mov	r2, r4
 8004756:	462b      	mov	r3, r5
 8004758:	1814      	adds	r4, r2, r0
 800475a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800475e:	414b      	adcs	r3, r1
 8004760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	4618      	mov	r0, r3
 800476c:	f04f 0100 	mov.w	r1, #0
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	008b      	lsls	r3, r1, #2
 800477a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800477e:	0082      	lsls	r2, r0, #2
 8004780:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004784:	f7fc f9c6 	bl	8000b14 <__aeabi_uldivmod>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4b31      	ldr	r3, [pc, #196]	; (8004854 <UART_SetConfig+0x734>)
 800478e:	fba3 1302 	umull	r1, r3, r3, r2
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	2164      	movs	r1, #100	; 0x64
 8004796:	fb01 f303 	mul.w	r3, r1, r3
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	3332      	adds	r3, #50	; 0x32
 80047a0:	4a2c      	ldr	r2, [pc, #176]	; (8004854 <UART_SetConfig+0x734>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ac:	441e      	add	r6, r3
 80047ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80047b2:	4618      	mov	r0, r3
 80047b4:	f04f 0100 	mov.w	r1, #0
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	1894      	adds	r4, r2, r2
 80047be:	603c      	str	r4, [r7, #0]
 80047c0:	415b      	adcs	r3, r3
 80047c2:	607b      	str	r3, [r7, #4]
 80047c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047c8:	1812      	adds	r2, r2, r0
 80047ca:	eb41 0303 	adc.w	r3, r1, r3
 80047ce:	f04f 0400 	mov.w	r4, #0
 80047d2:	f04f 0500 	mov.w	r5, #0
 80047d6:	00dd      	lsls	r5, r3, #3
 80047d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047dc:	00d4      	lsls	r4, r2, #3
 80047de:	4622      	mov	r2, r4
 80047e0:	462b      	mov	r3, r5
 80047e2:	1814      	adds	r4, r2, r0
 80047e4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80047e8:	414b      	adcs	r3, r1
 80047ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80047ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f04f 0100 	mov.w	r1, #0
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	008b      	lsls	r3, r1, #2
 8004804:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004808:	0082      	lsls	r2, r0, #2
 800480a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800480e:	f7fc f981 	bl	8000b14 <__aeabi_uldivmod>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <UART_SetConfig+0x734>)
 8004818:	fba3 1302 	umull	r1, r3, r3, r2
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	2164      	movs	r1, #100	; 0x64
 8004820:	fb01 f303 	mul.w	r3, r1, r3
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	3332      	adds	r3, #50	; 0x32
 800482a:	4a0a      	ldr	r2, [pc, #40]	; (8004854 <UART_SetConfig+0x734>)
 800482c:	fba2 2303 	umull	r2, r3, r2, r3
 8004830:	095b      	lsrs	r3, r3, #5
 8004832:	f003 020f 	and.w	r2, r3, #15
 8004836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4432      	add	r2, r6
 800483e:	609a      	str	r2, [r3, #8]
}
 8004840:	e7ff      	b.n	8004842 <UART_SetConfig+0x722>
 8004842:	bf00      	nop
 8004844:	37f4      	adds	r7, #244	; 0xf4
 8004846:	46bd      	mov	sp, r7
 8004848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800484c:	40011000 	.word	0x40011000
 8004850:	40011400 	.word	0x40011400
 8004854:	51eb851f 	.word	0x51eb851f

08004858 <__libc_init_array>:
 8004858:	b570      	push	{r4, r5, r6, lr}
 800485a:	4d0d      	ldr	r5, [pc, #52]	; (8004890 <__libc_init_array+0x38>)
 800485c:	4c0d      	ldr	r4, [pc, #52]	; (8004894 <__libc_init_array+0x3c>)
 800485e:	1b64      	subs	r4, r4, r5
 8004860:	10a4      	asrs	r4, r4, #2
 8004862:	2600      	movs	r6, #0
 8004864:	42a6      	cmp	r6, r4
 8004866:	d109      	bne.n	800487c <__libc_init_array+0x24>
 8004868:	4d0b      	ldr	r5, [pc, #44]	; (8004898 <__libc_init_array+0x40>)
 800486a:	4c0c      	ldr	r4, [pc, #48]	; (800489c <__libc_init_array+0x44>)
 800486c:	f000 f820 	bl	80048b0 <_init>
 8004870:	1b64      	subs	r4, r4, r5
 8004872:	10a4      	asrs	r4, r4, #2
 8004874:	2600      	movs	r6, #0
 8004876:	42a6      	cmp	r6, r4
 8004878:	d105      	bne.n	8004886 <__libc_init_array+0x2e>
 800487a:	bd70      	pop	{r4, r5, r6, pc}
 800487c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004880:	4798      	blx	r3
 8004882:	3601      	adds	r6, #1
 8004884:	e7ee      	b.n	8004864 <__libc_init_array+0xc>
 8004886:	f855 3b04 	ldr.w	r3, [r5], #4
 800488a:	4798      	blx	r3
 800488c:	3601      	adds	r6, #1
 800488e:	e7f2      	b.n	8004876 <__libc_init_array+0x1e>
 8004890:	080048e8 	.word	0x080048e8
 8004894:	080048e8 	.word	0x080048e8
 8004898:	080048e8 	.word	0x080048e8
 800489c:	080048ec 	.word	0x080048ec

080048a0 <memset>:
 80048a0:	4402      	add	r2, r0
 80048a2:	4603      	mov	r3, r0
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d100      	bne.n	80048aa <memset+0xa>
 80048a8:	4770      	bx	lr
 80048aa:	f803 1b01 	strb.w	r1, [r3], #1
 80048ae:	e7f9      	b.n	80048a4 <memset+0x4>

080048b0 <_init>:
 80048b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b2:	bf00      	nop
 80048b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b6:	bc08      	pop	{r3}
 80048b8:	469e      	mov	lr, r3
 80048ba:	4770      	bx	lr

080048bc <_fini>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	bf00      	nop
 80048c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c2:	bc08      	pop	{r3}
 80048c4:	469e      	mov	lr, r3
 80048c6:	4770      	bx	lr
