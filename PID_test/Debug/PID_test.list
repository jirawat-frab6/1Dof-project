
PID_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004518  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080046b0  080046b0  000146b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d0  080046d0  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046d8  080046d8  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d8  080046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046dc  080046dc  000146dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  080046e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002310  200000f0  080047cc  000200f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002400  080047cc  00022400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa2d  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000178b  00000000  00000000  0002ab49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b60  00000000  00000000  0002c2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa8  00000000  00000000  0002ce38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015e05  00000000  00000000  0002d8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007964  00000000  00000000  000436e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c218  00000000  00000000  0004b049  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d7261  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032dc  00000000  00000000  000d72dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000f0 	.word	0x200000f0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004698 	.word	0x08004698

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000f4 	.word	0x200000f4
 80001d4:	08004698 	.word	0x08004698

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e08:	f001 f81c 	bl	8001e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0c:	f000 f910 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e10:	f000 fac8 	bl	80013a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e14:	f000 fa9c 	bl	8001350 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000e18:	f000 f972 	bl	8001100 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e1c:	f000 f9c8 	bl	80011b0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000e20:	f000 fa48 	bl	80012b4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // start micro
  HAL_TIM_Base_Start_IT(&htim5);
 8000e24:	4872      	ldr	r0, [pc, #456]	; (8000ff0 <main+0x1f0>)
 8000e26:	f001 ffde 	bl	8002de6 <HAL_TIM_Base_Start_IT>

  // start PWM
  HAL_TIM_Base_Start(&htim3);
 8000e2a:	4872      	ldr	r0, [pc, #456]	; (8000ff4 <main+0x1f4>)
 8000e2c:	f001 ffb7 	bl	8002d9e <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e30:	2100      	movs	r1, #0
 8000e32:	4870      	ldr	r0, [pc, #448]	; (8000ff4 <main+0x1f4>)
 8000e34:	f002 f830 	bl	8002e98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e38:	2104      	movs	r1, #4
 8000e3a:	486e      	ldr	r0, [pc, #440]	; (8000ff4 <main+0x1f4>)
 8000e3c:	f002 f82c 	bl	8002e98 <HAL_TIM_PWM_Start>


  // start QEI
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000e40:	213c      	movs	r1, #60	; 0x3c
 8000e42:	486d      	ldr	r0, [pc, #436]	; (8000ff8 <main+0x1f8>)
 8000e44:	f002 f8ec 	bl	8003020 <HAL_TIM_Encoder_Start>


  //init lowpass_filter
  for(int i = 0;i < 10;i++){
 8000e48:	2300      	movs	r3, #0
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	e00f      	b.n	8000e6e <main+0x6e>
	  lowpass_filters[i].Wc = Wc_arr[i];
 8000e4e:	4a6b      	ldr	r2, [pc, #428]	; (8000ffc <main+0x1fc>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	4413      	add	r3, r2
 8000e56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e5a:	4969      	ldr	r1, [pc, #420]	; (8001000 <main+0x200>)
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	0152      	lsls	r2, r2, #5
 8000e60:	440a      	add	r2, r1
 8000e62:	3218      	adds	r2, #24
 8000e64:	e9c2 3400 	strd	r3, r4, [r2]
  for(int i = 0;i < 10;i++){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b09      	cmp	r3, #9
 8000e72:	ddec      	ble.n	8000e4e <main+0x4e>
  }

  //init pid
  pids[0].dt = pids[1].dt = 0.02;
 8000e74:	4a63      	ldr	r2, [pc, #396]	; (8001004 <main+0x204>)
 8000e76:	a458      	add	r4, pc, #352	; (adr r4, 8000fd8 <main+0x1d8>)
 8000e78:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000e7c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
 8000e80:	4b60      	ldr	r3, [pc, #384]	; (8001004 <main+0x204>)
 8000e82:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8000e86:	4a5f      	ldr	r2, [pc, #380]	; (8001004 <main+0x204>)
 8000e88:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
  pids[0].min = pids[1].min = -10000;
 8000e8c:	4a5d      	ldr	r2, [pc, #372]	; (8001004 <main+0x204>)
 8000e8e:	a454      	add	r4, pc, #336	; (adr r4, 8000fe0 <main+0x1e0>)
 8000e90:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000e94:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 8000e98:	4b5a      	ldr	r3, [pc, #360]	; (8001004 <main+0x204>)
 8000e9a:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8000e9e:	4a59      	ldr	r2, [pc, #356]	; (8001004 <main+0x204>)
 8000ea0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
  pids[0].max = pids[1].max = 10000;
 8000ea4:	4a57      	ldr	r2, [pc, #348]	; (8001004 <main+0x204>)
 8000ea6:	a450      	add	r4, pc, #320	; (adr r4, 8000fe8 <main+0x1e8>)
 8000ea8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000eac:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8000eb0:	4b54      	ldr	r3, [pc, #336]	; (8001004 <main+0x204>)
 8000eb2:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8000eb6:	4a53      	ldr	r2, [pc, #332]	; (8001004 <main+0x204>)
 8000eb8:	e9c2 3408 	strd	r3, r4, [r2, #32]
  pids[0].tau = pids[1].tau = 0.02;
 8000ebc:	4a51      	ldr	r2, [pc, #324]	; (8001004 <main+0x204>)
 8000ebe:	a446      	add	r4, pc, #280	; (adr r4, 8000fd8 <main+0x1d8>)
 8000ec0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000ec4:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
 8000ec8:	4b4e      	ldr	r3, [pc, #312]	; (8001004 <main+0x204>)
 8000eca:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8000ece:	4a4d      	ldr	r2, [pc, #308]	; (8001004 <main+0x204>)
 8000ed0:	e9c2 3406 	strd	r3, r4, [r2, #24]

  pids[0].kp = 500;
 8000ed4:	4a4b      	ldr	r2, [pc, #300]	; (8001004 <main+0x204>)
 8000ed6:	f04f 0300 	mov.w	r3, #0
 8000eda:	4c4b      	ldr	r4, [pc, #300]	; (8001008 <main+0x208>)
 8000edc:	e9c2 3400 	strd	r3, r4, [r2]
  pids[0].ki = 600;
 8000ee0:	4a48      	ldr	r2, [pc, #288]	; (8001004 <main+0x204>)
 8000ee2:	f04f 0300 	mov.w	r3, #0
 8000ee6:	4c49      	ldr	r4, [pc, #292]	; (800100c <main+0x20c>)
 8000ee8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  pids[0].kd = 10;
 8000eec:	4a45      	ldr	r2, [pc, #276]	; (8001004 <main+0x204>)
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	4c47      	ldr	r4, [pc, #284]	; (8001010 <main+0x210>)
 8000ef4:	e9c2 3404 	strd	r3, r4, [r2, #16]


  targectory_cal(paths, &path_n_cnt, 0, 10, 0.02);
 8000ef8:	ed9f 0b37 	vldr	d0, [pc, #220]	; 8000fd8 <main+0x1d8>
 8000efc:	230a      	movs	r3, #10
 8000efe:	2200      	movs	r2, #0
 8000f00:	4944      	ldr	r1, [pc, #272]	; (8001014 <main+0x214>)
 8000f02:	4845      	ldr	r0, [pc, #276]	; (8001018 <main+0x218>)
 8000f04:	f000 fbfc 	bl	8001700 <targectory_cal>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,500);
 8000f08:	4b3a      	ldr	r3, [pc, #232]	; (8000ff4 <main+0x1f4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f10:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 8000f12:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <main+0x1f4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2200      	movs	r2, #0
 8000f18:	639a      	str	r2, [r3, #56]	; 0x38

	  encoder_value = unwraping_update();
 8000f1a:	f000 fab3 	bl	8001484 <unwraping_update>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	4b3e      	ldr	r3, [pc, #248]	; (800101c <main+0x21c>)
 8000f22:	601a      	str	r2, [r3, #0]

	  // read encoder with low-pass
	  if(micros() - time_stamp > 1000){ // 1kHz
 8000f24:	f000 fdb0 	bl	8001a88 <micros>
 8000f28:	460a      	mov	r2, r1
 8000f2a:	4601      	mov	r1, r0
 8000f2c:	4b3c      	ldr	r3, [pc, #240]	; (8001020 <main+0x220>)
 8000f2e:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8000f32:	460b      	mov	r3, r1
 8000f34:	4614      	mov	r4, r2
 8000f36:	ebb3 030b 	subs.w	r3, r3, fp
 8000f3a:	eb64 040c 	sbc.w	r4, r4, ip
 8000f3e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	42a2      	cmp	r2, r4
 8000f48:	bf08      	it	eq
 8000f4a:	4299      	cmpeq	r1, r3
 8000f4c:	d2dc      	bcs.n	8000f08 <main+0x108>
		  time_stamp = micros();
 8000f4e:	f000 fd9b 	bl	8001a88 <micros>
 8000f52:	4603      	mov	r3, r0
 8000f54:	460c      	mov	r4, r1
 8000f56:	4a32      	ldr	r2, [pc, #200]	; (8001020 <main+0x220>)
 8000f58:	e9c2 3400 	strd	r3, r4, [r2]

		  encoder_velocity = velocity_update(encoder_value);
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	; (800101c <main+0x21c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 facd 	bl	8001500 <velocity_update>
 8000f66:	eeb0 7a40 	vmov.f32	s14, s0
 8000f6a:	eef0 7a60 	vmov.f32	s15, s1
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <main+0x224>)
 8000f70:	ed83 7b00 	vstr	d7, [r3]

		  for(int i = 0;i < 10;i++){
 8000f74:	2300      	movs	r3, #0
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	e01a      	b.n	8000fb0 <main+0x1b0>
			  lowpass_output[i] = low_pass_process(&lowpass_filters[i], encoder_velocity);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	015b      	lsls	r3, r3, #5
 8000f7e:	4a20      	ldr	r2, [pc, #128]	; (8001000 <main+0x200>)
 8000f80:	441a      	add	r2, r3
 8000f82:	4b28      	ldr	r3, [pc, #160]	; (8001024 <main+0x224>)
 8000f84:	ed93 7b00 	vldr	d7, [r3]
 8000f88:	eeb0 0a47 	vmov.f32	s0, s14
 8000f8c:	eef0 0a67 	vmov.f32	s1, s15
 8000f90:	4610      	mov	r0, r2
 8000f92:	f000 fb1b 	bl	80015cc <low_pass_process>
 8000f96:	eeb0 7a40 	vmov.f32	s14, s0
 8000f9a:	eef0 7a60 	vmov.f32	s15, s1
 8000f9e:	4a22      	ldr	r2, [pc, #136]	; (8001028 <main+0x228>)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	ed83 7b00 	vstr	d7, [r3]
		  for(int i = 0;i < 10;i++){
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	2b09      	cmp	r3, #9
 8000fb4:	dde1      	ble.n	8000f7a <main+0x17a>
		  }

		  encoder_velocity_rpm = ppms_to_rpm(lowpass_output[1]);
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <main+0x228>)
 8000fb8:	ed93 7b02 	vldr	d7, [r3, #8]
 8000fbc:	eeb0 0a47 	vmov.f32	s0, s14
 8000fc0:	eef0 0a67 	vmov.f32	s1, s15
 8000fc4:	f000 fadc 	bl	8001580 <ppms_to_rpm>
 8000fc8:	eeb0 7a40 	vmov.f32	s14, s0
 8000fcc:	eef0 7a60 	vmov.f32	s15, s1
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <main+0x22c>)
 8000fd2:	ed83 7b00 	vstr	d7, [r3]
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,500);
 8000fd6:	e797      	b.n	8000f08 <main+0x108>
 8000fd8:	47ae147b 	.word	0x47ae147b
 8000fdc:	3f947ae1 	.word	0x3f947ae1
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	c0c38800 	.word	0xc0c38800
 8000fe8:	00000000 	.word	0x00000000
 8000fec:	40c38800 	.word	0x40c38800
 8000ff0:	200022fc 	.word	0x200022fc
 8000ff4:	2000233c 	.word	0x2000233c
 8000ff8:	2000237c 	.word	0x2000237c
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000138 	.word	0x20000138
 8001004:	200002f0 	.word	0x200002f0
 8001008:	407f4000 	.word	0x407f4000
 800100c:	4082c000 	.word	0x4082c000
 8001010:	40240000 	.word	0x40240000
 8001014:	200022e0 	.word	0x200022e0
 8001018:	200003a0 	.word	0x200003a0
 800101c:	20000118 	.word	0x20000118
 8001020:	20000130 	.word	0x20000130
 8001024:	20000120 	.word	0x20000120
 8001028:	20000278 	.word	0x20000278
 800102c:	20000128 	.word	0x20000128

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b094      	sub	sp, #80	; 0x50
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	2230      	movs	r2, #48	; 0x30
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f003 fa16 	bl	8004470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <SystemClock_Config+0xc8>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	4a26      	ldr	r2, [pc, #152]	; (80010f8 <SystemClock_Config+0xc8>)
 800105e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001062:	6413      	str	r3, [r2, #64]	; 0x40
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <SystemClock_Config+0xc8>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	4b21      	ldr	r3, [pc, #132]	; (80010fc <SystemClock_Config+0xcc>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a20      	ldr	r2, [pc, #128]	; (80010fc <SystemClock_Config+0xcc>)
 800107a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <SystemClock_Config+0xcc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800108c:	2302      	movs	r3, #2
 800108e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001090:	2301      	movs	r3, #1
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001094:	2310      	movs	r3, #16
 8001096:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001098:	2302      	movs	r3, #2
 800109a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800109c:	2300      	movs	r3, #0
 800109e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010a0:	2308      	movs	r3, #8
 80010a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80010a4:	2364      	movs	r3, #100	; 0x64
 80010a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a8:	2302      	movs	r3, #2
 80010aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010ac:	2304      	movs	r3, #4
 80010ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b0:	f107 0320 	add.w	r3, r7, #32
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 f9e5 	bl	8002484 <HAL_RCC_OscConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010c0:	f000 fd18 	bl	8001af4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c4:	230f      	movs	r3, #15
 80010c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c8:	2302      	movs	r3, #2
 80010ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	2103      	movs	r1, #3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f001 fc3f 	bl	8002964 <HAL_RCC_ClockConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010ec:	f000 fd02 	bl	8001af4 <Error_Handler>
  }
}
 80010f0:	bf00      	nop
 80010f2:	3750      	adds	r7, #80	; 0x50
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40007000 	.word	0x40007000

08001100 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2224      	movs	r2, #36	; 0x24
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f003 f9ae 	bl	8004470 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800111c:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <MX_TIM1_Init+0xa8>)
 800111e:	4a23      	ldr	r2, [pc, #140]	; (80011ac <MX_TIM1_Init+0xac>)
 8001120:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <MX_TIM1_Init+0xa8>)
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <MX_TIM1_Init+0xa8>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = (12*64*4) -1;
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <MX_TIM1_Init+0xa8>)
 8001130:	f640 32ff 	movw	r2, #3071	; 0xbff
 8001134:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001136:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <MX_TIM1_Init+0xa8>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <MX_TIM1_Init+0xa8>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <MX_TIM1_Init+0xa8>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001148:	2303      	movs	r3, #3
 800114a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001150:	2301      	movs	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001160:	2301      	movs	r3, #1
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	4619      	mov	r1, r3
 8001172:	480d      	ldr	r0, [pc, #52]	; (80011a8 <MX_TIM1_Init+0xa8>)
 8001174:	f001 fec2 	bl	8002efc <HAL_TIM_Encoder_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800117e:	f000 fcb9 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	4619      	mov	r1, r3
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <MX_TIM1_Init+0xa8>)
 8001190:	f002 fcf8 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800119a:	f000 fcab 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	3730      	adds	r7, #48	; 0x30
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000237c 	.word	0x2000237c
 80011ac:	40010000 	.word	0x40010000

080011b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08e      	sub	sp, #56	; 0x38
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	f107 0320 	add.w	r3, r7, #32
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
 80011dc:	615a      	str	r2, [r3, #20]
 80011de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011e0:	4b32      	ldr	r3, [pc, #200]	; (80012ac <MX_TIM3_Init+0xfc>)
 80011e2:	4a33      	ldr	r2, [pc, #204]	; (80012b0 <MX_TIM3_Init+0x100>)
 80011e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011e6:	4b31      	ldr	r3, [pc, #196]	; (80012ac <MX_TIM3_Init+0xfc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <MX_TIM3_Init+0xfc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80011f2:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <MX_TIM3_Init+0xfc>)
 80011f4:	f242 7210 	movw	r2, #10000	; 0x2710
 80011f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <MX_TIM3_Init+0xfc>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001200:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <MX_TIM3_Init+0xfc>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001206:	4829      	ldr	r0, [pc, #164]	; (80012ac <MX_TIM3_Init+0xfc>)
 8001208:	f001 fd9e 	bl	8002d48 <HAL_TIM_Base_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001212:	f000 fc6f 	bl	8001af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800121c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001220:	4619      	mov	r1, r3
 8001222:	4822      	ldr	r0, [pc, #136]	; (80012ac <MX_TIM3_Init+0xfc>)
 8001224:	f002 f902 	bl	800342c <HAL_TIM_ConfigClockSource>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800122e:	f000 fc61 	bl	8001af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001232:	481e      	ldr	r0, [pc, #120]	; (80012ac <MX_TIM3_Init+0xfc>)
 8001234:	f001 fdfb 	bl	8002e2e <HAL_TIM_PWM_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800123e:	f000 fc59 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	4619      	mov	r1, r3
 8001250:	4816      	ldr	r0, [pc, #88]	; (80012ac <MX_TIM3_Init+0xfc>)
 8001252:	f002 fc97 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800125c:	f000 fc4a 	bl	8001af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001260:	2360      	movs	r3, #96	; 0x60
 8001262:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	4619      	mov	r1, r3
 8001276:	480d      	ldr	r0, [pc, #52]	; (80012ac <MX_TIM3_Init+0xfc>)
 8001278:	f002 f812 	bl	80032a0 <HAL_TIM_PWM_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001282:	f000 fc37 	bl	8001af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2204      	movs	r2, #4
 800128a:	4619      	mov	r1, r3
 800128c:	4807      	ldr	r0, [pc, #28]	; (80012ac <MX_TIM3_Init+0xfc>)
 800128e:	f002 f807 	bl	80032a0 <HAL_TIM_PWM_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001298:	f000 fc2c 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <MX_TIM3_Init+0xfc>)
 800129e:	f000 fcdb 	bl	8001c58 <HAL_TIM_MspPostInit>

}
 80012a2:	bf00      	nop
 80012a4:	3738      	adds	r7, #56	; 0x38
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000233c 	.word	0x2000233c
 80012b0:	40000400 	.word	0x40000400

080012b4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <MX_TIM5_Init+0x94>)
 80012d2:	4a1e      	ldr	r2, [pc, #120]	; (800134c <MX_TIM5_Init+0x98>)
 80012d4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <MX_TIM5_Init+0x94>)
 80012d8:	2263      	movs	r2, #99	; 0x63
 80012da:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_TIM5_Init+0x94>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_TIM5_Init+0x94>)
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295
 80012e8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <MX_TIM5_Init+0x94>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <MX_TIM5_Init+0x94>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80012f6:	4814      	ldr	r0, [pc, #80]	; (8001348 <MX_TIM5_Init+0x94>)
 80012f8:	f001 fd26 	bl	8002d48 <HAL_TIM_Base_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001302:	f000 fbf7 	bl	8001af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800130c:	f107 0308 	add.w	r3, r7, #8
 8001310:	4619      	mov	r1, r3
 8001312:	480d      	ldr	r0, [pc, #52]	; (8001348 <MX_TIM5_Init+0x94>)
 8001314:	f002 f88a 	bl	800342c <HAL_TIM_ConfigClockSource>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800131e:	f000 fbe9 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800132a:	463b      	mov	r3, r7
 800132c:	4619      	mov	r1, r3
 800132e:	4806      	ldr	r0, [pc, #24]	; (8001348 <MX_TIM5_Init+0x94>)
 8001330:	f002 fc28 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800133a:	f000 fbdb 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200022fc 	.word	0x200022fc
 800134c:	40000c00 	.word	0x40000c00

08001350 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <MX_USART2_UART_Init+0x50>)
 8001358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_USART2_UART_Init+0x4c>)
 800135c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_USART2_UART_Init+0x4c>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001376:	220c      	movs	r2, #12
 8001378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_USART2_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001388:	f002 fc7e 	bl	8003c88 <HAL_UART_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001392:	f000 fbaf 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200023bc 	.word	0x200023bc
 80013a0:	40004400 	.word	0x40004400

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <MX_GPIO_Init+0xd0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a2c      	ldr	r2, [pc, #176]	; (8001474 <MX_GPIO_Init+0xd0>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <MX_GPIO_Init+0xd0>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b26      	ldr	r3, [pc, #152]	; (8001474 <MX_GPIO_Init+0xd0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a25      	ldr	r2, [pc, #148]	; (8001474 <MX_GPIO_Init+0xd0>)
 80013e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <MX_GPIO_Init+0xd0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <MX_GPIO_Init+0xd0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a1e      	ldr	r2, [pc, #120]	; (8001474 <MX_GPIO_Init+0xd0>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <MX_GPIO_Init+0xd0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b18      	ldr	r3, [pc, #96]	; (8001474 <MX_GPIO_Init+0xd0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a17      	ldr	r2, [pc, #92]	; (8001474 <MX_GPIO_Init+0xd0>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <MX_GPIO_Init+0xd0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	2120      	movs	r1, #32
 800142e:	4812      	ldr	r0, [pc, #72]	; (8001478 <MX_GPIO_Init+0xd4>)
 8001430:	f001 f80e 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_GPIO_Init+0xd8>)
 800143c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	480d      	ldr	r0, [pc, #52]	; (8001480 <MX_GPIO_Init+0xdc>)
 800144a:	f000 fe7f 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800144e:	2320      	movs	r3, #32
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	4804      	ldr	r0, [pc, #16]	; (8001478 <MX_GPIO_Init+0xd4>)
 8001466:	f000 fe71 	bl	800214c <HAL_GPIO_Init>

}
 800146a:	bf00      	nop
 800146c:	3728      	adds	r7, #40	; 0x28
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40020000 	.word	0x40020000
 800147c:	10210000 	.word	0x10210000
 8001480:	40020800 	.word	0x40020800

08001484 <unwraping_update>:
static int pre_enc_cnt = 0;
static int k = 0;

#define half_enc_cnt (12*64*4)/2
#define enc_cnt 12*64*4
int unwraping_update(){
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

	static int cur_enc_cnt = 0;

	cur_enc_cnt = TIM1->CNT;
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <unwraping_update+0x6c>)
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	461a      	mov	r2, r3
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <unwraping_update+0x70>)
 8001490:	601a      	str	r2, [r3, #0]


	if(abs((int)cur_enc_cnt - pre_enc_cnt) > half_enc_cnt){
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <unwraping_update+0x70>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <unwraping_update+0x74>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	bfb8      	it	lt
 80014a0:	425b      	neglt	r3, r3
 80014a2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80014a6:	dd0f      	ble.n	80014c8 <unwraping_update+0x44>
		k+= (int)cur_enc_cnt - pre_enc_cnt > 0 ? -1 : 1 ;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <unwraping_update+0x70>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <unwraping_update+0x74>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	dd02      	ble.n	80014bc <unwraping_update+0x38>
 80014b6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ba:	e000      	b.n	80014be <unwraping_update+0x3a>
 80014bc:	2201      	movs	r2, #1
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <unwraping_update+0x78>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <unwraping_update+0x78>)
 80014c6:	6013      	str	r3, [r2, #0]
	}

	pre_enc_cnt = cur_enc_cnt;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <unwraping_update+0x70>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <unwraping_update+0x74>)
 80014ce:	6013      	str	r3, [r2, #0]
	return enc_cnt * k + cur_enc_cnt;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <unwraping_update+0x78>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	029b      	lsls	r3, r3, #10
 80014dc:	461a      	mov	r2, r3
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <unwraping_update+0x70>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4413      	add	r3, r2
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40010000 	.word	0x40010000
 80014f4:	200022ec 	.word	0x200022ec
 80014f8:	200022e4 	.word	0x200022e4
 80014fc:	200022e8 	.word	0x200022e8

08001500 <velocity_update>:

double velocity_update(int cur_pos){
 8001500:	b5b0      	push	{r4, r5, r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	static int pre_pos = 0;
	static int pre_time = 0;
	static int cur_time = 0;

	cur_time = micros();
 8001508:	f000 fabe 	bl	8001a88 <micros>
 800150c:	4603      	mov	r3, r0
 800150e:	460c      	mov	r4, r1
 8001510:	461a      	mov	r2, r3
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <velocity_update+0x70>)
 8001514:	601a      	str	r2, [r3, #0]

	double velo = (double)(cur_pos - pre_pos)/(cur_time - pre_time);
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <velocity_update+0x74>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f7fe ffac 	bl	800047c <__aeabi_i2d>
 8001524:	4604      	mov	r4, r0
 8001526:	460d      	mov	r5, r1
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <velocity_update+0x70>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <velocity_update+0x78>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe ffa2 	bl	800047c <__aeabi_i2d>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4620      	mov	r0, r4
 800153e:	4629      	mov	r1, r5
 8001540:	f7ff f930 	bl	80007a4 <__aeabi_ddiv>
 8001544:	4603      	mov	r3, r0
 8001546:	460c      	mov	r4, r1
 8001548:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pre_pos = cur_pos;
 800154c:	4a09      	ldr	r2, [pc, #36]	; (8001574 <velocity_update+0x74>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
	pre_time = cur_time;
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <velocity_update+0x70>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a08      	ldr	r2, [pc, #32]	; (8001578 <velocity_update+0x78>)
 8001558:	6013      	str	r3, [r2, #0]

	return velo;
 800155a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800155e:	ec44 3b17 	vmov	d7, r3, r4

}
 8001562:	eeb0 0a47 	vmov.f32	s0, s14
 8001566:	eef0 0a67 	vmov.f32	s1, s15
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bdb0      	pop	{r4, r5, r7, pc}
 8001570:	200022f0 	.word	0x200022f0
 8001574:	200022f4 	.word	0x200022f4
 8001578:	200022f8 	.word	0x200022f8
 800157c:	00000000 	.word	0x00000000

08001580 <ppms_to_rpm>:

double ppms_to_rpm(double input){
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	ed87 0b00 	vstr	d0, [r7]
	return input*60e6/(enc_cnt);
 800158a:	a30e      	add	r3, pc, #56	; (adr r3, 80015c4 <ppms_to_rpm+0x44>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001594:	f7fe ffdc 	bl	8000550 <__aeabi_dmul>
 8001598:	4603      	mov	r3, r0
 800159a:	460c      	mov	r4, r1
 800159c:	4618      	mov	r0, r3
 800159e:	4621      	mov	r1, r4
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <ppms_to_rpm+0x40>)
 80015a6:	f7ff f8fd 	bl	80007a4 <__aeabi_ddiv>
 80015aa:	4603      	mov	r3, r0
 80015ac:	460c      	mov	r4, r1
 80015ae:	ec44 3b17 	vmov	d7, r3, r4
}
 80015b2:	eeb0 0a47 	vmov.f32	s0, s14
 80015b6:	eef0 0a67 	vmov.f32	s1, s15
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd90      	pop	{r4, r7, pc}
 80015c0:	40a80000 	.word	0x40a80000
 80015c4:	00000000 	.word	0x00000000
 80015c8:	418c9c38 	.word	0x418c9c38

080015cc <low_pass_process>:

double low_pass_process(LowPass *lowpass,double input){
 80015cc:	b5b0      	push	{r4, r5, r7, lr}
 80015ce:	b08c      	sub	sp, #48	; 0x30
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	ed87 0b00 	vstr	d0, [r7]

	double cur_time = micros();
 80015d8:	f000 fa56 	bl	8001a88 <micros>
 80015dc:	4603      	mov	r3, r0
 80015de:	460c      	mov	r4, r1
 80015e0:	4618      	mov	r0, r3
 80015e2:	4621      	mov	r1, r4
 80015e4:	f7fe ff7e 	bl	80004e4 <__aeabi_ul2d>
 80015e8:	4603      	mov	r3, r0
 80015ea:	460c      	mov	r4, r1
 80015ec:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	double delta_t = cur_time - lowpass->pre_time;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80015f6:	461a      	mov	r2, r3
 80015f8:	4623      	mov	r3, r4
 80015fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015fe:	f7fe fdef 	bl	80001e0 <__aeabi_dsub>
 8001602:	4603      	mov	r3, r0
 8001604:	460c      	mov	r4, r1
 8001606:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double k = (lowpass->Wc*delta_t)/(2+ lowpass->Wc*delta_t);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001610:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001614:	f7fe ff9c 	bl	8000550 <__aeabi_dmul>
 8001618:	4603      	mov	r3, r0
 800161a:	460c      	mov	r4, r1
 800161c:	4625      	mov	r5, r4
 800161e:	461c      	mov	r4, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001626:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800162a:	f7fe ff91 	bl	8000550 <__aeabi_dmul>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800163e:	f7fe fdd1 	bl	80001e4 <__adddf3>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4620      	mov	r0, r4
 8001648:	4629      	mov	r1, r5
 800164a:	f7ff f8ab 	bl	80007a4 <__aeabi_ddiv>
 800164e:	4603      	mov	r3, r0
 8001650:	460c      	mov	r4, r1
 8001652:	e9c7 3406 	strd	r3, r4, [r7, #24]

	double output = (1 - 2*k)*(lowpass->pre_output) +k*(input+lowpass->pre_input);
 8001656:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	f7fe fdc1 	bl	80001e4 <__adddf3>
 8001662:	4603      	mov	r3, r0
 8001664:	460c      	mov	r4, r1
 8001666:	461a      	mov	r2, r3
 8001668:	4623      	mov	r3, r4
 800166a:	f04f 0000 	mov.w	r0, #0
 800166e:	4922      	ldr	r1, [pc, #136]	; (80016f8 <low_pass_process+0x12c>)
 8001670:	f7fe fdb6 	bl	80001e0 <__aeabi_dsub>
 8001674:	4603      	mov	r3, r0
 8001676:	460c      	mov	r4, r1
 8001678:	4618      	mov	r0, r3
 800167a:	4621      	mov	r1, r4
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001682:	461a      	mov	r2, r3
 8001684:	4623      	mov	r3, r4
 8001686:	f7fe ff63 	bl	8000550 <__aeabi_dmul>
 800168a:	4603      	mov	r3, r0
 800168c:	460c      	mov	r4, r1
 800168e:	4625      	mov	r5, r4
 8001690:	461c      	mov	r4, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800169c:	f7fe fda2 	bl	80001e4 <__adddf3>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016ac:	f7fe ff50 	bl	8000550 <__aeabi_dmul>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4620      	mov	r0, r4
 80016b6:	4629      	mov	r1, r5
 80016b8:	f7fe fd94 	bl	80001e4 <__adddf3>
 80016bc:	4603      	mov	r3, r0
 80016be:	460c      	mov	r4, r1
 80016c0:	e9c7 3404 	strd	r3, r4, [r7, #16]

	lowpass->pre_time = cur_time;
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80016ca:	e9c2 3404 	strd	r3, r4, [r2, #16]
	lowpass->pre_input = input;
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80016d4:	e9c2 3400 	strd	r3, r4, [r2]
	lowpass->pre_output = output;
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80016de:	e9c2 3402 	strd	r3, r4, [r2, #8]

	return output;
 80016e2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80016e6:	ec44 3b17 	vmov	d7, r3, r4
}
 80016ea:	eeb0 0a47 	vmov.f32	s0, s14
 80016ee:	eef0 0a67 	vmov.f32	s1, s15
 80016f2:	3730      	adds	r7, #48	; 0x30
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bdb0      	pop	{r4, r5, r7, pc}
 80016f8:	3ff00000 	.word	0x3ff00000
 80016fc:	00000000 	.word	0x00000000

08001700 <targectory_cal>:
	return output;

}


void targectory_cal(double *datas,int *n,int start_pos,int stop_pos,double dt){
 8001700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001704:	b0a1      	sub	sp, #132	; 0x84
 8001706:	af00      	add	r7, sp, #0
 8001708:	6178      	str	r0, [r7, #20]
 800170a:	6139      	str	r1, [r7, #16]
 800170c:	60fa      	str	r2, [r7, #12]
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	ed87 0b00 	vstr	d0, [r7]
    double v_max = 10*6;            // degree per sec
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	4ba5      	ldr	r3, [pc, #660]	; (80019b0 <targectory_cal+0x2b0>)
 800171a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    double a_max = 0.5 * 57.296;    // degree per sec^2
 800171e:	a3a2      	add	r3, pc, #648	; (adr r3, 80019a8 <targectory_cal+0x2a8>)
 8001720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001724:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    int dis = (stop_pos - start_pos +360)%360;
 8001728:	68ba      	ldr	r2, [r7, #8]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001732:	4aa0      	ldr	r2, [pc, #640]	; (80019b4 <targectory_cal+0x2b4>)
 8001734:	fb82 1203 	smull	r1, r2, r2, r3
 8001738:	441a      	add	r2, r3
 800173a:	1211      	asrs	r1, r2, #8
 800173c:	17da      	asrs	r2, r3, #31
 800173e:	1a8a      	subs	r2, r1, r2
 8001740:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001744:	fb01 f202 	mul.w	r2, r1, r2
 8001748:	1a9b      	subs	r3, r3, r2
 800174a:	67fb      	str	r3, [r7, #124]	; 0x7c
    int inverse = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	67bb      	str	r3, [r7, #120]	; 0x78
    if ((start_pos - stop_pos +360)%360 < dis){
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800175a:	4a96      	ldr	r2, [pc, #600]	; (80019b4 <targectory_cal+0x2b4>)
 800175c:	fb82 1203 	smull	r1, r2, r2, r3
 8001760:	441a      	add	r2, r3
 8001762:	1211      	asrs	r1, r2, #8
 8001764:	17da      	asrs	r2, r3, #31
 8001766:	1a8a      	subs	r2, r1, r2
 8001768:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800176c:	fb01 f202 	mul.w	r2, r1, r2
 8001770:	1a9a      	subs	r2, r3, r2
 8001772:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001774:	4293      	cmp	r3, r2
 8001776:	dd13      	ble.n	80017a0 <targectory_cal+0xa0>
        inverse = 1;
 8001778:	2301      	movs	r3, #1
 800177a:	67bb      	str	r3, [r7, #120]	; 0x78
        dis = (start_pos - stop_pos +360)%360;
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001786:	4a8b      	ldr	r2, [pc, #556]	; (80019b4 <targectory_cal+0x2b4>)
 8001788:	fb82 1203 	smull	r1, r2, r2, r3
 800178c:	441a      	add	r2, r3
 800178e:	1211      	asrs	r1, r2, #8
 8001790:	17da      	asrs	r2, r3, #31
 8001792:	1a8a      	subs	r2, r1, r2
 8001794:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001798:	fb01 f202 	mul.w	r2, r1, r2
 800179c:	1a9b      	subs	r3, r3, r2
 800179e:	67fb      	str	r3, [r7, #124]	; 0x7c
    }
    start_pos = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
    stop_pos = dis;
 80017a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017a6:	60bb      	str	r3, [r7, #8]

    if(dis < (v_max*v_max)/a_max){
 80017a8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80017aa:	f7fe fe67 	bl	800047c <__aeabi_i2d>
 80017ae:	4680      	mov	r8, r0
 80017b0:	4689      	mov	r9, r1
 80017b2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80017b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80017ba:	f7fe fec9 	bl	8000550 <__aeabi_dmul>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017ca:	f7fe ffeb 	bl	80007a4 <__aeabi_ddiv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4640      	mov	r0, r8
 80017d4:	4649      	mov	r1, r9
 80017d6:	f7ff f92d 	bl	8000a34 <__aeabi_dcmplt>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d079      	beq.n	80018d4 <targectory_cal+0x1d4>
        double ta = sqrt(dis/a_max);
 80017e0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80017e2:	f7fe fe4b 	bl	800047c <__aeabi_i2d>
 80017e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017ea:	f7fe ffdb 	bl	80007a4 <__aeabi_ddiv>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	ec43 2b17 	vmov	d7, r2, r3
 80017f6:	eeb0 0a47 	vmov.f32	s0, s14
 80017fa:	eef0 0a67 	vmov.f32	s1, s15
 80017fe:	f002 fe3f 	bl	8004480 <sqrt>
 8001802:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
        double T = ta*2;
 8001806:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	f7fe fce9 	bl	80001e4 <__adddf3>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	e9c7 2308 	strd	r2, r3, [r7, #32]
        double tf = T;
 800181a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800181e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        double t = 0;
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
        *n = (int)(T/dt);
 800182e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001832:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001836:	f7fe ffb5 	bl	80007a4 <__aeabi_ddiv>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f935 	bl	8000ab0 <__aeabi_d2iz>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	601a      	str	r2, [r3, #0]
        for(int i = 0;i <*n ;i++){
 800184c:	2300      	movs	r3, #0
 800184e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001850:	e03a      	b.n	80018c8 <targectory_cal+0x1c8>
            if(t <= ta){
 8001852:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001856:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800185a:	f7ff f8f5 	bl	8000a48 <__aeabi_dcmple>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00e      	beq.n	8001882 <targectory_cal+0x182>
                datas[i] = a_max*t;
 8001864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	18d6      	adds	r6, r2, r3
 800186c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001870:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001874:	f7fe fe6c 	bl	8000550 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	e9c6 2300 	strd	r2, r3, [r6]
 8001880:	e015      	b.n	80018ae <targectory_cal+0x1ae>
            }
            else{
                datas[i] = a_max*(tf-t);
 8001882:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001886:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800188a:	f7fe fca9 	bl	80001e0 <__aeabi_dsub>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	18d6      	adds	r6, r2, r3
 800189e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80018a2:	f7fe fe55 	bl	8000550 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	e9c6 2300 	strd	r2, r3, [r6]
            }
            t += dt;
 80018ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018b2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80018b6:	f7fe fc95 	bl	80001e4 <__adddf3>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
        for(int i = 0;i <*n ;i++){
 80018c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018c4:	3301      	adds	r3, #1
 80018c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80018ce:	429a      	cmp	r2, r3
 80018d0:	dbbf      	blt.n	8001852 <targectory_cal+0x152>
 80018d2:	e0b7      	b.n	8001a44 <targectory_cal+0x344>
        }
    }
    else{
        double T = (dis*a_max + (v_max*v_max))/(a_max*v_max);
 80018d4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80018d6:	f7fe fdd1 	bl	800047c <__aeabi_i2d>
 80018da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80018de:	f7fe fe37 	bl	8000550 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4690      	mov	r8, r2
 80018e8:	4699      	mov	r9, r3
 80018ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80018ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80018f2:	f7fe fe2d 	bl	8000550 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4640      	mov	r0, r8
 80018fc:	4649      	mov	r1, r9
 80018fe:	f7fe fc71 	bl	80001e4 <__adddf3>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4690      	mov	r8, r2
 8001908:	4699      	mov	r9, r3
 800190a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800190e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001912:	f7fe fe1d 	bl	8000550 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4640      	mov	r0, r8
 800191c:	4649      	mov	r1, r9
 800191e:	f7fe ff41 	bl	80007a4 <__aeabi_ddiv>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
        double ta = v_max/a_max;
 800192a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800192e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001932:	f7fe ff37 	bl	80007a4 <__aeabi_ddiv>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        double tf = T;
 800193e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001942:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        double t = 0;
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
        *n = (int)(T/dt);
 8001952:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001956:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800195a:	f7fe ff23 	bl	80007a4 <__aeabi_ddiv>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f8a3 	bl	8000ab0 <__aeabi_d2iz>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	601a      	str	r2, [r3, #0]
        for(int i = 0;i < *n;i++){
 8001970:	2300      	movs	r3, #0
 8001972:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001974:	e061      	b.n	8001a3a <targectory_cal+0x33a>
            if(t <= ta){
 8001976:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800197a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800197e:	f7ff f863 	bl	8000a48 <__aeabi_dcmple>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d017      	beq.n	80019b8 <targectory_cal+0x2b8>
                datas[i] = a_max*t;
 8001988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	18d6      	adds	r6, r2, r3
 8001990:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001994:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001998:	f7fe fdda 	bl	8000550 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	e9c6 2300 	strd	r2, r3, [r6]
 80019a4:	e03c      	b.n	8001a20 <targectory_cal+0x320>
 80019a6:	bf00      	nop
 80019a8:	53f7ced9 	.word	0x53f7ced9
 80019ac:	403ca5e3 	.word	0x403ca5e3
 80019b0:	404e0000 	.word	0x404e0000
 80019b4:	b60b60b7 	.word	0xb60b60b7
            }
            else if(t <= tf-ta){
 80019b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019bc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80019c0:	f7fe fc0e 	bl	80001e0 <__aeabi_dsub>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80019cc:	f7ff f83c 	bl	8000a48 <__aeabi_dcmple>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00e      	beq.n	80019f4 <targectory_cal+0x2f4>
                datas[i] = a_max*ta;
 80019d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	18d6      	adds	r6, r2, r3
 80019de:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80019e6:	f7fe fdb3 	bl	8000550 <__aeabi_dmul>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	e9c6 2300 	strd	r2, r3, [r6]
 80019f2:	e015      	b.n	8001a20 <targectory_cal+0x320>
            }
            else{
                datas[i] = a_max*(tf-t);
 80019f4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80019f8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80019fc:	f7fe fbf0 	bl	80001e0 <__aeabi_dsub>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	18d6      	adds	r6, r2, r3
 8001a10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a14:	f7fe fd9c 	bl	8000550 <__aeabi_dmul>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	e9c6 2300 	strd	r2, r3, [r6]
            }
            t += dt;
 8001a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a24:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001a28:	f7fe fbdc 	bl	80001e4 <__adddf3>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
        for(int i = 0;i < *n;i++){
 8001a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a36:	3301      	adds	r3, #1
 8001a38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a40:	429a      	cmp	r2, r3
 8001a42:	db98      	blt.n	8001976 <targectory_cal+0x276>
        }
    }

    if(inverse){
 8001a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d019      	beq.n	8001a7e <targectory_cal+0x37e>
        for(int i = 0;i<*n;i++){
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a4e:	e011      	b.n	8001a74 <targectory_cal+0x374>
            datas[i] *= -1;
 8001a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	4413      	add	r3, r2
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001a5e:	00c9      	lsls	r1, r1, #3
 8001a60:	6978      	ldr	r0, [r7, #20]
 8001a62:	4401      	add	r1, r0
 8001a64:	4614      	mov	r4, r2
 8001a66:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001a6a:	e9c1 4500 	strd	r4, r5, [r1]
        for(int i = 0;i<*n;i++){
 8001a6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a70:	3301      	adds	r3, #1
 8001a72:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	dbe8      	blt.n	8001a50 <targectory_cal+0x350>
        }
    }
}
 8001a7e:	bf00      	nop
 8001a80:	3784      	adds	r7, #132	; 0x84
 8001a82:	46bd      	mov	sp, r7
 8001a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001a88 <micros>:





uint64_t micros(){
 8001a88:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8001a8c:	af00      	add	r7, sp, #0
	return _micro + TIM5->CNT;
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <micros+0x2c>)
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	4619      	mov	r1, r3
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <micros+0x30>)
 8001a9a:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001a9e:	eb1b 0301 	adds.w	r3, fp, r1
 8001aa2:	eb4c 0402 	adc.w	r4, ip, r2
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40000c00 	.word	0x40000c00
 8001ab8:	20000110 	.word	0x20000110

08001abc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001abc:	b490      	push	{r4, r7}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

	if(htim == &htim5){
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a09      	ldr	r2, [pc, #36]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d109      	bne.n	8001ae0 <HAL_TIM_PeriodElapsedCallback+0x24>
		_micro += ((uint64_t)1<<32)-1;
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ace:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001ad2:	f111 33ff 	adds.w	r3, r1, #4294967295
 8001ad6:	f142 0400 	adc.w	r4, r2, #0
 8001ada:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001adc:	e9c2 3400 	strd	r3, r4, [r2]
	}

}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc90      	pop	{r4, r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	200022fc 	.word	0x200022fc
 8001af0:	20000110 	.word	0x20000110

08001af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001afa:	e7fe      	b.n	8001afa <Error_Handler+0x6>

08001afc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <HAL_MspInit+0x4c>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <HAL_MspInit+0x4c>)
 8001b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b10:	6453      	str	r3, [r2, #68]	; 0x44
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <HAL_MspInit+0x4c>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	603b      	str	r3, [r7, #0]
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_MspInit+0x4c>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_MspInit+0x4c>)
 8001b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_MspInit+0x4c>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b3a:	2007      	movs	r0, #7
 8001b3c:	f000 fac4 	bl	80020c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40023800 	.word	0x40023800

08001b4c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a19      	ldr	r2, [pc, #100]	; (8001bd0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d12c      	bne.n	8001bc8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a17      	ldr	r2, [pc, #92]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a10      	ldr	r2, [pc, #64]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ba6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001bc4:	f000 fac2 	bl	800214c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001bc8:	bf00      	nop
 8001bca:	3728      	adds	r7, #40	; 0x28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020000 	.word	0x40020000

08001bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a18      	ldr	r2, [pc, #96]	; (8001c4c <HAL_TIM_Base_MspInit+0x70>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d10e      	bne.n	8001c0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <HAL_TIM_Base_MspInit+0x74>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a16      	ldr	r2, [pc, #88]	; (8001c50 <HAL_TIM_Base_MspInit+0x74>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <HAL_TIM_Base_MspInit+0x74>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001c0a:	e01a      	b.n	8001c42 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a10      	ldr	r2, [pc, #64]	; (8001c54 <HAL_TIM_Base_MspInit+0x78>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d115      	bne.n	8001c42 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_TIM_Base_MspInit+0x74>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a0c      	ldr	r2, [pc, #48]	; (8001c50 <HAL_TIM_Base_MspInit+0x74>)
 8001c20:	f043 0308 	orr.w	r3, r3, #8
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_TIM_Base_MspInit+0x74>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	2032      	movs	r0, #50	; 0x32
 8001c38:	f000 fa51 	bl	80020de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c3c:	2032      	movs	r0, #50	; 0x32
 8001c3e:	f000 fa6a 	bl	8002116 <HAL_NVIC_EnableIRQ>
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40000400 	.word	0x40000400
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40000c00 	.word	0x40000c00

08001c58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <HAL_TIM_MspPostInit+0x68>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d11d      	bne.n	8001cb6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_TIM_MspPostInit+0x6c>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a10      	ldr	r2, [pc, #64]	; (8001cc4 <HAL_TIM_MspPostInit+0x6c>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_TIM_MspPostInit+0x6c>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c96:	23c0      	movs	r3, #192	; 0xc0
 8001c98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <HAL_TIM_MspPostInit+0x70>)
 8001cb2:	f000 fa4b 	bl	800214c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cb6:	bf00      	nop
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40000400 	.word	0x40000400
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020000 	.word	0x40020000

08001ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a19      	ldr	r2, [pc, #100]	; (8001d50 <HAL_UART_MspInit+0x84>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d12b      	bne.n	8001d46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <HAL_UART_MspInit+0x88>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <HAL_UART_MspInit+0x88>)
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_UART_MspInit+0x88>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_UART_MspInit+0x88>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <HAL_UART_MspInit+0x88>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_UART_MspInit+0x88>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d26:	230c      	movs	r3, #12
 8001d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d32:	2303      	movs	r3, #3
 8001d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d36:	2307      	movs	r3, #7
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4805      	ldr	r0, [pc, #20]	; (8001d58 <HAL_UART_MspInit+0x8c>)
 8001d42:	f000 fa03 	bl	800214c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d46:	bf00      	nop
 8001d48:	3728      	adds	r7, #40	; 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40004400 	.word	0x40004400
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020000 	.word	0x40020000

08001d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <NMI_Handler+0x4>

08001d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <HardFault_Handler+0x4>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <MemManage_Handler+0x4>

08001d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <BusFault_Handler+0x4>

08001d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <UsageFault_Handler+0x4>

08001d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da8:	f000 f89e 	bl	8001ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <TIM5_IRQHandler+0x10>)
 8001db6:	f001 f96a 	bl	800308e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200022fc 	.word	0x200022fc

08001dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <SystemInit+0x28>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dce:	4a07      	ldr	r2, [pc, #28]	; (8001dec <SystemInit+0x28>)
 8001dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <SystemInit+0x28>)
 8001dda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dde:	609a      	str	r2, [r3, #8]
#endif
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001df4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001df6:	e003      	b.n	8001e00 <LoopCopyDataInit>

08001df8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001dfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001dfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001dfe:	3104      	adds	r1, #4

08001e00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e00:	480b      	ldr	r0, [pc, #44]	; (8001e30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e08:	d3f6      	bcc.n	8001df8 <CopyDataInit>
  ldr  r2, =_sbss
 8001e0a:	4a0b      	ldr	r2, [pc, #44]	; (8001e38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e0c:	e002      	b.n	8001e14 <LoopFillZerobss>

08001e0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e10:	f842 3b04 	str.w	r3, [r2], #4

08001e14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e18:	d3f9      	bcc.n	8001e0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e1a:	f7ff ffd3 	bl	8001dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e1e:	f002 fb03 	bl	8004428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e22:	f7fe ffed 	bl	8000e00 <main>
  bx  lr    
 8001e26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e2c:	080046e0 	.word	0x080046e0
  ldr  r0, =_sdata
 8001e30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e34:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 8001e38:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 8001e3c:	20002400 	.word	0x20002400

08001e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e40:	e7fe      	b.n	8001e40 <ADC_IRQHandler>
	...

08001e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e48:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_Init+0x40>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	; (8001e84 <HAL_Init+0x40>)
 8001e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_Init+0x40>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <HAL_Init+0x40>)
 8001e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <HAL_Init+0x40>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a07      	ldr	r2, [pc, #28]	; (8001e84 <HAL_Init+0x40>)
 8001e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e6c:	2003      	movs	r0, #3
 8001e6e:	f000 f92b 	bl	80020c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e72:	2000      	movs	r0, #0
 8001e74:	f000 f808 	bl	8001e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e78:	f7ff fe40 	bl	8001afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023c00 	.word	0x40023c00

08001e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_InitTick+0x54>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_InitTick+0x58>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 f943 	bl	8002132 <HAL_SYSTICK_Config>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e00e      	b.n	8001ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b0f      	cmp	r3, #15
 8001eba:	d80a      	bhi.n	8001ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec4:	f000 f90b 	bl	80020de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec8:	4a06      	ldr	r2, [pc, #24]	; (8001ee4 <HAL_InitTick+0x5c>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e000      	b.n	8001ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000078 	.word	0x20000078
 8001ee0:	20000080 	.word	0x20000080
 8001ee4:	2000007c 	.word	0x2000007c

08001ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_IncTick+0x20>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_IncTick+0x24>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <HAL_IncTick+0x24>)
 8001efa:	6013      	str	r3, [r2, #0]
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000080 	.word	0x20000080
 8001f0c:	200023fc 	.word	0x200023fc

08001f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return uwTick;
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <HAL_GetTick+0x14>)
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	200023fc 	.word	0x200023fc

08001f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f44:	4013      	ands	r3, r2
 8001f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5a:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <__NVIC_SetPriorityGrouping+0x44>)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	60d3      	str	r3, [r2, #12]
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <__NVIC_GetPriorityGrouping+0x18>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	f003 0307 	and.w	r3, r3, #7
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	db0b      	blt.n	8001fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	f003 021f 	and.w	r2, r3, #31
 8001fa4:	4907      	ldr	r1, [pc, #28]	; (8001fc4 <__NVIC_EnableIRQ+0x38>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	2001      	movs	r0, #1
 8001fae:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	db0a      	blt.n	8001ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	490c      	ldr	r1, [pc, #48]	; (8002014 <__NVIC_SetPriority+0x4c>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	0112      	lsls	r2, r2, #4
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	440b      	add	r3, r1
 8001fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff0:	e00a      	b.n	8002008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4908      	ldr	r1, [pc, #32]	; (8002018 <__NVIC_SetPriority+0x50>)
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	3b04      	subs	r3, #4
 8002000:	0112      	lsls	r2, r2, #4
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	440b      	add	r3, r1
 8002006:	761a      	strb	r2, [r3, #24]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000e100 	.word	0xe000e100
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f1c3 0307 	rsb	r3, r3, #7
 8002036:	2b04      	cmp	r3, #4
 8002038:	bf28      	it	cs
 800203a:	2304      	movcs	r3, #4
 800203c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3304      	adds	r3, #4
 8002042:	2b06      	cmp	r3, #6
 8002044:	d902      	bls.n	800204c <NVIC_EncodePriority+0x30>
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3b03      	subs	r3, #3
 800204a:	e000      	b.n	800204e <NVIC_EncodePriority+0x32>
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	f04f 32ff 	mov.w	r2, #4294967295
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	401a      	ands	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002064:	f04f 31ff 	mov.w	r1, #4294967295
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	43d9      	mvns	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	4313      	orrs	r3, r2
         );
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002094:	d301      	bcc.n	800209a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002096:	2301      	movs	r3, #1
 8002098:	e00f      	b.n	80020ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209a:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <SysTick_Config+0x40>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3b01      	subs	r3, #1
 80020a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a2:	210f      	movs	r1, #15
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	f7ff ff8e 	bl	8001fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <SysTick_Config+0x40>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b2:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <SysTick_Config+0x40>)
 80020b4:	2207      	movs	r2, #7
 80020b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	e000e010 	.word	0xe000e010

080020c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ff29 	bl	8001f28 <__NVIC_SetPriorityGrouping>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020de:	b580      	push	{r7, lr}
 80020e0:	b086      	sub	sp, #24
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f0:	f7ff ff3e 	bl	8001f70 <__NVIC_GetPriorityGrouping>
 80020f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	6978      	ldr	r0, [r7, #20]
 80020fc:	f7ff ff8e 	bl	800201c <NVIC_EncodePriority>
 8002100:	4602      	mov	r2, r0
 8002102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff5d 	bl	8001fc8 <__NVIC_SetPriority>
}
 800210e:	bf00      	nop
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff31 	bl	8001f8c <__NVIC_EnableIRQ>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff ffa2 	bl	8002084 <SysTick_Config>
 8002140:	4603      	mov	r3, r0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	; 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	e159      	b.n	800241c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002168:	2201      	movs	r2, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	429a      	cmp	r2, r3
 8002182:	f040 8148 	bne.w	8002416 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d00b      	beq.n	80021a6 <HAL_GPIO_Init+0x5a>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d007      	beq.n	80021a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800219a:	2b11      	cmp	r3, #17
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b12      	cmp	r3, #18
 80021a4:	d130      	bne.n	8002208 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	2203      	movs	r2, #3
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021dc:	2201      	movs	r2, #1
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 0201 	and.w	r2, r3, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0xfc>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b12      	cmp	r3, #18
 8002246:	d123      	bne.n	8002290 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	08da      	lsrs	r2, r3, #3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3208      	adds	r2, #8
 8002250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	220f      	movs	r2, #15
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	08da      	lsrs	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3208      	adds	r2, #8
 800228a:	69b9      	ldr	r1, [r7, #24]
 800228c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0203 	and.w	r2, r3, #3
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 80a2 	beq.w	8002416 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b56      	ldr	r3, [pc, #344]	; (8002430 <HAL_GPIO_Init+0x2e4>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	4a55      	ldr	r2, [pc, #340]	; (8002430 <HAL_GPIO_Init+0x2e4>)
 80022dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e0:	6453      	str	r3, [r2, #68]	; 0x44
 80022e2:	4b53      	ldr	r3, [pc, #332]	; (8002430 <HAL_GPIO_Init+0x2e4>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ee:	4a51      	ldr	r2, [pc, #324]	; (8002434 <HAL_GPIO_Init+0x2e8>)
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	089b      	lsrs	r3, r3, #2
 80022f4:	3302      	adds	r3, #2
 80022f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	220f      	movs	r2, #15
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a48      	ldr	r2, [pc, #288]	; (8002438 <HAL_GPIO_Init+0x2ec>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d019      	beq.n	800234e <HAL_GPIO_Init+0x202>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a47      	ldr	r2, [pc, #284]	; (800243c <HAL_GPIO_Init+0x2f0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <HAL_GPIO_Init+0x1fe>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a46      	ldr	r2, [pc, #280]	; (8002440 <HAL_GPIO_Init+0x2f4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00d      	beq.n	8002346 <HAL_GPIO_Init+0x1fa>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a45      	ldr	r2, [pc, #276]	; (8002444 <HAL_GPIO_Init+0x2f8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d007      	beq.n	8002342 <HAL_GPIO_Init+0x1f6>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a44      	ldr	r2, [pc, #272]	; (8002448 <HAL_GPIO_Init+0x2fc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d101      	bne.n	800233e <HAL_GPIO_Init+0x1f2>
 800233a:	2304      	movs	r3, #4
 800233c:	e008      	b.n	8002350 <HAL_GPIO_Init+0x204>
 800233e:	2307      	movs	r3, #7
 8002340:	e006      	b.n	8002350 <HAL_GPIO_Init+0x204>
 8002342:	2303      	movs	r3, #3
 8002344:	e004      	b.n	8002350 <HAL_GPIO_Init+0x204>
 8002346:	2302      	movs	r3, #2
 8002348:	e002      	b.n	8002350 <HAL_GPIO_Init+0x204>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_GPIO_Init+0x204>
 800234e:	2300      	movs	r3, #0
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	f002 0203 	and.w	r2, r2, #3
 8002356:	0092      	lsls	r2, r2, #2
 8002358:	4093      	lsls	r3, r2
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002360:	4934      	ldr	r1, [pc, #208]	; (8002434 <HAL_GPIO_Init+0x2e8>)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	3302      	adds	r3, #2
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800236e:	4b37      	ldr	r3, [pc, #220]	; (800244c <HAL_GPIO_Init+0x300>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002392:	4a2e      	ldr	r2, [pc, #184]	; (800244c <HAL_GPIO_Init+0x300>)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002398:	4b2c      	ldr	r3, [pc, #176]	; (800244c <HAL_GPIO_Init+0x300>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023bc:	4a23      	ldr	r2, [pc, #140]	; (800244c <HAL_GPIO_Init+0x300>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023c2:	4b22      	ldr	r3, [pc, #136]	; (800244c <HAL_GPIO_Init+0x300>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023e6:	4a19      	ldr	r2, [pc, #100]	; (800244c <HAL_GPIO_Init+0x300>)
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <HAL_GPIO_Init+0x300>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002410:	4a0e      	ldr	r2, [pc, #56]	; (800244c <HAL_GPIO_Init+0x300>)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3301      	adds	r3, #1
 800241a:	61fb      	str	r3, [r7, #28]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	2b0f      	cmp	r3, #15
 8002420:	f67f aea2 	bls.w	8002168 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002424:	bf00      	nop
 8002426:	3724      	adds	r7, #36	; 0x24
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	40023800 	.word	0x40023800
 8002434:	40013800 	.word	0x40013800
 8002438:	40020000 	.word	0x40020000
 800243c:	40020400 	.word	0x40020400
 8002440:	40020800 	.word	0x40020800
 8002444:	40020c00 	.word	0x40020c00
 8002448:	40021000 	.word	0x40021000
 800244c:	40013c00 	.word	0x40013c00

08002450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
 800245c:	4613      	mov	r3, r2
 800245e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002460:	787b      	ldrb	r3, [r7, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800246c:	e003      	b.n	8002476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	041a      	lsls	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	619a      	str	r2, [r3, #24]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e25b      	b.n	800294e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d075      	beq.n	800258e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024a2:	4ba3      	ldr	r3, [pc, #652]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d00c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ae:	4ba0      	ldr	r3, [pc, #640]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d112      	bne.n	80024e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ba:	4b9d      	ldr	r3, [pc, #628]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c6:	d10b      	bne.n	80024e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	4b99      	ldr	r3, [pc, #612]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d05b      	beq.n	800258c <HAL_RCC_OscConfig+0x108>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d157      	bne.n	800258c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e236      	b.n	800294e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e8:	d106      	bne.n	80024f8 <HAL_RCC_OscConfig+0x74>
 80024ea:	4b91      	ldr	r3, [pc, #580]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a90      	ldr	r2, [pc, #576]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e01d      	b.n	8002534 <HAL_RCC_OscConfig+0xb0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x98>
 8002502:	4b8b      	ldr	r3, [pc, #556]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a8a      	ldr	r2, [pc, #552]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b88      	ldr	r3, [pc, #544]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a87      	ldr	r2, [pc, #540]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e00b      	b.n	8002534 <HAL_RCC_OscConfig+0xb0>
 800251c:	4b84      	ldr	r3, [pc, #528]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a83      	ldr	r2, [pc, #524]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b81      	ldr	r3, [pc, #516]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a80      	ldr	r2, [pc, #512]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 800252e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d013      	beq.n	8002564 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7ff fce8 	bl	8001f10 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002544:	f7ff fce4 	bl	8001f10 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e1fb      	b.n	800294e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4b76      	ldr	r3, [pc, #472]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0xc0>
 8002562:	e014      	b.n	800258e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f7ff fcd4 	bl	8001f10 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800256c:	f7ff fcd0 	bl	8001f10 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	; 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e1e7      	b.n	800294e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	4b6c      	ldr	r3, [pc, #432]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0xe8>
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d063      	beq.n	8002662 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800259a:	4b65      	ldr	r3, [pc, #404]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a6:	4b62      	ldr	r3, [pc, #392]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d11c      	bne.n	80025ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b2:	4b5f      	ldr	r3, [pc, #380]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d116      	bne.n	80025ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025be:	4b5c      	ldr	r3, [pc, #368]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_RCC_OscConfig+0x152>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e1bb      	b.n	800294e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d6:	4b56      	ldr	r3, [pc, #344]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4952      	ldr	r1, [pc, #328]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	e03a      	b.n	8002662 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d020      	beq.n	8002636 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f4:	4b4f      	ldr	r3, [pc, #316]	; (8002734 <HAL_RCC_OscConfig+0x2b0>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fa:	f7ff fc89 	bl	8001f10 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002602:	f7ff fc85 	bl	8001f10 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e19c      	b.n	800294e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	4b46      	ldr	r3, [pc, #280]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002620:	4b43      	ldr	r3, [pc, #268]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4940      	ldr	r1, [pc, #256]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]
 8002634:	e015      	b.n	8002662 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002636:	4b3f      	ldr	r3, [pc, #252]	; (8002734 <HAL_RCC_OscConfig+0x2b0>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7ff fc68 	bl	8001f10 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002644:	f7ff fc64 	bl	8001f10 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e17b      	b.n	800294e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	4b36      	ldr	r3, [pc, #216]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d030      	beq.n	80026d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d016      	beq.n	80026a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002676:	4b30      	ldr	r3, [pc, #192]	; (8002738 <HAL_RCC_OscConfig+0x2b4>)
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7ff fc48 	bl	8001f10 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002684:	f7ff fc44 	bl	8001f10 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e15b      	b.n	800294e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	4b26      	ldr	r3, [pc, #152]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x200>
 80026a2:	e015      	b.n	80026d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a4:	4b24      	ldr	r3, [pc, #144]	; (8002738 <HAL_RCC_OscConfig+0x2b4>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026aa:	f7ff fc31 	bl	8001f10 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b2:	f7ff fc2d 	bl	8001f10 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e144      	b.n	800294e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c4:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80026c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f0      	bne.n	80026b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80a0 	beq.w	800281e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026e2:	4b13      	ldr	r3, [pc, #76]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10f      	bne.n	800270e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fc:	6413      	str	r3, [r2, #64]	; 0x40
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <HAL_RCC_OscConfig+0x2ac>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800270a:	2301      	movs	r3, #1
 800270c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_OscConfig+0x2b8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d121      	bne.n	800275e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_RCC_OscConfig+0x2b8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a07      	ldr	r2, [pc, #28]	; (800273c <HAL_RCC_OscConfig+0x2b8>)
 8002720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002726:	f7ff fbf3 	bl	8001f10 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272c:	e011      	b.n	8002752 <HAL_RCC_OscConfig+0x2ce>
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	42470000 	.word	0x42470000
 8002738:	42470e80 	.word	0x42470e80
 800273c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002740:	f7ff fbe6 	bl	8001f10 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e0fd      	b.n	800294e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002752:	4b81      	ldr	r3, [pc, #516]	; (8002958 <HAL_RCC_OscConfig+0x4d4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d106      	bne.n	8002774 <HAL_RCC_OscConfig+0x2f0>
 8002766:	4b7d      	ldr	r3, [pc, #500]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	4a7c      	ldr	r2, [pc, #496]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6713      	str	r3, [r2, #112]	; 0x70
 8002772:	e01c      	b.n	80027ae <HAL_RCC_OscConfig+0x32a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b05      	cmp	r3, #5
 800277a:	d10c      	bne.n	8002796 <HAL_RCC_OscConfig+0x312>
 800277c:	4b77      	ldr	r3, [pc, #476]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	4a76      	ldr	r2, [pc, #472]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	6713      	str	r3, [r2, #112]	; 0x70
 8002788:	4b74      	ldr	r3, [pc, #464]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	4a73      	ldr	r2, [pc, #460]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6713      	str	r3, [r2, #112]	; 0x70
 8002794:	e00b      	b.n	80027ae <HAL_RCC_OscConfig+0x32a>
 8002796:	4b71      	ldr	r3, [pc, #452]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	4a70      	ldr	r2, [pc, #448]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70
 80027a2:	4b6e      	ldr	r3, [pc, #440]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	4a6d      	ldr	r2, [pc, #436]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d015      	beq.n	80027e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b6:	f7ff fbab 	bl	8001f10 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7ff fba7 	bl	8001f10 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e0bc      	b.n	800294e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d4:	4b61      	ldr	r3, [pc, #388]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ee      	beq.n	80027be <HAL_RCC_OscConfig+0x33a>
 80027e0:	e014      	b.n	800280c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e2:	f7ff fb95 	bl	8001f10 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e8:	e00a      	b.n	8002800 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7ff fb91 	bl	8001f10 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e0a6      	b.n	800294e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002800:	4b56      	ldr	r3, [pc, #344]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1ee      	bne.n	80027ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800280c:	7dfb      	ldrb	r3, [r7, #23]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d105      	bne.n	800281e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002812:	4b52      	ldr	r3, [pc, #328]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a51      	ldr	r2, [pc, #324]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 8002818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8092 	beq.w	800294c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002828:	4b4c      	ldr	r3, [pc, #304]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b08      	cmp	r3, #8
 8002832:	d05c      	beq.n	80028ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d141      	bne.n	80028c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283c:	4b48      	ldr	r3, [pc, #288]	; (8002960 <HAL_RCC_OscConfig+0x4dc>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002842:	f7ff fb65 	bl	8001f10 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800284a:	f7ff fb61 	bl	8001f10 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e078      	b.n	800294e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285c:	4b3f      	ldr	r3, [pc, #252]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f0      	bne.n	800284a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69da      	ldr	r2, [r3, #28]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	019b      	lsls	r3, r3, #6
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	085b      	lsrs	r3, r3, #1
 8002880:	3b01      	subs	r3, #1
 8002882:	041b      	lsls	r3, r3, #16
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288a:	061b      	lsls	r3, r3, #24
 800288c:	4933      	ldr	r1, [pc, #204]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002892:	4b33      	ldr	r3, [pc, #204]	; (8002960 <HAL_RCC_OscConfig+0x4dc>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7ff fb3a 	bl	8001f10 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a0:	f7ff fb36 	bl	8001f10 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e04d      	b.n	800294e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b2:	4b2a      	ldr	r3, [pc, #168]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x41c>
 80028be:	e045      	b.n	800294c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c0:	4b27      	ldr	r3, [pc, #156]	; (8002960 <HAL_RCC_OscConfig+0x4dc>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c6:	f7ff fb23 	bl	8001f10 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ce:	f7ff fb1f 	bl	8001f10 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e036      	b.n	800294e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e0:	4b1e      	ldr	r3, [pc, #120]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f0      	bne.n	80028ce <HAL_RCC_OscConfig+0x44a>
 80028ec:	e02e      	b.n	800294c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e029      	b.n	800294e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028fa:	4b18      	ldr	r3, [pc, #96]	; (800295c <HAL_RCC_OscConfig+0x4d8>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	429a      	cmp	r2, r3
 800290c:	d11c      	bne.n	8002948 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d115      	bne.n	8002948 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002922:	4013      	ands	r3, r2
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002928:	4293      	cmp	r3, r2
 800292a:	d10d      	bne.n	8002948 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d106      	bne.n	8002948 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40007000 	.word	0x40007000
 800295c:	40023800 	.word	0x40023800
 8002960:	42470060 	.word	0x42470060

08002964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0cc      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002978:	4b68      	ldr	r3, [pc, #416]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d90c      	bls.n	80029a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b65      	ldr	r3, [pc, #404]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b63      	ldr	r3, [pc, #396]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0b8      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b8:	4b59      	ldr	r3, [pc, #356]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4a58      	ldr	r2, [pc, #352]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029d0:	4b53      	ldr	r3, [pc, #332]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4a52      	ldr	r2, [pc, #328]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029dc:	4b50      	ldr	r3, [pc, #320]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	494d      	ldr	r1, [pc, #308]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d044      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a02:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d119      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e07f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d003      	beq.n	8002a22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a22:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e06f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a32:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e067      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a42:	4b37      	ldr	r3, [pc, #220]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f023 0203 	bic.w	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4934      	ldr	r1, [pc, #208]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a54:	f7ff fa5c 	bl	8001f10 <HAL_GetTick>
 8002a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a5c:	f7ff fa58 	bl	8001f10 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e04f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	4b2b      	ldr	r3, [pc, #172]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 020c 	and.w	r2, r3, #12
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d1eb      	bne.n	8002a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a84:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d20c      	bcs.n	8002aac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e032      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4916      	ldr	r1, [pc, #88]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ad6:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	490e      	ldr	r1, [pc, #56]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aea:	f000 f821 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 8002aee:	4601      	mov	r1, r0
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	5cd3      	ldrb	r3, [r2, r3]
 8002afe:	fa21 f303 	lsr.w	r3, r1, r3
 8002b02:	4a09      	ldr	r2, [pc, #36]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_RCC_ClockConfig+0x1c8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff f9bc 	bl	8001e88 <HAL_InitTick>

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023c00 	.word	0x40023c00
 8002b20:	40023800 	.word	0x40023800
 8002b24:	080046b0 	.word	0x080046b0
 8002b28:	20000078 	.word	0x20000078
 8002b2c:	2000007c 	.word	0x2000007c

08002b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b46:	4b63      	ldr	r3, [pc, #396]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d007      	beq.n	8002b62 <HAL_RCC_GetSysClockFreq+0x32>
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d008      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0x38>
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 80b4 	bne.w	8002cc4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b5c:	4b5e      	ldr	r3, [pc, #376]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b5e:	60bb      	str	r3, [r7, #8]
       break;
 8002b60:	e0b3      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b62:	4b5e      	ldr	r3, [pc, #376]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b64:	60bb      	str	r3, [r7, #8]
      break;
 8002b66:	e0b0      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b68:	4b5a      	ldr	r3, [pc, #360]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b72:	4b58      	ldr	r3, [pc, #352]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d04a      	beq.n	8002c14 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7e:	4b55      	ldr	r3, [pc, #340]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	099b      	lsrs	r3, r3, #6
 8002b84:	f04f 0400 	mov.w	r4, #0
 8002b88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	ea03 0501 	and.w	r5, r3, r1
 8002b94:	ea04 0602 	and.w	r6, r4, r2
 8002b98:	4629      	mov	r1, r5
 8002b9a:	4632      	mov	r2, r6
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	f04f 0400 	mov.w	r4, #0
 8002ba4:	0154      	lsls	r4, r2, #5
 8002ba6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002baa:	014b      	lsls	r3, r1, #5
 8002bac:	4619      	mov	r1, r3
 8002bae:	4622      	mov	r2, r4
 8002bb0:	1b49      	subs	r1, r1, r5
 8002bb2:	eb62 0206 	sbc.w	r2, r2, r6
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	f04f 0400 	mov.w	r4, #0
 8002bbe:	0194      	lsls	r4, r2, #6
 8002bc0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bc4:	018b      	lsls	r3, r1, #6
 8002bc6:	1a5b      	subs	r3, r3, r1
 8002bc8:	eb64 0402 	sbc.w	r4, r4, r2
 8002bcc:	f04f 0100 	mov.w	r1, #0
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	00e2      	lsls	r2, r4, #3
 8002bd6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bda:	00d9      	lsls	r1, r3, #3
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4614      	mov	r4, r2
 8002be0:	195b      	adds	r3, r3, r5
 8002be2:	eb44 0406 	adc.w	r4, r4, r6
 8002be6:	f04f 0100 	mov.w	r1, #0
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	0262      	lsls	r2, r4, #9
 8002bf0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002bf4:	0259      	lsls	r1, r3, #9
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4614      	mov	r4, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	4621      	mov	r1, r4
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f04f 0400 	mov.w	r4, #0
 8002c04:	461a      	mov	r2, r3
 8002c06:	4623      	mov	r3, r4
 8002c08:	f7fd ff7a 	bl	8000b00 <__aeabi_uldivmod>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	460c      	mov	r4, r1
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	e049      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c14:	4b2f      	ldr	r3, [pc, #188]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	099b      	lsrs	r3, r3, #6
 8002c1a:	f04f 0400 	mov.w	r4, #0
 8002c1e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	ea03 0501 	and.w	r5, r3, r1
 8002c2a:	ea04 0602 	and.w	r6, r4, r2
 8002c2e:	4629      	mov	r1, r5
 8002c30:	4632      	mov	r2, r6
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	f04f 0400 	mov.w	r4, #0
 8002c3a:	0154      	lsls	r4, r2, #5
 8002c3c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c40:	014b      	lsls	r3, r1, #5
 8002c42:	4619      	mov	r1, r3
 8002c44:	4622      	mov	r2, r4
 8002c46:	1b49      	subs	r1, r1, r5
 8002c48:	eb62 0206 	sbc.w	r2, r2, r6
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	f04f 0400 	mov.w	r4, #0
 8002c54:	0194      	lsls	r4, r2, #6
 8002c56:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c5a:	018b      	lsls	r3, r1, #6
 8002c5c:	1a5b      	subs	r3, r3, r1
 8002c5e:	eb64 0402 	sbc.w	r4, r4, r2
 8002c62:	f04f 0100 	mov.w	r1, #0
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	00e2      	lsls	r2, r4, #3
 8002c6c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c70:	00d9      	lsls	r1, r3, #3
 8002c72:	460b      	mov	r3, r1
 8002c74:	4614      	mov	r4, r2
 8002c76:	195b      	adds	r3, r3, r5
 8002c78:	eb44 0406 	adc.w	r4, r4, r6
 8002c7c:	f04f 0100 	mov.w	r1, #0
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	02a2      	lsls	r2, r4, #10
 8002c86:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c8a:	0299      	lsls	r1, r3, #10
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4614      	mov	r4, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	4621      	mov	r1, r4
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f04f 0400 	mov.w	r4, #0
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4623      	mov	r3, r4
 8002c9e:	f7fd ff2f 	bl	8000b00 <__aeabi_uldivmod>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	460c      	mov	r4, r1
 8002ca6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	0c1b      	lsrs	r3, r3, #16
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc0:	60bb      	str	r3, [r7, #8]
      break;
 8002cc2:	e002      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cc4:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cc6:	60bb      	str	r3, [r7, #8]
      break;
 8002cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cca:	68bb      	ldr	r3, [r7, #8]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	00f42400 	.word	0x00f42400
 8002cdc:	007a1200 	.word	0x007a1200

08002ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce4:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000078 	.word	0x20000078

08002cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cfc:	f7ff fff0 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 8002d00:	4601      	mov	r1, r0
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	0a9b      	lsrs	r3, r3, #10
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	4a03      	ldr	r2, [pc, #12]	; (8002d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d0e:	5cd3      	ldrb	r3, [r2, r3]
 8002d10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	080046c0 	.word	0x080046c0

08002d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d24:	f7ff ffdc 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 8002d28:	4601      	mov	r1, r0
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	0b5b      	lsrs	r3, r3, #13
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4a03      	ldr	r2, [pc, #12]	; (8002d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d36:	5cd3      	ldrb	r3, [r2, r3]
 8002d38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40023800 	.word	0x40023800
 8002d44:	080046c0 	.word	0x080046c0

08002d48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e01d      	b.n	8002d96 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fe ff34 	bl	8001bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3304      	adds	r3, #4
 8002d84:	4619      	mov	r1, r3
 8002d86:	4610      	mov	r0, r2
 8002d88:	f000 fc30 	bl	80035ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2202      	movs	r2, #2
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b06      	cmp	r3, #6
 8002dbe:	d007      	beq.n	8002dd0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b085      	sub	sp, #20
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0201 	orr.w	r2, r2, #1
 8002dfc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b06      	cmp	r3, #6
 8002e0e:	d007      	beq.n	8002e20 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e01d      	b.n	8002e7c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d106      	bne.n	8002e5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f815 	bl	8002e84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	f000 fbbd 	bl	80035ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	6839      	ldr	r1, [r7, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fe44 	bl	8003b38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a10      	ldr	r2, [pc, #64]	; (8002ef8 <HAL_TIM_PWM_Start+0x60>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d107      	bne.n	8002eca <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ec8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b06      	cmp	r3, #6
 8002eda:	d007      	beq.n	8002eec <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40010000 	.word	0x40010000

08002efc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e083      	b.n	8003018 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d106      	bne.n	8002f2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7fe fe11 	bl	8001b4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f40:	f023 0307 	bic.w	r3, r3, #7
 8002f44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4610      	mov	r0, r2
 8002f52:	f000 fb4b 	bl	80035ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f7e:	f023 0303 	bic.w	r3, r3, #3
 8002f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f9c:	f023 030c 	bic.w	r3, r3, #12
 8002fa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	011a      	lsls	r2, r3, #4
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	031b      	lsls	r3, r3, #12
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002fda:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002fe2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <HAL_TIM_Encoder_Start+0x16>
 8003030:	2b04      	cmp	r3, #4
 8003032:	d008      	beq.n	8003046 <HAL_TIM_Encoder_Start+0x26>
 8003034:	e00f      	b.n	8003056 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2201      	movs	r2, #1
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fd7a 	bl	8003b38 <TIM_CCxChannelCmd>
      break;
 8003044:	e016      	b.n	8003074 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2201      	movs	r2, #1
 800304c:	2104      	movs	r1, #4
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fd72 	bl	8003b38 <TIM_CCxChannelCmd>
      break;
 8003054:	e00e      	b.n	8003074 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2201      	movs	r2, #1
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fd6a 	bl	8003b38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2201      	movs	r2, #1
 800306a:	2104      	movs	r1, #4
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fd63 	bl	8003b38 <TIM_CCxChannelCmd>
      break;
 8003072:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d122      	bne.n	80030ea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d11b      	bne.n	80030ea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f06f 0202 	mvn.w	r2, #2
 80030ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fa6c 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 80030d6:	e005      	b.n	80030e4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fa5e 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fa6f 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d122      	bne.n	800313e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b04      	cmp	r3, #4
 8003104:	d11b      	bne.n	800313e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f06f 0204 	mvn.w	r2, #4
 800310e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 fa42 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 800312a:	e005      	b.n	8003138 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fa34 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fa45 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b08      	cmp	r3, #8
 800314a:	d122      	bne.n	8003192 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b08      	cmp	r3, #8
 8003158:	d11b      	bne.n	8003192 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f06f 0208 	mvn.w	r2, #8
 8003162:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2204      	movs	r2, #4
 8003168:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fa18 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 800317e:	e005      	b.n	800318c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fa0a 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fa1b 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b10      	cmp	r3, #16
 800319e:	d122      	bne.n	80031e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b10      	cmp	r3, #16
 80031ac:	d11b      	bne.n	80031e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f06f 0210 	mvn.w	r2, #16
 80031b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2208      	movs	r2, #8
 80031bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f9ee 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 80031d2:	e005      	b.n	80031e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f9e0 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f9f1 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d10e      	bne.n	8003212 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d107      	bne.n	8003212 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f06f 0201 	mvn.w	r2, #1
 800320a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7fe fc55 	bl	8001abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321c:	2b80      	cmp	r3, #128	; 0x80
 800321e:	d10e      	bne.n	800323e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322a:	2b80      	cmp	r3, #128	; 0x80
 800322c:	d107      	bne.n	800323e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fd1b 	bl	8003c74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	2b40      	cmp	r3, #64	; 0x40
 800324a:	d10e      	bne.n	800326a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d107      	bne.n	800326a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f9b6 	bl	80035d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b20      	cmp	r3, #32
 8003276:	d10e      	bne.n	8003296 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b20      	cmp	r3, #32
 8003284:	d107      	bne.n	8003296 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f06f 0220 	mvn.w	r2, #32
 800328e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fce5 	bl	8003c60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e0b4      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x184>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2202      	movs	r2, #2
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b0c      	cmp	r3, #12
 80032ce:	f200 809f 	bhi.w	8003410 <HAL_TIM_PWM_ConfigChannel+0x170>
 80032d2:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	0800330d 	.word	0x0800330d
 80032dc:	08003411 	.word	0x08003411
 80032e0:	08003411 	.word	0x08003411
 80032e4:	08003411 	.word	0x08003411
 80032e8:	0800334d 	.word	0x0800334d
 80032ec:	08003411 	.word	0x08003411
 80032f0:	08003411 	.word	0x08003411
 80032f4:	08003411 	.word	0x08003411
 80032f8:	0800338f 	.word	0x0800338f
 80032fc:	08003411 	.word	0x08003411
 8003300:	08003411 	.word	0x08003411
 8003304:	08003411 	.word	0x08003411
 8003308:	080033cf 	.word	0x080033cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	4618      	mov	r0, r3
 8003314:	f000 f9ea 	bl	80036ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0208 	orr.w	r2, r2, #8
 8003326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0204 	bic.w	r2, r2, #4
 8003336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6999      	ldr	r1, [r3, #24]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	619a      	str	r2, [r3, #24]
      break;
 800334a:	e062      	b.n	8003412 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fa30 	bl	80037b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6999      	ldr	r1, [r3, #24]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	021a      	lsls	r2, r3, #8
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	619a      	str	r2, [r3, #24]
      break;
 800338c:	e041      	b.n	8003412 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fa7b 	bl	8003890 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	69da      	ldr	r2, [r3, #28]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0208 	orr.w	r2, r2, #8
 80033a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69da      	ldr	r2, [r3, #28]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0204 	bic.w	r2, r2, #4
 80033b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69d9      	ldr	r1, [r3, #28]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	61da      	str	r2, [r3, #28]
      break;
 80033cc:	e021      	b.n	8003412 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68b9      	ldr	r1, [r7, #8]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fac5 	bl	8003964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	69da      	ldr	r2, [r3, #28]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69d9      	ldr	r1, [r3, #28]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	021a      	lsls	r2, r3, #8
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	61da      	str	r2, [r3, #28]
      break;
 800340e:	e000      	b.n	8003412 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003410:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_TIM_ConfigClockSource+0x18>
 8003440:	2302      	movs	r3, #2
 8003442:	e0a6      	b.n	8003592 <HAL_TIM_ConfigClockSource+0x166>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003462:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800346a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b40      	cmp	r3, #64	; 0x40
 800347a:	d067      	beq.n	800354c <HAL_TIM_ConfigClockSource+0x120>
 800347c:	2b40      	cmp	r3, #64	; 0x40
 800347e:	d80b      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x6c>
 8003480:	2b10      	cmp	r3, #16
 8003482:	d073      	beq.n	800356c <HAL_TIM_ConfigClockSource+0x140>
 8003484:	2b10      	cmp	r3, #16
 8003486:	d802      	bhi.n	800348e <HAL_TIM_ConfigClockSource+0x62>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d06f      	beq.n	800356c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800348c:	e078      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800348e:	2b20      	cmp	r3, #32
 8003490:	d06c      	beq.n	800356c <HAL_TIM_ConfigClockSource+0x140>
 8003492:	2b30      	cmp	r3, #48	; 0x30
 8003494:	d06a      	beq.n	800356c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003496:	e073      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003498:	2b70      	cmp	r3, #112	; 0x70
 800349a:	d00d      	beq.n	80034b8 <HAL_TIM_ConfigClockSource+0x8c>
 800349c:	2b70      	cmp	r3, #112	; 0x70
 800349e:	d804      	bhi.n	80034aa <HAL_TIM_ConfigClockSource+0x7e>
 80034a0:	2b50      	cmp	r3, #80	; 0x50
 80034a2:	d033      	beq.n	800350c <HAL_TIM_ConfigClockSource+0xe0>
 80034a4:	2b60      	cmp	r3, #96	; 0x60
 80034a6:	d041      	beq.n	800352c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80034a8:	e06a      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ae:	d066      	beq.n	800357e <HAL_TIM_ConfigClockSource+0x152>
 80034b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b4:	d017      	beq.n	80034e6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80034b6:	e063      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	6899      	ldr	r1, [r3, #8]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f000 fb16 	bl	8003af8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	609a      	str	r2, [r3, #8]
      break;
 80034e4:	e04c      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6899      	ldr	r1, [r3, #8]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f000 faff 	bl	8003af8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003508:	609a      	str	r2, [r3, #8]
      break;
 800350a:	e039      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6818      	ldr	r0, [r3, #0]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6859      	ldr	r1, [r3, #4]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	461a      	mov	r2, r3
 800351a:	f000 fa73 	bl	8003a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2150      	movs	r1, #80	; 0x50
 8003524:	4618      	mov	r0, r3
 8003526:	f000 facc 	bl	8003ac2 <TIM_ITRx_SetConfig>
      break;
 800352a:	e029      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	461a      	mov	r2, r3
 800353a:	f000 fa92 	bl	8003a62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2160      	movs	r1, #96	; 0x60
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fabc 	bl	8003ac2 <TIM_ITRx_SetConfig>
      break;
 800354a:	e019      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	461a      	mov	r2, r3
 800355a:	f000 fa53 	bl	8003a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2140      	movs	r1, #64	; 0x40
 8003564:	4618      	mov	r0, r3
 8003566:	f000 faac 	bl	8003ac2 <TIM_ITRx_SetConfig>
      break;
 800356a:	e009      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4619      	mov	r1, r3
 8003576:	4610      	mov	r0, r2
 8003578:	f000 faa3 	bl	8003ac2 <TIM_ITRx_SetConfig>
      break;
 800357c:	e000      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800357e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a34      	ldr	r2, [pc, #208]	; (80036d0 <TIM_Base_SetConfig+0xe4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00f      	beq.n	8003624 <TIM_Base_SetConfig+0x38>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360a:	d00b      	beq.n	8003624 <TIM_Base_SetConfig+0x38>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a31      	ldr	r2, [pc, #196]	; (80036d4 <TIM_Base_SetConfig+0xe8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d007      	beq.n	8003624 <TIM_Base_SetConfig+0x38>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a30      	ldr	r2, [pc, #192]	; (80036d8 <TIM_Base_SetConfig+0xec>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d003      	beq.n	8003624 <TIM_Base_SetConfig+0x38>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a2f      	ldr	r2, [pc, #188]	; (80036dc <TIM_Base_SetConfig+0xf0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d108      	bne.n	8003636 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a25      	ldr	r2, [pc, #148]	; (80036d0 <TIM_Base_SetConfig+0xe4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d01b      	beq.n	8003676 <TIM_Base_SetConfig+0x8a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003644:	d017      	beq.n	8003676 <TIM_Base_SetConfig+0x8a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a22      	ldr	r2, [pc, #136]	; (80036d4 <TIM_Base_SetConfig+0xe8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d013      	beq.n	8003676 <TIM_Base_SetConfig+0x8a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a21      	ldr	r2, [pc, #132]	; (80036d8 <TIM_Base_SetConfig+0xec>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00f      	beq.n	8003676 <TIM_Base_SetConfig+0x8a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a20      	ldr	r2, [pc, #128]	; (80036dc <TIM_Base_SetConfig+0xf0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00b      	beq.n	8003676 <TIM_Base_SetConfig+0x8a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a1f      	ldr	r2, [pc, #124]	; (80036e0 <TIM_Base_SetConfig+0xf4>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d007      	beq.n	8003676 <TIM_Base_SetConfig+0x8a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a1e      	ldr	r2, [pc, #120]	; (80036e4 <TIM_Base_SetConfig+0xf8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d003      	beq.n	8003676 <TIM_Base_SetConfig+0x8a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <TIM_Base_SetConfig+0xfc>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d108      	bne.n	8003688 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a08      	ldr	r2, [pc, #32]	; (80036d0 <TIM_Base_SetConfig+0xe4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d103      	bne.n	80036bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	615a      	str	r2, [r3, #20]
}
 80036c2:	bf00      	nop
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40010000 	.word	0x40010000
 80036d4:	40000400 	.word	0x40000400
 80036d8:	40000800 	.word	0x40000800
 80036dc:	40000c00 	.word	0x40000c00
 80036e0:	40014000 	.word	0x40014000
 80036e4:	40014400 	.word	0x40014400
 80036e8:	40014800 	.word	0x40014800

080036ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	f023 0201 	bic.w	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0303 	bic.w	r3, r3, #3
 8003722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f023 0302 	bic.w	r3, r3, #2
 8003734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a1c      	ldr	r2, [pc, #112]	; (80037b4 <TIM_OC1_SetConfig+0xc8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d10c      	bne.n	8003762 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f023 0308 	bic.w	r3, r3, #8
 800374e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f023 0304 	bic.w	r3, r3, #4
 8003760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <TIM_OC1_SetConfig+0xc8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d111      	bne.n	800378e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	621a      	str	r2, [r3, #32]
}
 80037a8:	bf00      	nop
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	40010000 	.word	0x40010000

080037b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	f023 0210 	bic.w	r2, r3, #16
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f023 0320 	bic.w	r3, r3, #32
 8003802:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a1e      	ldr	r2, [pc, #120]	; (800388c <TIM_OC2_SetConfig+0xd4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d10d      	bne.n	8003834 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800381e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003832:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a15      	ldr	r2, [pc, #84]	; (800388c <TIM_OC2_SetConfig+0xd4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d113      	bne.n	8003864 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800384a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40010000 	.word	0x40010000

08003890 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0303 	bic.w	r3, r3, #3
 80038c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a1d      	ldr	r2, [pc, #116]	; (8003960 <TIM_OC3_SetConfig+0xd0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d10d      	bne.n	800390a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a14      	ldr	r2, [pc, #80]	; (8003960 <TIM_OC3_SetConfig+0xd0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d113      	bne.n	800393a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	621a      	str	r2, [r3, #32]
}
 8003954:	bf00      	nop
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	40010000 	.word	0x40010000

08003964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800399a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	031b      	lsls	r3, r3, #12
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a10      	ldr	r2, [pc, #64]	; (8003a00 <TIM_OC4_SetConfig+0x9c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d109      	bne.n	80039d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	019b      	lsls	r3, r3, #6
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40010000 	.word	0x40010000

08003a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f023 0201 	bic.w	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f023 030a 	bic.w	r3, r3, #10
 8003a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	621a      	str	r2, [r3, #32]
}
 8003a56:	bf00      	nop
 8003a58:	371c      	adds	r7, #28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b087      	sub	sp, #28
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	f023 0210 	bic.w	r2, r3, #16
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	031b      	lsls	r3, r3, #12
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	621a      	str	r2, [r3, #32]
}
 8003ab6:	bf00      	nop
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b085      	sub	sp, #20
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f043 0307 	orr.w	r3, r3, #7
 8003ae4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	609a      	str	r2, [r3, #8]
}
 8003aec:	bf00      	nop
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	021a      	lsls	r2, r3, #8
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	609a      	str	r2, [r3, #8]
}
 8003b2c:	bf00      	nop
 8003b2e:	371c      	adds	r7, #28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a1a      	ldr	r2, [r3, #32]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	401a      	ands	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a1a      	ldr	r2, [r3, #32]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 031f 	and.w	r3, r3, #31
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b70:	431a      	orrs	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e050      	b.n	8003c3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d018      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be8:	d013      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00e      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a16      	ldr	r2, [pc, #88]	; (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d009      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a15      	ldr	r2, [pc, #84]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d004      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d10c      	bne.n	8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	40000400 	.word	0x40000400
 8003c54:	40000800 	.word	0x40000800
 8003c58:	40000c00 	.word	0x40000c00
 8003c5c:	40014000 	.word	0x40014000

08003c60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e03f      	b.n	8003d1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fe f80c 	bl	8001ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2224      	movs	r2, #36	; 0x24
 8003cb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f829 	bl	8003d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ce0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695a      	ldr	r2, [r3, #20]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d28:	b085      	sub	sp, #20
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d66:	f023 030c 	bic.w	r3, r3, #12
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	68f9      	ldr	r1, [r7, #12]
 8003d70:	430b      	orrs	r3, r1
 8003d72:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d92:	f040 818b 	bne.w	80040ac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4ac1      	ldr	r2, [pc, #772]	; (80040a0 <UART_SetConfig+0x37c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d005      	beq.n	8003dac <UART_SetConfig+0x88>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4abf      	ldr	r2, [pc, #764]	; (80040a4 <UART_SetConfig+0x380>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	f040 80bd 	bne.w	8003f26 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dac:	f7fe ffb8 	bl	8002d20 <HAL_RCC_GetPCLK2Freq>
 8003db0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	461d      	mov	r5, r3
 8003db6:	f04f 0600 	mov.w	r6, #0
 8003dba:	46a8      	mov	r8, r5
 8003dbc:	46b1      	mov	r9, r6
 8003dbe:	eb18 0308 	adds.w	r3, r8, r8
 8003dc2:	eb49 0409 	adc.w	r4, r9, r9
 8003dc6:	4698      	mov	r8, r3
 8003dc8:	46a1      	mov	r9, r4
 8003dca:	eb18 0805 	adds.w	r8, r8, r5
 8003dce:	eb49 0906 	adc.w	r9, r9, r6
 8003dd2:	f04f 0100 	mov.w	r1, #0
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003dde:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003de2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003de6:	4688      	mov	r8, r1
 8003de8:	4691      	mov	r9, r2
 8003dea:	eb18 0005 	adds.w	r0, r8, r5
 8003dee:	eb49 0106 	adc.w	r1, r9, r6
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	461d      	mov	r5, r3
 8003df8:	f04f 0600 	mov.w	r6, #0
 8003dfc:	196b      	adds	r3, r5, r5
 8003dfe:	eb46 0406 	adc.w	r4, r6, r6
 8003e02:	461a      	mov	r2, r3
 8003e04:	4623      	mov	r3, r4
 8003e06:	f7fc fe7b 	bl	8000b00 <__aeabi_uldivmod>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	461a      	mov	r2, r3
 8003e10:	4ba5      	ldr	r3, [pc, #660]	; (80040a8 <UART_SetConfig+0x384>)
 8003e12:	fba3 2302 	umull	r2, r3, r3, r2
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	461d      	mov	r5, r3
 8003e20:	f04f 0600 	mov.w	r6, #0
 8003e24:	46a9      	mov	r9, r5
 8003e26:	46b2      	mov	sl, r6
 8003e28:	eb19 0309 	adds.w	r3, r9, r9
 8003e2c:	eb4a 040a 	adc.w	r4, sl, sl
 8003e30:	4699      	mov	r9, r3
 8003e32:	46a2      	mov	sl, r4
 8003e34:	eb19 0905 	adds.w	r9, r9, r5
 8003e38:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e3c:	f04f 0100 	mov.w	r1, #0
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e50:	4689      	mov	r9, r1
 8003e52:	4692      	mov	sl, r2
 8003e54:	eb19 0005 	adds.w	r0, r9, r5
 8003e58:	eb4a 0106 	adc.w	r1, sl, r6
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	461d      	mov	r5, r3
 8003e62:	f04f 0600 	mov.w	r6, #0
 8003e66:	196b      	adds	r3, r5, r5
 8003e68:	eb46 0406 	adc.w	r4, r6, r6
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4623      	mov	r3, r4
 8003e70:	f7fc fe46 	bl	8000b00 <__aeabi_uldivmod>
 8003e74:	4603      	mov	r3, r0
 8003e76:	460c      	mov	r4, r1
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4b8b      	ldr	r3, [pc, #556]	; (80040a8 <UART_SetConfig+0x384>)
 8003e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	2164      	movs	r1, #100	; 0x64
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	3332      	adds	r3, #50	; 0x32
 8003e8e:	4a86      	ldr	r2, [pc, #536]	; (80040a8 <UART_SetConfig+0x384>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e9c:	4498      	add	r8, r3
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	461d      	mov	r5, r3
 8003ea2:	f04f 0600 	mov.w	r6, #0
 8003ea6:	46a9      	mov	r9, r5
 8003ea8:	46b2      	mov	sl, r6
 8003eaa:	eb19 0309 	adds.w	r3, r9, r9
 8003eae:	eb4a 040a 	adc.w	r4, sl, sl
 8003eb2:	4699      	mov	r9, r3
 8003eb4:	46a2      	mov	sl, r4
 8003eb6:	eb19 0905 	adds.w	r9, r9, r5
 8003eba:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ebe:	f04f 0100 	mov.w	r1, #0
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ece:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ed2:	4689      	mov	r9, r1
 8003ed4:	4692      	mov	sl, r2
 8003ed6:	eb19 0005 	adds.w	r0, r9, r5
 8003eda:	eb4a 0106 	adc.w	r1, sl, r6
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	461d      	mov	r5, r3
 8003ee4:	f04f 0600 	mov.w	r6, #0
 8003ee8:	196b      	adds	r3, r5, r5
 8003eea:	eb46 0406 	adc.w	r4, r6, r6
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4623      	mov	r3, r4
 8003ef2:	f7fc fe05 	bl	8000b00 <__aeabi_uldivmod>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	460c      	mov	r4, r1
 8003efa:	461a      	mov	r2, r3
 8003efc:	4b6a      	ldr	r3, [pc, #424]	; (80040a8 <UART_SetConfig+0x384>)
 8003efe:	fba3 1302 	umull	r1, r3, r3, r2
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2164      	movs	r1, #100	; 0x64
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	3332      	adds	r3, #50	; 0x32
 8003f10:	4a65      	ldr	r2, [pc, #404]	; (80040a8 <UART_SetConfig+0x384>)
 8003f12:	fba2 2303 	umull	r2, r3, r2, r3
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	f003 0207 	and.w	r2, r3, #7
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4442      	add	r2, r8
 8003f22:	609a      	str	r2, [r3, #8]
 8003f24:	e26f      	b.n	8004406 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f26:	f7fe fee7 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 8003f2a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	461d      	mov	r5, r3
 8003f30:	f04f 0600 	mov.w	r6, #0
 8003f34:	46a8      	mov	r8, r5
 8003f36:	46b1      	mov	r9, r6
 8003f38:	eb18 0308 	adds.w	r3, r8, r8
 8003f3c:	eb49 0409 	adc.w	r4, r9, r9
 8003f40:	4698      	mov	r8, r3
 8003f42:	46a1      	mov	r9, r4
 8003f44:	eb18 0805 	adds.w	r8, r8, r5
 8003f48:	eb49 0906 	adc.w	r9, r9, r6
 8003f4c:	f04f 0100 	mov.w	r1, #0
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f58:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f5c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f60:	4688      	mov	r8, r1
 8003f62:	4691      	mov	r9, r2
 8003f64:	eb18 0005 	adds.w	r0, r8, r5
 8003f68:	eb49 0106 	adc.w	r1, r9, r6
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	461d      	mov	r5, r3
 8003f72:	f04f 0600 	mov.w	r6, #0
 8003f76:	196b      	adds	r3, r5, r5
 8003f78:	eb46 0406 	adc.w	r4, r6, r6
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4623      	mov	r3, r4
 8003f80:	f7fc fdbe 	bl	8000b00 <__aeabi_uldivmod>
 8003f84:	4603      	mov	r3, r0
 8003f86:	460c      	mov	r4, r1
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4b47      	ldr	r3, [pc, #284]	; (80040a8 <UART_SetConfig+0x384>)
 8003f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f90:	095b      	lsrs	r3, r3, #5
 8003f92:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	461d      	mov	r5, r3
 8003f9a:	f04f 0600 	mov.w	r6, #0
 8003f9e:	46a9      	mov	r9, r5
 8003fa0:	46b2      	mov	sl, r6
 8003fa2:	eb19 0309 	adds.w	r3, r9, r9
 8003fa6:	eb4a 040a 	adc.w	r4, sl, sl
 8003faa:	4699      	mov	r9, r3
 8003fac:	46a2      	mov	sl, r4
 8003fae:	eb19 0905 	adds.w	r9, r9, r5
 8003fb2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fb6:	f04f 0100 	mov.w	r1, #0
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fc2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fca:	4689      	mov	r9, r1
 8003fcc:	4692      	mov	sl, r2
 8003fce:	eb19 0005 	adds.w	r0, r9, r5
 8003fd2:	eb4a 0106 	adc.w	r1, sl, r6
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	461d      	mov	r5, r3
 8003fdc:	f04f 0600 	mov.w	r6, #0
 8003fe0:	196b      	adds	r3, r5, r5
 8003fe2:	eb46 0406 	adc.w	r4, r6, r6
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4623      	mov	r3, r4
 8003fea:	f7fc fd89 	bl	8000b00 <__aeabi_uldivmod>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	460c      	mov	r4, r1
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4b2c      	ldr	r3, [pc, #176]	; (80040a8 <UART_SetConfig+0x384>)
 8003ff6:	fba3 1302 	umull	r1, r3, r3, r2
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	2164      	movs	r1, #100	; 0x64
 8003ffe:	fb01 f303 	mul.w	r3, r1, r3
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	3332      	adds	r3, #50	; 0x32
 8004008:	4a27      	ldr	r2, [pc, #156]	; (80040a8 <UART_SetConfig+0x384>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004016:	4498      	add	r8, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	461d      	mov	r5, r3
 800401c:	f04f 0600 	mov.w	r6, #0
 8004020:	46a9      	mov	r9, r5
 8004022:	46b2      	mov	sl, r6
 8004024:	eb19 0309 	adds.w	r3, r9, r9
 8004028:	eb4a 040a 	adc.w	r4, sl, sl
 800402c:	4699      	mov	r9, r3
 800402e:	46a2      	mov	sl, r4
 8004030:	eb19 0905 	adds.w	r9, r9, r5
 8004034:	eb4a 0a06 	adc.w	sl, sl, r6
 8004038:	f04f 0100 	mov.w	r1, #0
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004044:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004048:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800404c:	4689      	mov	r9, r1
 800404e:	4692      	mov	sl, r2
 8004050:	eb19 0005 	adds.w	r0, r9, r5
 8004054:	eb4a 0106 	adc.w	r1, sl, r6
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	461d      	mov	r5, r3
 800405e:	f04f 0600 	mov.w	r6, #0
 8004062:	196b      	adds	r3, r5, r5
 8004064:	eb46 0406 	adc.w	r4, r6, r6
 8004068:	461a      	mov	r2, r3
 800406a:	4623      	mov	r3, r4
 800406c:	f7fc fd48 	bl	8000b00 <__aeabi_uldivmod>
 8004070:	4603      	mov	r3, r0
 8004072:	460c      	mov	r4, r1
 8004074:	461a      	mov	r2, r3
 8004076:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <UART_SetConfig+0x384>)
 8004078:	fba3 1302 	umull	r1, r3, r3, r2
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	2164      	movs	r1, #100	; 0x64
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	3332      	adds	r3, #50	; 0x32
 800408a:	4a07      	ldr	r2, [pc, #28]	; (80040a8 <UART_SetConfig+0x384>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	f003 0207 	and.w	r2, r3, #7
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4442      	add	r2, r8
 800409c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800409e:	e1b2      	b.n	8004406 <UART_SetConfig+0x6e2>
 80040a0:	40011000 	.word	0x40011000
 80040a4:	40011400 	.word	0x40011400
 80040a8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4ad7      	ldr	r2, [pc, #860]	; (8004410 <UART_SetConfig+0x6ec>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d005      	beq.n	80040c2 <UART_SetConfig+0x39e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4ad6      	ldr	r2, [pc, #856]	; (8004414 <UART_SetConfig+0x6f0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	f040 80d1 	bne.w	8004264 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80040c2:	f7fe fe2d 	bl	8002d20 <HAL_RCC_GetPCLK2Freq>
 80040c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	469a      	mov	sl, r3
 80040cc:	f04f 0b00 	mov.w	fp, #0
 80040d0:	46d0      	mov	r8, sl
 80040d2:	46d9      	mov	r9, fp
 80040d4:	eb18 0308 	adds.w	r3, r8, r8
 80040d8:	eb49 0409 	adc.w	r4, r9, r9
 80040dc:	4698      	mov	r8, r3
 80040de:	46a1      	mov	r9, r4
 80040e0:	eb18 080a 	adds.w	r8, r8, sl
 80040e4:	eb49 090b 	adc.w	r9, r9, fp
 80040e8:	f04f 0100 	mov.w	r1, #0
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040fc:	4688      	mov	r8, r1
 80040fe:	4691      	mov	r9, r2
 8004100:	eb1a 0508 	adds.w	r5, sl, r8
 8004104:	eb4b 0609 	adc.w	r6, fp, r9
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	4619      	mov	r1, r3
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	f04f 0400 	mov.w	r4, #0
 800411a:	0094      	lsls	r4, r2, #2
 800411c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004120:	008b      	lsls	r3, r1, #2
 8004122:	461a      	mov	r2, r3
 8004124:	4623      	mov	r3, r4
 8004126:	4628      	mov	r0, r5
 8004128:	4631      	mov	r1, r6
 800412a:	f7fc fce9 	bl	8000b00 <__aeabi_uldivmod>
 800412e:	4603      	mov	r3, r0
 8004130:	460c      	mov	r4, r1
 8004132:	461a      	mov	r2, r3
 8004134:	4bb8      	ldr	r3, [pc, #736]	; (8004418 <UART_SetConfig+0x6f4>)
 8004136:	fba3 2302 	umull	r2, r3, r3, r2
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	469b      	mov	fp, r3
 8004144:	f04f 0c00 	mov.w	ip, #0
 8004148:	46d9      	mov	r9, fp
 800414a:	46e2      	mov	sl, ip
 800414c:	eb19 0309 	adds.w	r3, r9, r9
 8004150:	eb4a 040a 	adc.w	r4, sl, sl
 8004154:	4699      	mov	r9, r3
 8004156:	46a2      	mov	sl, r4
 8004158:	eb19 090b 	adds.w	r9, r9, fp
 800415c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004160:	f04f 0100 	mov.w	r1, #0
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800416c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004170:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004174:	4689      	mov	r9, r1
 8004176:	4692      	mov	sl, r2
 8004178:	eb1b 0509 	adds.w	r5, fp, r9
 800417c:	eb4c 060a 	adc.w	r6, ip, sl
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	4619      	mov	r1, r3
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	f04f 0400 	mov.w	r4, #0
 8004192:	0094      	lsls	r4, r2, #2
 8004194:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004198:	008b      	lsls	r3, r1, #2
 800419a:	461a      	mov	r2, r3
 800419c:	4623      	mov	r3, r4
 800419e:	4628      	mov	r0, r5
 80041a0:	4631      	mov	r1, r6
 80041a2:	f7fc fcad 	bl	8000b00 <__aeabi_uldivmod>
 80041a6:	4603      	mov	r3, r0
 80041a8:	460c      	mov	r4, r1
 80041aa:	461a      	mov	r2, r3
 80041ac:	4b9a      	ldr	r3, [pc, #616]	; (8004418 <UART_SetConfig+0x6f4>)
 80041ae:	fba3 1302 	umull	r1, r3, r3, r2
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	2164      	movs	r1, #100	; 0x64
 80041b6:	fb01 f303 	mul.w	r3, r1, r3
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	3332      	adds	r3, #50	; 0x32
 80041c0:	4a95      	ldr	r2, [pc, #596]	; (8004418 <UART_SetConfig+0x6f4>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041cc:	4498      	add	r8, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	469b      	mov	fp, r3
 80041d2:	f04f 0c00 	mov.w	ip, #0
 80041d6:	46d9      	mov	r9, fp
 80041d8:	46e2      	mov	sl, ip
 80041da:	eb19 0309 	adds.w	r3, r9, r9
 80041de:	eb4a 040a 	adc.w	r4, sl, sl
 80041e2:	4699      	mov	r9, r3
 80041e4:	46a2      	mov	sl, r4
 80041e6:	eb19 090b 	adds.w	r9, r9, fp
 80041ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041ee:	f04f 0100 	mov.w	r1, #0
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004202:	4689      	mov	r9, r1
 8004204:	4692      	mov	sl, r2
 8004206:	eb1b 0509 	adds.w	r5, fp, r9
 800420a:	eb4c 060a 	adc.w	r6, ip, sl
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4619      	mov	r1, r3
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	f04f 0400 	mov.w	r4, #0
 8004220:	0094      	lsls	r4, r2, #2
 8004222:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004226:	008b      	lsls	r3, r1, #2
 8004228:	461a      	mov	r2, r3
 800422a:	4623      	mov	r3, r4
 800422c:	4628      	mov	r0, r5
 800422e:	4631      	mov	r1, r6
 8004230:	f7fc fc66 	bl	8000b00 <__aeabi_uldivmod>
 8004234:	4603      	mov	r3, r0
 8004236:	460c      	mov	r4, r1
 8004238:	461a      	mov	r2, r3
 800423a:	4b77      	ldr	r3, [pc, #476]	; (8004418 <UART_SetConfig+0x6f4>)
 800423c:	fba3 1302 	umull	r1, r3, r3, r2
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	2164      	movs	r1, #100	; 0x64
 8004244:	fb01 f303 	mul.w	r3, r1, r3
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	3332      	adds	r3, #50	; 0x32
 800424e:	4a72      	ldr	r2, [pc, #456]	; (8004418 <UART_SetConfig+0x6f4>)
 8004250:	fba2 2303 	umull	r2, r3, r2, r3
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	f003 020f 	and.w	r2, r3, #15
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4442      	add	r2, r8
 8004260:	609a      	str	r2, [r3, #8]
 8004262:	e0d0      	b.n	8004406 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004264:	f7fe fd48 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 8004268:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	469a      	mov	sl, r3
 800426e:	f04f 0b00 	mov.w	fp, #0
 8004272:	46d0      	mov	r8, sl
 8004274:	46d9      	mov	r9, fp
 8004276:	eb18 0308 	adds.w	r3, r8, r8
 800427a:	eb49 0409 	adc.w	r4, r9, r9
 800427e:	4698      	mov	r8, r3
 8004280:	46a1      	mov	r9, r4
 8004282:	eb18 080a 	adds.w	r8, r8, sl
 8004286:	eb49 090b 	adc.w	r9, r9, fp
 800428a:	f04f 0100 	mov.w	r1, #0
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004296:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800429a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800429e:	4688      	mov	r8, r1
 80042a0:	4691      	mov	r9, r2
 80042a2:	eb1a 0508 	adds.w	r5, sl, r8
 80042a6:	eb4b 0609 	adc.w	r6, fp, r9
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	4619      	mov	r1, r3
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	f04f 0400 	mov.w	r4, #0
 80042bc:	0094      	lsls	r4, r2, #2
 80042be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042c2:	008b      	lsls	r3, r1, #2
 80042c4:	461a      	mov	r2, r3
 80042c6:	4623      	mov	r3, r4
 80042c8:	4628      	mov	r0, r5
 80042ca:	4631      	mov	r1, r6
 80042cc:	f7fc fc18 	bl	8000b00 <__aeabi_uldivmod>
 80042d0:	4603      	mov	r3, r0
 80042d2:	460c      	mov	r4, r1
 80042d4:	461a      	mov	r2, r3
 80042d6:	4b50      	ldr	r3, [pc, #320]	; (8004418 <UART_SetConfig+0x6f4>)
 80042d8:	fba3 2302 	umull	r2, r3, r3, r2
 80042dc:	095b      	lsrs	r3, r3, #5
 80042de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	469b      	mov	fp, r3
 80042e6:	f04f 0c00 	mov.w	ip, #0
 80042ea:	46d9      	mov	r9, fp
 80042ec:	46e2      	mov	sl, ip
 80042ee:	eb19 0309 	adds.w	r3, r9, r9
 80042f2:	eb4a 040a 	adc.w	r4, sl, sl
 80042f6:	4699      	mov	r9, r3
 80042f8:	46a2      	mov	sl, r4
 80042fa:	eb19 090b 	adds.w	r9, r9, fp
 80042fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004302:	f04f 0100 	mov.w	r1, #0
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800430e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004312:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004316:	4689      	mov	r9, r1
 8004318:	4692      	mov	sl, r2
 800431a:	eb1b 0509 	adds.w	r5, fp, r9
 800431e:	eb4c 060a 	adc.w	r6, ip, sl
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	4619      	mov	r1, r3
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	f04f 0400 	mov.w	r4, #0
 8004334:	0094      	lsls	r4, r2, #2
 8004336:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800433a:	008b      	lsls	r3, r1, #2
 800433c:	461a      	mov	r2, r3
 800433e:	4623      	mov	r3, r4
 8004340:	4628      	mov	r0, r5
 8004342:	4631      	mov	r1, r6
 8004344:	f7fc fbdc 	bl	8000b00 <__aeabi_uldivmod>
 8004348:	4603      	mov	r3, r0
 800434a:	460c      	mov	r4, r1
 800434c:	461a      	mov	r2, r3
 800434e:	4b32      	ldr	r3, [pc, #200]	; (8004418 <UART_SetConfig+0x6f4>)
 8004350:	fba3 1302 	umull	r1, r3, r3, r2
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	2164      	movs	r1, #100	; 0x64
 8004358:	fb01 f303 	mul.w	r3, r1, r3
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	3332      	adds	r3, #50	; 0x32
 8004362:	4a2d      	ldr	r2, [pc, #180]	; (8004418 <UART_SetConfig+0x6f4>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800436e:	4498      	add	r8, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	469b      	mov	fp, r3
 8004374:	f04f 0c00 	mov.w	ip, #0
 8004378:	46d9      	mov	r9, fp
 800437a:	46e2      	mov	sl, ip
 800437c:	eb19 0309 	adds.w	r3, r9, r9
 8004380:	eb4a 040a 	adc.w	r4, sl, sl
 8004384:	4699      	mov	r9, r3
 8004386:	46a2      	mov	sl, r4
 8004388:	eb19 090b 	adds.w	r9, r9, fp
 800438c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004390:	f04f 0100 	mov.w	r1, #0
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800439c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043a4:	4689      	mov	r9, r1
 80043a6:	4692      	mov	sl, r2
 80043a8:	eb1b 0509 	adds.w	r5, fp, r9
 80043ac:	eb4c 060a 	adc.w	r6, ip, sl
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	4619      	mov	r1, r3
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	f04f 0300 	mov.w	r3, #0
 80043be:	f04f 0400 	mov.w	r4, #0
 80043c2:	0094      	lsls	r4, r2, #2
 80043c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043c8:	008b      	lsls	r3, r1, #2
 80043ca:	461a      	mov	r2, r3
 80043cc:	4623      	mov	r3, r4
 80043ce:	4628      	mov	r0, r5
 80043d0:	4631      	mov	r1, r6
 80043d2:	f7fc fb95 	bl	8000b00 <__aeabi_uldivmod>
 80043d6:	4603      	mov	r3, r0
 80043d8:	460c      	mov	r4, r1
 80043da:	461a      	mov	r2, r3
 80043dc:	4b0e      	ldr	r3, [pc, #56]	; (8004418 <UART_SetConfig+0x6f4>)
 80043de:	fba3 1302 	umull	r1, r3, r3, r2
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	2164      	movs	r1, #100	; 0x64
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	3332      	adds	r3, #50	; 0x32
 80043f0:	4a09      	ldr	r2, [pc, #36]	; (8004418 <UART_SetConfig+0x6f4>)
 80043f2:	fba2 2303 	umull	r2, r3, r2, r3
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	f003 020f 	and.w	r2, r3, #15
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4442      	add	r2, r8
 8004402:	609a      	str	r2, [r3, #8]
}
 8004404:	e7ff      	b.n	8004406 <UART_SetConfig+0x6e2>
 8004406:	bf00      	nop
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004410:	40011000 	.word	0x40011000
 8004414:	40011400 	.word	0x40011400
 8004418:	51eb851f 	.word	0x51eb851f

0800441c <__errno>:
 800441c:	4b01      	ldr	r3, [pc, #4]	; (8004424 <__errno+0x8>)
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20000084 	.word	0x20000084

08004428 <__libc_init_array>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	4e0d      	ldr	r6, [pc, #52]	; (8004460 <__libc_init_array+0x38>)
 800442c:	4c0d      	ldr	r4, [pc, #52]	; (8004464 <__libc_init_array+0x3c>)
 800442e:	1ba4      	subs	r4, r4, r6
 8004430:	10a4      	asrs	r4, r4, #2
 8004432:	2500      	movs	r5, #0
 8004434:	42a5      	cmp	r5, r4
 8004436:	d109      	bne.n	800444c <__libc_init_array+0x24>
 8004438:	4e0b      	ldr	r6, [pc, #44]	; (8004468 <__libc_init_array+0x40>)
 800443a:	4c0c      	ldr	r4, [pc, #48]	; (800446c <__libc_init_array+0x44>)
 800443c:	f000 f92c 	bl	8004698 <_init>
 8004440:	1ba4      	subs	r4, r4, r6
 8004442:	10a4      	asrs	r4, r4, #2
 8004444:	2500      	movs	r5, #0
 8004446:	42a5      	cmp	r5, r4
 8004448:	d105      	bne.n	8004456 <__libc_init_array+0x2e>
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004450:	4798      	blx	r3
 8004452:	3501      	adds	r5, #1
 8004454:	e7ee      	b.n	8004434 <__libc_init_array+0xc>
 8004456:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800445a:	4798      	blx	r3
 800445c:	3501      	adds	r5, #1
 800445e:	e7f2      	b.n	8004446 <__libc_init_array+0x1e>
 8004460:	080046d8 	.word	0x080046d8
 8004464:	080046d8 	.word	0x080046d8
 8004468:	080046d8 	.word	0x080046d8
 800446c:	080046dc 	.word	0x080046dc

08004470 <memset>:
 8004470:	4402      	add	r2, r0
 8004472:	4603      	mov	r3, r0
 8004474:	4293      	cmp	r3, r2
 8004476:	d100      	bne.n	800447a <memset+0xa>
 8004478:	4770      	bx	lr
 800447a:	f803 1b01 	strb.w	r1, [r3], #1
 800447e:	e7f9      	b.n	8004474 <memset+0x4>

08004480 <sqrt>:
 8004480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004484:	ed2d 8b02 	vpush	{d8}
 8004488:	b08b      	sub	sp, #44	; 0x2c
 800448a:	ec55 4b10 	vmov	r4, r5, d0
 800448e:	f000 f851 	bl	8004534 <__ieee754_sqrt>
 8004492:	4b26      	ldr	r3, [pc, #152]	; (800452c <sqrt+0xac>)
 8004494:	eeb0 8a40 	vmov.f32	s16, s0
 8004498:	eef0 8a60 	vmov.f32	s17, s1
 800449c:	f993 6000 	ldrsb.w	r6, [r3]
 80044a0:	1c73      	adds	r3, r6, #1
 80044a2:	d02a      	beq.n	80044fa <sqrt+0x7a>
 80044a4:	4622      	mov	r2, r4
 80044a6:	462b      	mov	r3, r5
 80044a8:	4620      	mov	r0, r4
 80044aa:	4629      	mov	r1, r5
 80044ac:	f7fc faea 	bl	8000a84 <__aeabi_dcmpun>
 80044b0:	4607      	mov	r7, r0
 80044b2:	bb10      	cbnz	r0, 80044fa <sqrt+0x7a>
 80044b4:	f04f 0800 	mov.w	r8, #0
 80044b8:	f04f 0900 	mov.w	r9, #0
 80044bc:	4642      	mov	r2, r8
 80044be:	464b      	mov	r3, r9
 80044c0:	4620      	mov	r0, r4
 80044c2:	4629      	mov	r1, r5
 80044c4:	f7fc fab6 	bl	8000a34 <__aeabi_dcmplt>
 80044c8:	b1b8      	cbz	r0, 80044fa <sqrt+0x7a>
 80044ca:	2301      	movs	r3, #1
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	4b18      	ldr	r3, [pc, #96]	; (8004530 <sqrt+0xb0>)
 80044d0:	9301      	str	r3, [sp, #4]
 80044d2:	9708      	str	r7, [sp, #32]
 80044d4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80044d8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80044dc:	b9b6      	cbnz	r6, 800450c <sqrt+0x8c>
 80044de:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80044e2:	4668      	mov	r0, sp
 80044e4:	f000 f8d6 	bl	8004694 <matherr>
 80044e8:	b1d0      	cbz	r0, 8004520 <sqrt+0xa0>
 80044ea:	9b08      	ldr	r3, [sp, #32]
 80044ec:	b11b      	cbz	r3, 80044f6 <sqrt+0x76>
 80044ee:	f7ff ff95 	bl	800441c <__errno>
 80044f2:	9b08      	ldr	r3, [sp, #32]
 80044f4:	6003      	str	r3, [r0, #0]
 80044f6:	ed9d 8b06 	vldr	d8, [sp, #24]
 80044fa:	eeb0 0a48 	vmov.f32	s0, s16
 80044fe:	eef0 0a68 	vmov.f32	s1, s17
 8004502:	b00b      	add	sp, #44	; 0x2c
 8004504:	ecbd 8b02 	vpop	{d8}
 8004508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800450c:	4642      	mov	r2, r8
 800450e:	464b      	mov	r3, r9
 8004510:	4640      	mov	r0, r8
 8004512:	4649      	mov	r1, r9
 8004514:	f7fc f946 	bl	80007a4 <__aeabi_ddiv>
 8004518:	2e02      	cmp	r6, #2
 800451a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800451e:	d1e0      	bne.n	80044e2 <sqrt+0x62>
 8004520:	f7ff ff7c 	bl	800441c <__errno>
 8004524:	2321      	movs	r3, #33	; 0x21
 8004526:	6003      	str	r3, [r0, #0]
 8004528:	e7df      	b.n	80044ea <sqrt+0x6a>
 800452a:	bf00      	nop
 800452c:	200000e8 	.word	0x200000e8
 8004530:	080046c8 	.word	0x080046c8

08004534 <__ieee754_sqrt>:
 8004534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004538:	4955      	ldr	r1, [pc, #340]	; (8004690 <__ieee754_sqrt+0x15c>)
 800453a:	ec55 4b10 	vmov	r4, r5, d0
 800453e:	43a9      	bics	r1, r5
 8004540:	462b      	mov	r3, r5
 8004542:	462a      	mov	r2, r5
 8004544:	d112      	bne.n	800456c <__ieee754_sqrt+0x38>
 8004546:	ee10 2a10 	vmov	r2, s0
 800454a:	ee10 0a10 	vmov	r0, s0
 800454e:	4629      	mov	r1, r5
 8004550:	f7fb fffe 	bl	8000550 <__aeabi_dmul>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4620      	mov	r0, r4
 800455a:	4629      	mov	r1, r5
 800455c:	f7fb fe42 	bl	80001e4 <__adddf3>
 8004560:	4604      	mov	r4, r0
 8004562:	460d      	mov	r5, r1
 8004564:	ec45 4b10 	vmov	d0, r4, r5
 8004568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800456c:	2d00      	cmp	r5, #0
 800456e:	ee10 0a10 	vmov	r0, s0
 8004572:	4621      	mov	r1, r4
 8004574:	dc0f      	bgt.n	8004596 <__ieee754_sqrt+0x62>
 8004576:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800457a:	4330      	orrs	r0, r6
 800457c:	d0f2      	beq.n	8004564 <__ieee754_sqrt+0x30>
 800457e:	b155      	cbz	r5, 8004596 <__ieee754_sqrt+0x62>
 8004580:	ee10 2a10 	vmov	r2, s0
 8004584:	4620      	mov	r0, r4
 8004586:	4629      	mov	r1, r5
 8004588:	f7fb fe2a 	bl	80001e0 <__aeabi_dsub>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	f7fc f908 	bl	80007a4 <__aeabi_ddiv>
 8004594:	e7e4      	b.n	8004560 <__ieee754_sqrt+0x2c>
 8004596:	151b      	asrs	r3, r3, #20
 8004598:	d073      	beq.n	8004682 <__ieee754_sqrt+0x14e>
 800459a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800459e:	07dd      	lsls	r5, r3, #31
 80045a0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80045a4:	bf48      	it	mi
 80045a6:	0fc8      	lsrmi	r0, r1, #31
 80045a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80045ac:	bf44      	itt	mi
 80045ae:	0049      	lslmi	r1, r1, #1
 80045b0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80045b4:	2500      	movs	r5, #0
 80045b6:	1058      	asrs	r0, r3, #1
 80045b8:	0fcb      	lsrs	r3, r1, #31
 80045ba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80045be:	0049      	lsls	r1, r1, #1
 80045c0:	2316      	movs	r3, #22
 80045c2:	462c      	mov	r4, r5
 80045c4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80045c8:	19a7      	adds	r7, r4, r6
 80045ca:	4297      	cmp	r7, r2
 80045cc:	bfde      	ittt	le
 80045ce:	19bc      	addle	r4, r7, r6
 80045d0:	1bd2      	suble	r2, r2, r7
 80045d2:	19ad      	addle	r5, r5, r6
 80045d4:	0fcf      	lsrs	r7, r1, #31
 80045d6:	3b01      	subs	r3, #1
 80045d8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80045dc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80045e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80045e4:	d1f0      	bne.n	80045c8 <__ieee754_sqrt+0x94>
 80045e6:	f04f 0c20 	mov.w	ip, #32
 80045ea:	469e      	mov	lr, r3
 80045ec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80045f0:	42a2      	cmp	r2, r4
 80045f2:	eb06 070e 	add.w	r7, r6, lr
 80045f6:	dc02      	bgt.n	80045fe <__ieee754_sqrt+0xca>
 80045f8:	d112      	bne.n	8004620 <__ieee754_sqrt+0xec>
 80045fa:	428f      	cmp	r7, r1
 80045fc:	d810      	bhi.n	8004620 <__ieee754_sqrt+0xec>
 80045fe:	2f00      	cmp	r7, #0
 8004600:	eb07 0e06 	add.w	lr, r7, r6
 8004604:	da42      	bge.n	800468c <__ieee754_sqrt+0x158>
 8004606:	f1be 0f00 	cmp.w	lr, #0
 800460a:	db3f      	blt.n	800468c <__ieee754_sqrt+0x158>
 800460c:	f104 0801 	add.w	r8, r4, #1
 8004610:	1b12      	subs	r2, r2, r4
 8004612:	428f      	cmp	r7, r1
 8004614:	bf88      	it	hi
 8004616:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800461a:	1bc9      	subs	r1, r1, r7
 800461c:	4433      	add	r3, r6
 800461e:	4644      	mov	r4, r8
 8004620:	0052      	lsls	r2, r2, #1
 8004622:	f1bc 0c01 	subs.w	ip, ip, #1
 8004626:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800462a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800462e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004632:	d1dd      	bne.n	80045f0 <__ieee754_sqrt+0xbc>
 8004634:	430a      	orrs	r2, r1
 8004636:	d006      	beq.n	8004646 <__ieee754_sqrt+0x112>
 8004638:	1c5c      	adds	r4, r3, #1
 800463a:	bf13      	iteet	ne
 800463c:	3301      	addne	r3, #1
 800463e:	3501      	addeq	r5, #1
 8004640:	4663      	moveq	r3, ip
 8004642:	f023 0301 	bicne.w	r3, r3, #1
 8004646:	106a      	asrs	r2, r5, #1
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	07e9      	lsls	r1, r5, #31
 800464c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004650:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004654:	bf48      	it	mi
 8004656:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800465a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800465e:	461c      	mov	r4, r3
 8004660:	e780      	b.n	8004564 <__ieee754_sqrt+0x30>
 8004662:	0aca      	lsrs	r2, r1, #11
 8004664:	3815      	subs	r0, #21
 8004666:	0549      	lsls	r1, r1, #21
 8004668:	2a00      	cmp	r2, #0
 800466a:	d0fa      	beq.n	8004662 <__ieee754_sqrt+0x12e>
 800466c:	02d6      	lsls	r6, r2, #11
 800466e:	d50a      	bpl.n	8004686 <__ieee754_sqrt+0x152>
 8004670:	f1c3 0420 	rsb	r4, r3, #32
 8004674:	fa21 f404 	lsr.w	r4, r1, r4
 8004678:	1e5d      	subs	r5, r3, #1
 800467a:	4099      	lsls	r1, r3
 800467c:	4322      	orrs	r2, r4
 800467e:	1b43      	subs	r3, r0, r5
 8004680:	e78b      	b.n	800459a <__ieee754_sqrt+0x66>
 8004682:	4618      	mov	r0, r3
 8004684:	e7f0      	b.n	8004668 <__ieee754_sqrt+0x134>
 8004686:	0052      	lsls	r2, r2, #1
 8004688:	3301      	adds	r3, #1
 800468a:	e7ef      	b.n	800466c <__ieee754_sqrt+0x138>
 800468c:	46a0      	mov	r8, r4
 800468e:	e7bf      	b.n	8004610 <__ieee754_sqrt+0xdc>
 8004690:	7ff00000 	.word	0x7ff00000

08004694 <matherr>:
 8004694:	2000      	movs	r0, #0
 8004696:	4770      	bx	lr

08004698 <_init>:
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	bf00      	nop
 800469c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469e:	bc08      	pop	{r3}
 80046a0:	469e      	mov	lr, r3
 80046a2:	4770      	bx	lr

080046a4 <_fini>:
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a6:	bf00      	nop
 80046a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046aa:	bc08      	pop	{r3}
 80046ac:	469e      	mov	lr, r3
 80046ae:	4770      	bx	lr
