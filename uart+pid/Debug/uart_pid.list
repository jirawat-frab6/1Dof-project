
uart_pid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e00  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006f98  08006f98  00016f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fb8  08006fb8  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  08006fb8  08006fb8  00016fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fc0  08006fc0  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fc0  08006fc0  00016fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fc4  08006fc4  00016fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08006fc8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027ac  20000118  080070e0  00020118  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200028c4  080070e0  000228c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010101  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002053  00000000  00000000  00030249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  000322a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  000331f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169a8  00000000  00000000  00034080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb52  00000000  00000000  0004aa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f7b9  00000000  00000000  0005a57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9d33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045fc  00000000  00000000  000e9d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000118 	.word	0x20000118
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006f80 	.word	0x08006f80

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000011c 	.word	0x2000011c
 80001d4:	08006f80 	.word	0x08006f80

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b96e 	b.w	8000e08 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9d08      	ldr	r5, [sp, #32]
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	468c      	mov	ip, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f040 8083 	bne.w	8000c5a <__udivmoddi4+0x116>
 8000b54:	428a      	cmp	r2, r1
 8000b56:	4617      	mov	r7, r2
 8000b58:	d947      	bls.n	8000bea <__udivmoddi4+0xa6>
 8000b5a:	fab2 f282 	clz	r2, r2
 8000b5e:	b142      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b60:	f1c2 0020 	rsb	r0, r2, #32
 8000b64:	fa24 f000 	lsr.w	r0, r4, r0
 8000b68:	4091      	lsls	r1, r2
 8000b6a:	4097      	lsls	r7, r2
 8000b6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b70:	4094      	lsls	r4, r2
 8000b72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b76:	0c23      	lsrs	r3, r4, #16
 8000b78:	fbbc f6f8 	udiv	r6, ip, r8
 8000b7c:	fa1f fe87 	uxth.w	lr, r7
 8000b80:	fb08 c116 	mls	r1, r8, r6, ip
 8000b84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b88:	fb06 f10e 	mul.w	r1, r6, lr
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x60>
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b96:	f080 8119 	bcs.w	8000dcc <__udivmoddi4+0x288>
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	f240 8116 	bls.w	8000dcc <__udivmoddi4+0x288>
 8000ba0:	3e02      	subs	r6, #2
 8000ba2:	443b      	add	r3, r7
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bac:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb8:	45a6      	cmp	lr, r4
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x8c>
 8000bbc:	193c      	adds	r4, r7, r4
 8000bbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc2:	f080 8105 	bcs.w	8000dd0 <__udivmoddi4+0x28c>
 8000bc6:	45a6      	cmp	lr, r4
 8000bc8:	f240 8102 	bls.w	8000dd0 <__udivmoddi4+0x28c>
 8000bcc:	3802      	subs	r0, #2
 8000bce:	443c      	add	r4, r7
 8000bd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd4:	eba4 040e 	sub.w	r4, r4, lr
 8000bd8:	2600      	movs	r6, #0
 8000bda:	b11d      	cbz	r5, 8000be4 <__udivmoddi4+0xa0>
 8000bdc:	40d4      	lsrs	r4, r2
 8000bde:	2300      	movs	r3, #0
 8000be0:	e9c5 4300 	strd	r4, r3, [r5]
 8000be4:	4631      	mov	r1, r6
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	b902      	cbnz	r2, 8000bee <__udivmoddi4+0xaa>
 8000bec:	deff      	udf	#255	; 0xff
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	d150      	bne.n	8000c98 <__udivmoddi4+0x154>
 8000bf6:	1bcb      	subs	r3, r1, r7
 8000bf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	2601      	movs	r6, #1
 8000c02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c06:	0c21      	lsrs	r1, r4, #16
 8000c08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c10:	fb08 f30c 	mul.w	r3, r8, ip
 8000c14:	428b      	cmp	r3, r1
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0xe4>
 8000c18:	1879      	adds	r1, r7, r1
 8000c1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0xe2>
 8000c20:	428b      	cmp	r3, r1
 8000c22:	f200 80e9 	bhi.w	8000df8 <__udivmoddi4+0x2b4>
 8000c26:	4684      	mov	ip, r0
 8000c28:	1ac9      	subs	r1, r1, r3
 8000c2a:	b2a3      	uxth	r3, r4
 8000c2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c38:	fb08 f800 	mul.w	r8, r8, r0
 8000c3c:	45a0      	cmp	r8, r4
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x10c>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x10a>
 8000c48:	45a0      	cmp	r8, r4
 8000c4a:	f200 80d9 	bhi.w	8000e00 <__udivmoddi4+0x2bc>
 8000c4e:	4618      	mov	r0, r3
 8000c50:	eba4 0408 	sub.w	r4, r4, r8
 8000c54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c58:	e7bf      	b.n	8000bda <__udivmoddi4+0x96>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0x12e>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	f000 80b1 	beq.w	8000dc6 <__udivmoddi4+0x282>
 8000c64:	2600      	movs	r6, #0
 8000c66:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	fab3 f683 	clz	r6, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d14a      	bne.n	8000d10 <__udivmoddi4+0x1cc>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0x140>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 80b8 	bhi.w	8000df4 <__udivmoddi4+0x2b0>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb61 0103 	sbc.w	r1, r1, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	468c      	mov	ip, r1
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0a8      	beq.n	8000be4 <__udivmoddi4+0xa0>
 8000c92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c96:	e7a5      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000c98:	f1c2 0320 	rsb	r3, r2, #32
 8000c9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ca0:	4097      	lsls	r7, r2
 8000ca2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ca6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000caa:	40d9      	lsrs	r1, r3
 8000cac:	4330      	orrs	r0, r6
 8000cae:	0c03      	lsrs	r3, r0, #16
 8000cb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cb4:	fa1f f887 	uxth.w	r8, r7
 8000cb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc0:	fb06 f108 	mul.w	r1, r6, r8
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cca:	d909      	bls.n	8000ce0 <__udivmoddi4+0x19c>
 8000ccc:	18fb      	adds	r3, r7, r3
 8000cce:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cd2:	f080 808d 	bcs.w	8000df0 <__udivmoddi4+0x2ac>
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	f240 808a 	bls.w	8000df0 <__udivmoddi4+0x2ac>
 8000cdc:	3e02      	subs	r6, #2
 8000cde:	443b      	add	r3, r7
 8000ce0:	1a5b      	subs	r3, r3, r1
 8000ce2:	b281      	uxth	r1, r0
 8000ce4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf0:	fb00 f308 	mul.w	r3, r0, r8
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x1c4>
 8000cf8:	1879      	adds	r1, r7, r1
 8000cfa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cfe:	d273      	bcs.n	8000de8 <__udivmoddi4+0x2a4>
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d971      	bls.n	8000de8 <__udivmoddi4+0x2a4>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4439      	add	r1, r7
 8000d08:	1acb      	subs	r3, r1, r3
 8000d0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d0e:	e778      	b.n	8000c02 <__udivmoddi4+0xbe>
 8000d10:	f1c6 0c20 	rsb	ip, r6, #32
 8000d14:	fa03 f406 	lsl.w	r4, r3, r6
 8000d18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d1c:	431c      	orrs	r4, r3
 8000d1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d22:	fa01 f306 	lsl.w	r3, r1, r6
 8000d26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	0c3b      	lsrs	r3, r7, #16
 8000d32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d36:	fa1f f884 	uxth.w	r8, r4
 8000d3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d42:	fb09 fa08 	mul.w	sl, r9, r8
 8000d46:	458a      	cmp	sl, r1
 8000d48:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x220>
 8000d52:	1861      	adds	r1, r4, r1
 8000d54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d58:	d248      	bcs.n	8000dec <__udivmoddi4+0x2a8>
 8000d5a:	458a      	cmp	sl, r1
 8000d5c:	d946      	bls.n	8000dec <__udivmoddi4+0x2a8>
 8000d5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d62:	4421      	add	r1, r4
 8000d64:	eba1 010a 	sub.w	r1, r1, sl
 8000d68:	b2bf      	uxth	r7, r7
 8000d6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d76:	fb00 f808 	mul.w	r8, r0, r8
 8000d7a:	45b8      	cmp	r8, r7
 8000d7c:	d907      	bls.n	8000d8e <__udivmoddi4+0x24a>
 8000d7e:	19e7      	adds	r7, r4, r7
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d22e      	bcs.n	8000de4 <__udivmoddi4+0x2a0>
 8000d86:	45b8      	cmp	r8, r7
 8000d88:	d92c      	bls.n	8000de4 <__udivmoddi4+0x2a0>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4427      	add	r7, r4
 8000d8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d92:	eba7 0708 	sub.w	r7, r7, r8
 8000d96:	fba0 8902 	umull	r8, r9, r0, r2
 8000d9a:	454f      	cmp	r7, r9
 8000d9c:	46c6      	mov	lr, r8
 8000d9e:	4649      	mov	r1, r9
 8000da0:	d31a      	bcc.n	8000dd8 <__udivmoddi4+0x294>
 8000da2:	d017      	beq.n	8000dd4 <__udivmoddi4+0x290>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x27a>
 8000da6:	ebb3 020e 	subs.w	r2, r3, lr
 8000daa:	eb67 0701 	sbc.w	r7, r7, r1
 8000dae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000db2:	40f2      	lsrs	r2, r6
 8000db4:	ea4c 0202 	orr.w	r2, ip, r2
 8000db8:	40f7      	lsrs	r7, r6
 8000dba:	e9c5 2700 	strd	r2, r7, [r5]
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	462e      	mov	r6, r5
 8000dc8:	4628      	mov	r0, r5
 8000dca:	e70b      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000dcc:	4606      	mov	r6, r0
 8000dce:	e6e9      	b.n	8000ba4 <__udivmoddi4+0x60>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6fd      	b.n	8000bd0 <__udivmoddi4+0x8c>
 8000dd4:	4543      	cmp	r3, r8
 8000dd6:	d2e5      	bcs.n	8000da4 <__udivmoddi4+0x260>
 8000dd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ddc:	eb69 0104 	sbc.w	r1, r9, r4
 8000de0:	3801      	subs	r0, #1
 8000de2:	e7df      	b.n	8000da4 <__udivmoddi4+0x260>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e7d2      	b.n	8000d8e <__udivmoddi4+0x24a>
 8000de8:	4660      	mov	r0, ip
 8000dea:	e78d      	b.n	8000d08 <__udivmoddi4+0x1c4>
 8000dec:	4681      	mov	r9, r0
 8000dee:	e7b9      	b.n	8000d64 <__udivmoddi4+0x220>
 8000df0:	4666      	mov	r6, ip
 8000df2:	e775      	b.n	8000ce0 <__udivmoddi4+0x19c>
 8000df4:	4630      	mov	r0, r6
 8000df6:	e74a      	b.n	8000c8e <__udivmoddi4+0x14a>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	4439      	add	r1, r7
 8000dfe:	e713      	b.n	8000c28 <__udivmoddi4+0xe4>
 8000e00:	3802      	subs	r0, #2
 8000e02:	443c      	add	r4, r7
 8000e04:	e724      	b.n	8000c50 <__udivmoddi4+0x10c>
 8000e06:	bf00      	nop

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	0000      	movs	r0, r0
	...

08000e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e18:	f002 f8d2 	bl	8002fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1c:	f000 f964 	bl	80010e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e20:	f000 fb58 	bl	80014d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e24:	f000 fb2e 	bl	8001484 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e28:	f000 fb00 	bl	800142c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000e2c:	f000 f9f4 	bl	8001218 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e30:	f000 fa4a 	bl	80012c8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000e34:	f000 faac 	bl	8001390 <MX_TIM5_Init>
  MX_I2C1_Init();
 8000e38:	f000 f9c0 	bl	80011bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // start micro
  HAL_TIM_Base_Start_IT(&htim5);
 8000e3c:	4894      	ldr	r0, [pc, #592]	; (8001090 <main+0x280>)
 8000e3e:	f004 f87a 	bl	8004f36 <HAL_TIM_Base_Start_IT>

  // start PWM
  HAL_TIM_Base_Start(&htim3);
 8000e42:	4894      	ldr	r0, [pc, #592]	; (8001094 <main+0x284>)
 8000e44:	f004 f853 	bl	8004eee <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4892      	ldr	r0, [pc, #584]	; (8001094 <main+0x284>)
 8000e4c:	f004 f8c2 	bl	8004fd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e50:	2104      	movs	r1, #4
 8000e52:	4890      	ldr	r0, [pc, #576]	; (8001094 <main+0x284>)
 8000e54:	f004 f8be 	bl	8004fd4 <HAL_TIM_PWM_Start>


  // start QEI
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000e58:	213c      	movs	r1, #60	; 0x3c
 8000e5a:	488f      	ldr	r0, [pc, #572]	; (8001098 <main+0x288>)
 8000e5c:	f004 f97e 	bl	800515c <HAL_TIM_Encoder_Start>


  //init lowpass_filter
  for(int i = 0;i < 10;i++){
 8000e60:	2300      	movs	r3, #0
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	e00f      	b.n	8000e86 <main+0x76>
	  lowpass_filters[i].Wc = Wc_arr[i];
 8000e66:	4a8d      	ldr	r2, [pc, #564]	; (800109c <main+0x28c>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	488b      	ldr	r0, [pc, #556]	; (80010a0 <main+0x290>)
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	0149      	lsls	r1, r1, #5
 8000e78:	4401      	add	r1, r0
 8000e7a:	3118      	adds	r1, #24
 8000e7c:	e9c1 2300 	strd	r2, r3, [r1]
  for(int i = 0;i < 10;i++){
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3301      	adds	r3, #1
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b09      	cmp	r3, #9
 8000e8a:	ddec      	ble.n	8000e66 <main+0x56>
  }

  //init pid
  pids[0].dt = pids[1].dt = 0.02;
 8000e8c:	4985      	ldr	r1, [pc, #532]	; (80010a4 <main+0x294>)
 8000e8e:	a37a      	add	r3, pc, #488	; (adr r3, 8001078 <main+0x268>)
 8000e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e94:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 8000e98:	4b82      	ldr	r3, [pc, #520]	; (80010a4 <main+0x294>)
 8000e9a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8000e9e:	4981      	ldr	r1, [pc, #516]	; (80010a4 <main+0x294>)
 8000ea0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  pids[0].min = pids[1].min = -10000;
 8000ea4:	497f      	ldr	r1, [pc, #508]	; (80010a4 <main+0x294>)
 8000ea6:	a376      	add	r3, pc, #472	; (adr r3, 8001080 <main+0x270>)
 8000ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eac:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8000eb0:	4b7c      	ldr	r3, [pc, #496]	; (80010a4 <main+0x294>)
 8000eb2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8000eb6:	497b      	ldr	r1, [pc, #492]	; (80010a4 <main+0x294>)
 8000eb8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  pids[0].max = pids[1].max = 10000;
 8000ebc:	4979      	ldr	r1, [pc, #484]	; (80010a4 <main+0x294>)
 8000ebe:	a372      	add	r3, pc, #456	; (adr r3, 8001088 <main+0x278>)
 8000ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec4:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8000ec8:	4b76      	ldr	r3, [pc, #472]	; (80010a4 <main+0x294>)
 8000eca:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8000ece:	4975      	ldr	r1, [pc, #468]	; (80010a4 <main+0x294>)
 8000ed0:	e9c1 2308 	strd	r2, r3, [r1, #32]
  pids[0].tau = pids[1].tau = 0.02;
 8000ed4:	4973      	ldr	r1, [pc, #460]	; (80010a4 <main+0x294>)
 8000ed6:	a368      	add	r3, pc, #416	; (adr r3, 8001078 <main+0x268>)
 8000ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000edc:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8000ee0:	4b70      	ldr	r3, [pc, #448]	; (80010a4 <main+0x294>)
 8000ee2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8000ee6:	496f      	ldr	r1, [pc, #444]	; (80010a4 <main+0x294>)
 8000ee8:	e9c1 2306 	strd	r2, r3, [r1, #24]


  pids[0].kp = 500;
 8000eec:	496d      	ldr	r1, [pc, #436]	; (80010a4 <main+0x294>)
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	4b6d      	ldr	r3, [pc, #436]	; (80010a8 <main+0x298>)
 8000ef4:	e9c1 2300 	strd	r2, r3, [r1]
  pids[0].ki = 600;
 8000ef8:	496a      	ldr	r1, [pc, #424]	; (80010a4 <main+0x294>)
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	4b6b      	ldr	r3, [pc, #428]	; (80010ac <main+0x29c>)
 8000f00:	e9c1 2302 	strd	r2, r3, [r1, #8]
  pids[0].kd = 10;
 8000f04:	4967      	ldr	r1, [pc, #412]	; (80010a4 <main+0x294>)
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	4b69      	ldr	r3, [pc, #420]	; (80010b0 <main+0x2a0>)
 8000f0c:	e9c1 2304 	strd	r2, r3, [r1, #16]




  //PID position control
  pids[1].kp = 500;
 8000f10:	4964      	ldr	r1, [pc, #400]	; (80010a4 <main+0x294>)
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	4b64      	ldr	r3, [pc, #400]	; (80010a8 <main+0x298>)
 8000f18:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
  pids[1].ki = 1000;
 8000f1c:	4961      	ldr	r1, [pc, #388]	; (80010a4 <main+0x294>)
 8000f1e:	f04f 0200 	mov.w	r2, #0
 8000f22:	4b64      	ldr	r3, [pc, #400]	; (80010b4 <main+0x2a4>)
 8000f24:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
  pids[1].kd = 1;
 8000f28:	495e      	ldr	r1, [pc, #376]	; (80010a4 <main+0x294>)
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <main+0x2a8>)
 8000f30:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68



  //UART protocol
  UART2.huart = &huart2;
 8000f34:	4b61      	ldr	r3, [pc, #388]	; (80010bc <main+0x2ac>)
 8000f36:	4a62      	ldr	r2, [pc, #392]	; (80010c0 <main+0x2b0>)
 8000f38:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 8000f3a:	4b60      	ldr	r3, [pc, #384]	; (80010bc <main+0x2ac>)
 8000f3c:	22ff      	movs	r2, #255	; 0xff
 8000f3e:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8000f40:	4b5e      	ldr	r3, [pc, #376]	; (80010bc <main+0x2ac>)
 8000f42:	22ff      	movs	r2, #255	; 0xff
 8000f44:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 8000f46:	485d      	ldr	r0, [pc, #372]	; (80010bc <main+0x2ac>)
 8000f48:	f000 ffd6 	bl	8001ef8 <UARTInit>
  UARTResetStart(&UART2);
 8000f4c:	485b      	ldr	r0, [pc, #364]	; (80010bc <main+0x2ac>)
 8000f4e:	f000 fffb 	bl	8001f48 <UARTResetStart>


  enable_endeffector = 1;
 8000f52:	4b5c      	ldr	r3, [pc, #368]	; (80010c4 <main+0x2b4>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]

  targectory_cal(paths, &path_n_cnt, 0, 180, 0.02);
 8000f58:	ed9f 0b47 	vldr	d0, [pc, #284]	; 8001078 <main+0x268>
 8000f5c:	23b4      	movs	r3, #180	; 0xb4
 8000f5e:	2200      	movs	r2, #0
 8000f60:	4959      	ldr	r1, [pc, #356]	; (80010c8 <main+0x2b8>)
 8000f62:	485a      	ldr	r0, [pc, #360]	; (80010cc <main+0x2bc>)
 8000f64:	f000 fda4 	bl	8001ab0 <targectory_cal>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  moving_state_update();
 8000f68:	f001 fc7a 	bl	8002860 <moving_state_update>

	  encoder_lowpass_update();
 8000f6c:	f001 fbf0 	bl	8002750 <encoder_lowpass_update>

	  end_effector_update();
 8000f70:	f001 fd48 	bl	8002a04 <end_effector_update>

	  //pid control , system dead-time = 0.16 sec = 6.25 Hz 165000
	  if(micros() - time_stamp2 > 20000){ // 6.06Hz
 8000f74:	f000 ff8c 	bl	8001e90 <micros>
 8000f78:	4b55      	ldr	r3, [pc, #340]	; (80010d0 <main+0x2c0>)
 8000f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7e:	1a84      	subs	r4, r0, r2
 8000f80:	eb61 0503 	sbc.w	r5, r1, r3
 8000f84:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	42ab      	cmp	r3, r5
 8000f8e:	bf08      	it	eq
 8000f90:	42a2      	cmpeq	r2, r4
 8000f92:	d26b      	bcs.n	800106c <main+0x25c>
		  time_stamp2 = micros();
 8000f94:	f000 ff7c 	bl	8001e90 <micros>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	494c      	ldr	r1, [pc, #304]	; (80010d0 <main+0x2c0>)
 8000f9e:	e9c1 2300 	strd	r2, r3, [r1]


		  setpoint = paths_ind < path_n_cnt ? paths[paths_ind++]/6:0;
 8000fa2:	4b4c      	ldr	r3, [pc, #304]	; (80010d4 <main+0x2c4>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4b48      	ldr	r3, [pc, #288]	; (80010c8 <main+0x2b8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	da11      	bge.n	8000fd2 <main+0x1c2>
 8000fae:	4b49      	ldr	r3, [pc, #292]	; (80010d4 <main+0x2c4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	4947      	ldr	r1, [pc, #284]	; (80010d4 <main+0x2c4>)
 8000fb6:	600a      	str	r2, [r1, #0]
 8000fb8:	4a44      	ldr	r2, [pc, #272]	; (80010cc <main+0x2bc>)
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	4413      	add	r3, r2
 8000fbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	4b44      	ldr	r3, [pc, #272]	; (80010d8 <main+0x2c8>)
 8000fc8:	f7ff fbec 	bl	80007a4 <__aeabi_ddiv>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	e003      	b.n	8000fda <main+0x1ca>
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	4940      	ldr	r1, [pc, #256]	; (80010dc <main+0x2cc>)
 8000fdc:	e9c1 2300 	strd	r2, r3, [r1]
		  pid_pwm_output = pid_update(&pids[0], setpoint, encoder_velocity_rpm);
 8000fe0:	4b3e      	ldr	r3, [pc, #248]	; (80010dc <main+0x2cc>)
 8000fe2:	ed93 7b00 	vldr	d7, [r3]
 8000fe6:	4b3e      	ldr	r3, [pc, #248]	; (80010e0 <main+0x2d0>)
 8000fe8:	ed93 6b00 	vldr	d6, [r3]
 8000fec:	eeb0 1a46 	vmov.f32	s2, s12
 8000ff0:	eef0 1a66 	vmov.f32	s3, s13
 8000ff4:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff8:	eef0 0a67 	vmov.f32	s1, s15
 8000ffc:	4829      	ldr	r0, [pc, #164]	; (80010a4 <main+0x294>)
 8000ffe:	f000 fc0f 	bl	8001820 <pid_update>
 8001002:	eeb0 7a40 	vmov.f32	s14, s0
 8001006:	eef0 7a60 	vmov.f32	s15, s1
 800100a:	4b36      	ldr	r3, [pc, #216]	; (80010e4 <main+0x2d4>)
 800100c:	ed83 7b00 	vstr	d7, [r3]
			}
			pid_pwm_output = pid_update(&pids[1], setpoint, (double)encoder_value/(12*64*4-1)*360);
		   */


		  if(pid_pwm_output > 0){
 8001010:	4b34      	ldr	r3, [pc, #208]	; (80010e4 <main+0x2d4>)
 8001012:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	f04f 0300 	mov.w	r3, #0
 800101e:	f7ff fd27 	bl	8000a70 <__aeabi_dcmpgt>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00f      	beq.n	8001048 <main+0x238>
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,pid_pwm_output);
 8001028:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <main+0x2d4>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	4919      	ldr	r1, [pc, #100]	; (8001094 <main+0x284>)
 8001030:	680e      	ldr	r6, [r1, #0]
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fd4d 	bl	8000ad4 <__aeabi_d2uiz>
 800103a:	4603      	mov	r3, r0
 800103c:	6373      	str	r3, [r6, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <main+0x284>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2200      	movs	r2, #0
 8001044:	639a      	str	r2, [r3, #56]	; 0x38
 8001046:	e011      	b.n	800106c <main+0x25c>
		  }
		  else{
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <main+0x284>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2200      	movs	r2, #0
 800104e:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,-pid_pwm_output);
 8001050:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <main+0x2d4>)
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001056:	4690      	mov	r8, r2
 8001058:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <main+0x284>)
 800105e:	681e      	ldr	r6, [r3, #0]
 8001060:	4640      	mov	r0, r8
 8001062:	4649      	mov	r1, r9
 8001064:	f7ff fd36 	bl	8000ad4 <__aeabi_d2uiz>
 8001068:	4603      	mov	r3, r0
 800106a:	63b3      	str	r3, [r6, #56]	; 0x38
		  }
	  }


	  uart_update();
 800106c:	f001 fbdc 	bl	8002828 <uart_update>
	  moving_state_update();
 8001070:	e77a      	b.n	8000f68 <main+0x158>
 8001072:	bf00      	nop
 8001074:	f3af 8000 	nop.w
 8001078:	47ae147b 	.word	0x47ae147b
 800107c:	3f947ae1 	.word	0x3f947ae1
 8001080:	00000000 	.word	0x00000000
 8001084:	c0c38800 	.word	0xc0c38800
 8001088:	00000000 	.word	0x00000000
 800108c:	40c38800 	.word	0x40c38800
 8001090:	20002750 	.word	0x20002750
 8001094:	20002790 	.word	0x20002790
 8001098:	20002830 	.word	0x20002830
 800109c:	20000000 	.word	0x20000000
 80010a0:	20000188 	.word	0x20000188
 80010a4:	20000340 	.word	0x20000340
 80010a8:	407f4000 	.word	0x407f4000
 80010ac:	4082c000 	.word	0x4082c000
 80010b0:	40240000 	.word	0x40240000
 80010b4:	408f4000 	.word	0x408f4000
 80010b8:	3ff00000 	.word	0x3ff00000
 80010bc:	20000134 	.word	0x20000134
 80010c0:	20002870 	.word	0x20002870
 80010c4:	20002552 	.word	0x20002552
 80010c8:	20002344 	.word	0x20002344
 80010cc:	20000400 	.word	0x20000400
 80010d0:	20000178 	.word	0x20000178
 80010d4:	20002340 	.word	0x20002340
 80010d8:	40180000 	.word	0x40180000
 80010dc:	200003f8 	.word	0x200003f8
 80010e0:	20000168 	.word	0x20000168
 80010e4:	200003f0 	.word	0x200003f0

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	; 0x50
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	2230      	movs	r2, #48	; 0x30
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f005 feb2 	bl	8006e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <SystemClock_Config+0xcc>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	4a27      	ldr	r2, [pc, #156]	; (80011b4 <SystemClock_Config+0xcc>)
 8001116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111a:	6413      	str	r3, [r2, #64]	; 0x40
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <SystemClock_Config+0xcc>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <SystemClock_Config+0xd0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <SystemClock_Config+0xd0>)
 8001132:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <SystemClock_Config+0xd0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001144:	2302      	movs	r3, #2
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001148:	2301      	movs	r3, #1
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114c:	2310      	movs	r3, #16
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001150:	2302      	movs	r3, #2
 8001152:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001154:	2300      	movs	r3, #0
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001158:	2310      	movs	r3, #16
 800115a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800115c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001160:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001162:	2304      	movs	r3, #4
 8001164:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001166:	2304      	movs	r3, #4
 8001168:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116a:	f107 0320 	add.w	r3, r7, #32
 800116e:	4618      	mov	r0, r3
 8001170:	f003 fa26 	bl	80045c0 <HAL_RCC_OscConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800117a:	f001 fc61 	bl	8002a40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001182:	2302      	movs	r3, #2
 8001184:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800118a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2102      	movs	r1, #2
 800119a:	4618      	mov	r0, r3
 800119c:	f003 fc80 	bl	8004aa0 <HAL_RCC_ClockConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011a6:	f001 fc4b 	bl	8002a40 <Error_Handler>
  }
}
 80011aa:	bf00      	nop
 80011ac:	3750      	adds	r7, #80	; 0x50
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40007000 	.word	0x40007000

080011bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_I2C1_Init+0x50>)
 80011c2:	4a13      	ldr	r2, [pc, #76]	; (8001210 <MX_I2C1_Init+0x54>)
 80011c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_I2C1_Init+0x50>)
 80011c8:	4a12      	ldr	r2, [pc, #72]	; (8001214 <MX_I2C1_Init+0x58>)
 80011ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_I2C1_Init+0x50>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_I2C1_Init+0x50>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_I2C1_Init+0x50>)
 80011da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <MX_I2C1_Init+0x50>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_I2C1_Init+0x50>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ec:	4b07      	ldr	r3, [pc, #28]	; (800120c <MX_I2C1_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_I2C1_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <MX_I2C1_Init+0x50>)
 80011fa:	f002 fd95 	bl	8003d28 <HAL_I2C_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001204:	f001 fc1c 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200026fc 	.word	0x200026fc
 8001210:	40005400 	.word	0x40005400
 8001214:	000186a0 	.word	0x000186a0

08001218 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	; 0x30
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	2224      	movs	r2, #36	; 0x24
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f005 fe1a 	bl	8006e60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001234:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <MX_TIM1_Init+0xa8>)
 8001236:	4a23      	ldr	r2, [pc, #140]	; (80012c4 <MX_TIM1_Init+0xac>)
 8001238:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <MX_TIM1_Init+0xa8>)
 800123c:	2200      	movs	r2, #0
 800123e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <MX_TIM1_Init+0xa8>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = (12*64*4) -1;
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <MX_TIM1_Init+0xa8>)
 8001248:	f640 32ff 	movw	r2, #3071	; 0xbff
 800124c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <MX_TIM1_Init+0xa8>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_TIM1_Init+0xa8>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <MX_TIM1_Init+0xa8>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001260:	2303      	movs	r3, #3
 8001262:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001268:	2301      	movs	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001278:	2301      	movs	r3, #1
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	4619      	mov	r1, r3
 800128a:	480d      	ldr	r0, [pc, #52]	; (80012c0 <MX_TIM1_Init+0xa8>)
 800128c:	f003 fed4 	bl	8005038 <HAL_TIM_Encoder_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001296:	f001 fbd3 	bl	8002a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <MX_TIM1_Init+0xa8>)
 80012a8:	f004 fd16 	bl	8005cd8 <HAL_TIMEx_MasterConfigSynchronization>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80012b2:	f001 fbc5 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	3730      	adds	r7, #48	; 0x30
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20002830 	.word	0x20002830
 80012c4:	40010000 	.word	0x40010000

080012c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ce:	f107 0320 	add.w	r3, r7, #32
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ea:	4b27      	ldr	r3, [pc, #156]	; (8001388 <MX_TIM3_Init+0xc0>)
 80012ec:	4a27      	ldr	r2, [pc, #156]	; (800138c <MX_TIM3_Init+0xc4>)
 80012ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012f0:	4b25      	ldr	r3, [pc, #148]	; (8001388 <MX_TIM3_Init+0xc0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f6:	4b24      	ldr	r3, [pc, #144]	; (8001388 <MX_TIM3_Init+0xc0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <MX_TIM3_Init+0xc0>)
 80012fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8001302:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001304:	4b20      	ldr	r3, [pc, #128]	; (8001388 <MX_TIM3_Init+0xc0>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <MX_TIM3_Init+0xc0>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001310:	481d      	ldr	r0, [pc, #116]	; (8001388 <MX_TIM3_Init+0xc0>)
 8001312:	f003 fe34 	bl	8004f7e <HAL_TIM_PWM_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800131c:	f001 fb90 	bl	8002a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001328:	f107 0320 	add.w	r3, r7, #32
 800132c:	4619      	mov	r1, r3
 800132e:	4816      	ldr	r0, [pc, #88]	; (8001388 <MX_TIM3_Init+0xc0>)
 8001330:	f004 fcd2 	bl	8005cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800133a:	f001 fb81 	bl	8002a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800133e:	2360      	movs	r3, #96	; 0x60
 8001340:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2200      	movs	r2, #0
 8001352:	4619      	mov	r1, r3
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <MX_TIM3_Init+0xc0>)
 8001356:	f004 f841 	bl	80053dc <HAL_TIM_PWM_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001360:	f001 fb6e 	bl	8002a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2204      	movs	r2, #4
 8001368:	4619      	mov	r1, r3
 800136a:	4807      	ldr	r0, [pc, #28]	; (8001388 <MX_TIM3_Init+0xc0>)
 800136c:	f004 f836 	bl	80053dc <HAL_TIM_PWM_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001376:	f001 fb63 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800137a:	4803      	ldr	r0, [pc, #12]	; (8001388 <MX_TIM3_Init+0xc0>)
 800137c:	f001 fc68 	bl	8002c50 <HAL_TIM_MspPostInit>

}
 8001380:	bf00      	nop
 8001382:	3728      	adds	r7, #40	; 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20002790 	.word	0x20002790
 800138c:	40000400 	.word	0x40000400

08001390 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	463b      	mov	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <MX_TIM5_Init+0x94>)
 80013ae:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <MX_TIM5_Init+0x98>)
 80013b0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <MX_TIM5_Init+0x94>)
 80013b4:	2263      	movs	r2, #99	; 0x63
 80013b6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_TIM5_Init+0x94>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <MX_TIM5_Init+0x94>)
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <MX_TIM5_Init+0x94>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <MX_TIM5_Init+0x94>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013d2:	4814      	ldr	r0, [pc, #80]	; (8001424 <MX_TIM5_Init+0x94>)
 80013d4:	f003 fd60 	bl	8004e98 <HAL_TIM_Base_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80013de:	f001 fb2f 	bl	8002a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	4619      	mov	r1, r3
 80013ee:	480d      	ldr	r0, [pc, #52]	; (8001424 <MX_TIM5_Init+0x94>)
 80013f0:	f004 f8ba 	bl	8005568 <HAL_TIM_ConfigClockSource>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80013fa:	f001 fb21 	bl	8002a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001406:	463b      	mov	r3, r7
 8001408:	4619      	mov	r1, r3
 800140a:	4806      	ldr	r0, [pc, #24]	; (8001424 <MX_TIM5_Init+0x94>)
 800140c:	f004 fc64 	bl	8005cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001416:	f001 fb13 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20002750 	.word	0x20002750
 8001428:	40000c00 	.word	0x40000c00

0800142c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <MX_USART2_UART_Init+0x50>)
 8001432:	4a13      	ldr	r2, [pc, #76]	; (8001480 <MX_USART2_UART_Init+0x54>)
 8001434:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_USART2_UART_Init+0x50>)
 8001438:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 800143c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_USART2_UART_Init+0x50>)
 8001440:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001444:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <MX_USART2_UART_Init+0x50>)
 8001448:	2200      	movs	r2, #0
 800144a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_USART2_UART_Init+0x50>)
 800144e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001452:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_USART2_UART_Init+0x50>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_USART2_UART_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_USART2_UART_Init+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_USART2_UART_Init+0x50>)
 8001468:	f004 fcb8 	bl	8005ddc <HAL_UART_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001472:	f001 fae5 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20002870 	.word	0x20002870
 8001480:	40004400 	.word	0x40004400

08001484 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <MX_DMA_Init+0x4c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <MX_DMA_Init+0x4c>)
 8001494:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <MX_DMA_Init+0x4c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2010      	movs	r0, #16
 80014ac:	f001 fed5 	bl	800325a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80014b0:	2010      	movs	r0, #16
 80014b2:	f001 feee 	bl	8003292 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	2011      	movs	r0, #17
 80014bc:	f001 fecd 	bl	800325a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80014c0:	2011      	movs	r0, #17
 80014c2:	f001 fee6 	bl	8003292 <HAL_NVIC_EnableIRQ>

}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <MX_GPIO_Init+0xd0>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a2c      	ldr	r2, [pc, #176]	; (80015a4 <MX_GPIO_Init+0xd0>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <MX_GPIO_Init+0xd0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <MX_GPIO_Init+0xd0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a25      	ldr	r2, [pc, #148]	; (80015a4 <MX_GPIO_Init+0xd0>)
 8001510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <MX_GPIO_Init+0xd0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <MX_GPIO_Init+0xd0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <MX_GPIO_Init+0xd0>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <MX_GPIO_Init+0xd0>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <MX_GPIO_Init+0xd0>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <MX_GPIO_Init+0xd0>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <MX_GPIO_Init+0xd0>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	2120      	movs	r1, #32
 800155e:	4812      	ldr	r0, [pc, #72]	; (80015a8 <MX_GPIO_Init+0xd4>)
 8001560:	f002 fbc8 	bl	8003cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_GPIO_Init+0xd8>)
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	480d      	ldr	r0, [pc, #52]	; (80015b0 <MX_GPIO_Init+0xdc>)
 800157a:	f002 fa37 	bl	80039ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800157e:	2320      	movs	r3, #32
 8001580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_GPIO_Init+0xd4>)
 8001596:	f002 fa29 	bl	80039ec <HAL_GPIO_Init>

}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	; 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	10210000 	.word	0x10210000
 80015b0:	40020800 	.word	0x40020800

080015b4 <unwraping_update>:
static int pre_enc_cnt = 0;
static int k = 0;

#define half_enc_cnt (12*64*4)/2
#define enc_cnt 12*64*4
int unwraping_update(){
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

	static int cur_enc_cnt = 0;

	cur_enc_cnt = TIM1->CNT;
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <unwraping_update+0x6c>)
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	461a      	mov	r2, r3
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <unwraping_update+0x70>)
 80015c0:	601a      	str	r2, [r3, #0]


	if(abs((int)cur_enc_cnt - pre_enc_cnt) > half_enc_cnt){
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <unwraping_update+0x70>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <unwraping_update+0x74>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bfb8      	it	lt
 80015d0:	425b      	neglt	r3, r3
 80015d2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80015d6:	dd0f      	ble.n	80015f8 <unwraping_update+0x44>
		k+= (int)cur_enc_cnt - pre_enc_cnt > 0 ? -1 : 1 ;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <unwraping_update+0x70>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <unwraping_update+0x74>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	dd02      	ble.n	80015ec <unwraping_update+0x38>
 80015e6:	f04f 32ff 	mov.w	r2, #4294967295
 80015ea:	e000      	b.n	80015ee <unwraping_update+0x3a>
 80015ec:	2201      	movs	r2, #1
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <unwraping_update+0x78>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a0d      	ldr	r2, [pc, #52]	; (800162c <unwraping_update+0x78>)
 80015f6:	6013      	str	r3, [r2, #0]
	}

	pre_enc_cnt = cur_enc_cnt;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <unwraping_update+0x70>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <unwraping_update+0x74>)
 80015fe:	6013      	str	r3, [r2, #0]
	return enc_cnt * k + cur_enc_cnt;
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <unwraping_update+0x78>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	029b      	lsls	r3, r3, #10
 800160c:	461a      	mov	r2, r3
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <unwraping_update+0x70>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40010000 	.word	0x40010000
 8001624:	2000267c 	.word	0x2000267c
 8001628:	2000256c 	.word	0x2000256c
 800162c:	20002570 	.word	0x20002570

08001630 <velocity_update>:

double velocity_update(int cur_pos){
 8001630:	b5b0      	push	{r4, r5, r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	static int pre_pos = 0;
	static int pre_time = 0;
	static int cur_time = 0;

	cur_time = micros();
 8001638:	f000 fc2a 	bl	8001e90 <micros>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <velocity_update+0x70>)
 8001642:	601a      	str	r2, [r3, #0]

	double velo = (double)(cur_pos - pre_pos)/(cur_time - pre_time);
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <velocity_update+0x74>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff15 	bl	800047c <__aeabi_i2d>
 8001652:	4604      	mov	r4, r0
 8001654:	460d      	mov	r5, r1
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <velocity_update+0x70>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <velocity_update+0x78>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff0b 	bl	800047c <__aeabi_i2d>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4620      	mov	r0, r4
 800166c:	4629      	mov	r1, r5
 800166e:	f7ff f899 	bl	80007a4 <__aeabi_ddiv>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pre_pos = cur_pos;
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <velocity_update+0x74>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6013      	str	r3, [r2, #0]
	pre_time = cur_time;
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <velocity_update+0x70>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <velocity_update+0x78>)
 8001686:	6013      	str	r3, [r2, #0]

	return velo;
 8001688:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800168c:	ec43 2b17 	vmov	d7, r2, r3

}
 8001690:	eeb0 0a47 	vmov.f32	s0, s14
 8001694:	eef0 0a67 	vmov.f32	s1, s15
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bdb0      	pop	{r4, r5, r7, pc}
 800169e:	bf00      	nop
 80016a0:	20002680 	.word	0x20002680
 80016a4:	20002684 	.word	0x20002684
 80016a8:	20002688 	.word	0x20002688
 80016ac:	00000000 	.word	0x00000000

080016b0 <ppms_to_rpm>:

double ppms_to_rpm(double input){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	ed87 0b00 	vstr	d0, [r7]
	return input*60e6/(enc_cnt);
 80016ba:	a30e      	add	r3, pc, #56	; (adr r3, 80016f4 <ppms_to_rpm+0x44>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016c4:	f7fe ff44 	bl	8000550 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <ppms_to_rpm+0x40>)
 80016d6:	f7ff f865 	bl	80007a4 <__aeabi_ddiv>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	ec43 2b17 	vmov	d7, r2, r3
}
 80016e2:	eeb0 0a47 	vmov.f32	s0, s14
 80016e6:	eef0 0a67 	vmov.f32	s1, s15
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40a80000 	.word	0x40a80000
 80016f4:	00000000 	.word	0x00000000
 80016f8:	418c9c38 	.word	0x418c9c38

080016fc <low_pass_process>:

double low_pass_process(LowPass *lowpass,double input){
 80016fc:	b5b0      	push	{r4, r5, r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	ed87 0b00 	vstr	d0, [r7]

	double cur_time = micros();
 8001708:	f000 fbc2 	bl	8001e90 <micros>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7fe fee6 	bl	80004e4 <__aeabi_ul2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double delta_t = cur_time - lowpass->pre_time;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001726:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800172a:	f7fe fd59 	bl	80001e0 <__aeabi_dsub>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double k = (lowpass->Wc*delta_t)/(2+ lowpass->Wc*delta_t);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800173c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001740:	f7fe ff06 	bl	8000550 <__aeabi_dmul>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4614      	mov	r4, r2
 800174a:	461d      	mov	r5, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001752:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001756:	f7fe fefb 	bl	8000550 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800176a:	f7fe fd3b 	bl	80001e4 <__adddf3>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4620      	mov	r0, r4
 8001774:	4629      	mov	r1, r5
 8001776:	f7ff f815 	bl	80007a4 <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double output = (1 - 2*k)*(lowpass->pre_output) +k*(input+lowpass->pre_input);
 8001782:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	f7fe fd2b 	bl	80001e4 <__adddf3>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	f04f 0000 	mov.w	r0, #0
 8001796:	4921      	ldr	r1, [pc, #132]	; (800181c <low_pass_process+0x120>)
 8001798:	f7fe fd22 	bl	80001e0 <__aeabi_dsub>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017aa:	f7fe fed1 	bl	8000550 <__aeabi_dmul>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4614      	mov	r4, r2
 80017b4:	461d      	mov	r5, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017c0:	f7fe fd10 	bl	80001e4 <__adddf3>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017d0:	f7fe febe 	bl	8000550 <__aeabi_dmul>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4620      	mov	r0, r4
 80017da:	4629      	mov	r1, r5
 80017dc:	f7fe fd02 	bl	80001e4 <__adddf3>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	lowpass->pre_time = cur_time;
 80017e8:	68f9      	ldr	r1, [r7, #12]
 80017ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
	lowpass->pre_input = input;
 80017f2:	68f9      	ldr	r1, [r7, #12]
 80017f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017f8:	e9c1 2300 	strd	r2, r3, [r1]
	lowpass->pre_output = output;
 80017fc:	68f9      	ldr	r1, [r7, #12]
 80017fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001802:	e9c1 2302 	strd	r2, r3, [r1, #8]

	return output;
 8001806:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800180a:	ec43 2b17 	vmov	d7, r2, r3
}
 800180e:	eeb0 0a47 	vmov.f32	s0, s14
 8001812:	eef0 0a67 	vmov.f32	s1, s15
 8001816:	3730      	adds	r7, #48	; 0x30
 8001818:	46bd      	mov	sp, r7
 800181a:	bdb0      	pop	{r4, r5, r7, pc}
 800181c:	3ff00000 	.word	0x3ff00000

08001820 <pid_update>:
	P = (1-K*H)*P+Q;

	return U_hat;
}

double pid_update(PID *pid,double setpoint,double mea){
 8001820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001824:	b090      	sub	sp, #64	; 0x40
 8001826:	af00      	add	r7, sp, #0
 8001828:	6178      	str	r0, [r7, #20]
 800182a:	ed87 0b02 	vstr	d0, [r7, #8]
 800182e:	ed87 1b00 	vstr	d1, [r7]

	//Error
	double error = setpoint - mea;
 8001832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001836:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800183a:	f7fe fcd1 	bl	80001e0 <__aeabi_dsub>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	//Proportional
	double proportional = pid->kp * error;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001850:	f7fe fe7e 	bl	8000550 <__aeabi_dmul>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	//Integral
	pid->integral = pid->integral + 0.5f * pid->ki * pid->dt * (error + pid->pre_error);
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	e9d3 890e 	ldrd	r8, r9, [r3, #56]	; 0x38
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	4b8f      	ldr	r3, [pc, #572]	; (8001aac <pid_update+0x28c>)
 800186e:	f7fe fe6f 	bl	8000550 <__aeabi_dmul>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001880:	f7fe fe66 	bl	8000550 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4692      	mov	sl, r2
 800188a:	469b      	mov	fp, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001892:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001896:	f7fe fca5 	bl	80001e4 <__adddf3>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4650      	mov	r0, sl
 80018a0:	4659      	mov	r1, fp
 80018a2:	f7fe fe55 	bl	8000550 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4640      	mov	r0, r8
 80018ac:	4649      	mov	r1, r9
 80018ae:	f7fe fc99 	bl	80001e4 <__adddf3>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	6979      	ldr	r1, [r7, #20]
 80018b8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	//calculate integral anti wind up
	double max_i,min_i;

	max_i = pid->max > proportional ? pid->max - proportional : 0;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80018c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018c6:	f7ff f8b5 	bl	8000a34 <__aeabi_dcmplt>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d009      	beq.n	80018e4 <pid_update+0xc4>
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80018d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018da:	f7fe fc81 	bl	80001e0 <__aeabi_dsub>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	e003      	b.n	80018ec <pid_update+0xcc>
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
	min_i = pid->min < proportional ? pid->min - proportional : 0;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80018f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018fa:	f7ff f8b9 	bl	8000a70 <__aeabi_dcmpgt>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d009      	beq.n	8001918 <pid_update+0xf8>
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800190a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800190e:	f7fe fc67 	bl	80001e0 <__aeabi_dsub>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	e003      	b.n	8001920 <pid_update+0x100>
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	e9c7 2306 	strd	r2, r3, [r7, #24]


	//integral clamp
	if(pid->integral > max_i){
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800192a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800192e:	f7ff f881 	bl	8000a34 <__aeabi_dcmplt>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <pid_update+0x124>
		pid->integral = max_i;
 8001938:	6979      	ldr	r1, [r7, #20]
 800193a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800193e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001942:	e00e      	b.n	8001962 <pid_update+0x142>
	}
	else if(pid->integral < min_i){
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800194a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800194e:	f7ff f88f 	bl	8000a70 <__aeabi_dcmpgt>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d004      	beq.n	8001962 <pid_update+0x142>
		pid->integral = min_i;
 8001958:	6979      	ldr	r1, [r7, #20]
 800195a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800195e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	}

	//Derivative
	pid->diff = -(2.0f * pid->kd * (mea - pid->pre_mea) + (2.0f * pid->tau - pid->dt) * pid->diff) / (2.0f * pid->tau + pid->dt);
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	f7fe fc3a 	bl	80001e4 <__adddf3>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4690      	mov	r8, r2
 8001976:	4699      	mov	r9, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800197e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001982:	f7fe fc2d 	bl	80001e0 <__aeabi_dsub>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4640      	mov	r0, r8
 800198c:	4649      	mov	r1, r9
 800198e:	f7fe fddf 	bl	8000550 <__aeabi_dmul>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4690      	mov	r8, r2
 8001998:	4699      	mov	r9, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	f7fe fc1e 	bl	80001e4 <__adddf3>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80019b6:	f7fe fc13 	bl	80001e0 <__aeabi_dsub>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80019c8:	f7fe fdc2 	bl	8000550 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4640      	mov	r0, r8
 80019d2:	4649      	mov	r1, r9
 80019d4:	f7fe fc06 	bl	80001e4 <__adddf3>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4614      	mov	r4, r2
 80019de:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	f7fe fbfa 	bl	80001e4 <__adddf3>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80019fe:	f7fe fbf1 	bl	80001e4 <__adddf3>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4620      	mov	r0, r4
 8001a08:	4629      	mov	r1, r5
 8001a0a:	f7fe fecb 	bl	80007a4 <__aeabi_ddiv>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	6979      	ldr	r1, [r7, #20]
 8001a14:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	double output = proportional + pid->integral + pid->diff;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001a1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a22:	f7fe fbdf 	bl	80001e4 <__adddf3>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001a34:	f7fe fbd6 	bl	80001e4 <__adddf3>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	if(output > pid->max){
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001a46:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a4a:	f7ff f811 	bl	8000a70 <__aeabi_dcmpgt>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <pid_update+0x240>
		output = pid->max;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001a5a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001a5e:	e00e      	b.n	8001a7e <pid_update+0x25e>
	}
	else if(output < pid->min){
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001a66:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a6a:	f7fe ffe3 	bl	8000a34 <__aeabi_dcmplt>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d004      	beq.n	8001a7e <pid_update+0x25e>
		output = pid->min;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001a7a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}

	pid->pre_error = error;
 8001a7e:	6979      	ldr	r1, [r7, #20]
 8001a80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a84:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pid->pre_mea = mea;
 8001a88:	6979      	ldr	r1, [r7, #20]
 8001a8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a8e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	return output;
 8001a92:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001a96:	ec43 2b17 	vmov	d7, r2, r3

}
 8001a9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a9e:	eef0 0a67 	vmov.f32	s1, s15
 8001aa2:	3740      	adds	r7, #64	; 0x40
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aaa:	bf00      	nop
 8001aac:	3fe00000 	.word	0x3fe00000

08001ab0 <targectory_cal>:


void targectory_cal(double *datas,int *n,int start_pos,int stop_pos,double dt){
 8001ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ab4:	b09f      	sub	sp, #124	; 0x7c
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6178      	str	r0, [r7, #20]
 8001aba:	6139      	str	r1, [r7, #16]
 8001abc:	60fa      	str	r2, [r7, #12]
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	ed87 0b00 	vstr	d0, [r7]

    double v_max = 10*6;            // degree per sec
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	4b7f      	ldr	r3, [pc, #508]	; (8001cc8 <targectory_cal+0x218>)
 8001aca:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    double a_max = 0.5 * 57.296;    // degree per sec^2
 8001ace:	a37c      	add	r3, pc, #496	; (adr r3, 8001cc0 <targectory_cal+0x210>)
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

    int dis = (stop_pos - start_pos +360)%360;
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ae2:	4a7a      	ldr	r2, [pc, #488]	; (8001ccc <targectory_cal+0x21c>)
 8001ae4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ae8:	441a      	add	r2, r3
 8001aea:	1211      	asrs	r1, r2, #8
 8001aec:	17da      	asrs	r2, r3, #31
 8001aee:	1a8a      	subs	r2, r1, r2
 8001af0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001af4:	fb01 f202 	mul.w	r2, r1, r2
 8001af8:	1a9b      	subs	r3, r3, r2
 8001afa:	677b      	str	r3, [r7, #116]	; 0x74
    int inverse = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	673b      	str	r3, [r7, #112]	; 0x70
    if ((start_pos - stop_pos +360)%360 < dis){
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b0a:	4a70      	ldr	r2, [pc, #448]	; (8001ccc <targectory_cal+0x21c>)
 8001b0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b10:	441a      	add	r2, r3
 8001b12:	1211      	asrs	r1, r2, #8
 8001b14:	17da      	asrs	r2, r3, #31
 8001b16:	1a8a      	subs	r2, r1, r2
 8001b18:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001b1c:	fb01 f202 	mul.w	r2, r1, r2
 8001b20:	1a9a      	subs	r2, r3, r2
 8001b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b24:	4293      	cmp	r3, r2
 8001b26:	dd13      	ble.n	8001b50 <targectory_cal+0xa0>
        inverse = 1;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	673b      	str	r3, [r7, #112]	; 0x70
        dis = (start_pos - stop_pos +360)%360;
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b36:	4a65      	ldr	r2, [pc, #404]	; (8001ccc <targectory_cal+0x21c>)
 8001b38:	fb82 1203 	smull	r1, r2, r2, r3
 8001b3c:	441a      	add	r2, r3
 8001b3e:	1211      	asrs	r1, r2, #8
 8001b40:	17da      	asrs	r2, r3, #31
 8001b42:	1a8a      	subs	r2, r1, r2
 8001b44:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001b48:	fb01 f202 	mul.w	r2, r1, r2
 8001b4c:	1a9b      	subs	r3, r3, r2
 8001b4e:	677b      	str	r3, [r7, #116]	; 0x74
    }
    start_pos = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
    stop_pos = dis;
 8001b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b56:	60bb      	str	r3, [r7, #8]

    double tf = 5;
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	4b5c      	ldr	r3, [pc, #368]	; (8001cd0 <targectory_cal+0x220>)
 8001b5e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double a0 = 0;
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double a1 = 0;
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double a2 = 0;
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double a3 = 10*((double)dis)/(tf*tf*tf);
 8001b86:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b88:	f7fe fc78 	bl	800047c <__aeabi_i2d>
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <targectory_cal+0x224>)
 8001b92:	f7fe fcdd 	bl	8000550 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4690      	mov	r8, r2
 8001b9c:	4699      	mov	r9, r3
 8001b9e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ba2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001ba6:	f7fe fcd3 	bl	8000550 <__aeabi_dmul>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4610      	mov	r0, r2
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bb6:	f7fe fccb 	bl	8000550 <__aeabi_dmul>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4640      	mov	r0, r8
 8001bc0:	4649      	mov	r1, r9
 8001bc2:	f7fe fdef 	bl	80007a4 <__aeabi_ddiv>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double a4 = -15*((double)dis)/(tf*tf*tf*tf);
 8001bce:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001bd0:	f7fe fc54 	bl	800047c <__aeabi_i2d>
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <targectory_cal+0x228>)
 8001bda:	f7fe fcb9 	bl	8000550 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4690      	mov	r8, r2
 8001be4:	4699      	mov	r9, r3
 8001be6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001bee:	f7fe fcaf 	bl	8000550 <__aeabi_dmul>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bfe:	f7fe fca7 	bl	8000550 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c0e:	f7fe fc9f 	bl	8000550 <__aeabi_dmul>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4640      	mov	r0, r8
 8001c18:	4649      	mov	r1, r9
 8001c1a:	f7fe fdc3 	bl	80007a4 <__aeabi_ddiv>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double a5 = 6*((double)dis)/(tf*tf*tf*tf*tf);
 8001c26:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001c28:	f7fe fc28 	bl	800047c <__aeabi_i2d>
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <targectory_cal+0x22c>)
 8001c32:	f7fe fc8d 	bl	8000550 <__aeabi_dmul>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	4699      	mov	r9, r3
 8001c3e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001c46:	f7fe fc83 	bl	8000550 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c56:	f7fe fc7b 	bl	8000550 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c66:	f7fe fc73 	bl	8000550 <__aeabi_dmul>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c76:	f7fe fc6b 	bl	8000550 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4640      	mov	r0, r8
 8001c80:	4649      	mov	r1, r9
 8001c82:	f7fe fd8f 	bl	80007a4 <__aeabi_ddiv>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    *n = (int)(tf/dt);
 8001c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001c96:	f7fe fd85 	bl	80007a4 <__aeabi_ddiv>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f7fe feef 	bl	8000a84 <__aeabi_d2iz>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	601a      	str	r2, [r3, #0]

    double t = 0;
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    for(int i =0;i < *n ; i++){
 8001cb8:	2300      	movs	r3, #0
 8001cba:	667b      	str	r3, [r7, #100]	; 0x64
 8001cbc:	e0ba      	b.n	8001e34 <targectory_cal+0x384>
 8001cbe:	bf00      	nop
 8001cc0:	53f7ced9 	.word	0x53f7ced9
 8001cc4:	403ca5e3 	.word	0x403ca5e3
 8001cc8:	404e0000 	.word	0x404e0000
 8001ccc:	b60b60b7 	.word	0xb60b60b7
 8001cd0:	40140000 	.word	0x40140000
 8001cd4:	40240000 	.word	0x40240000
 8001cd8:	c02e0000 	.word	0xc02e0000
 8001cdc:	40180000 	.word	0x40180000
        datas[i] = a1 + 2*a2*t + 3*a3*t*t + 4*a4*t*t*t + 5*a5*t*t*t*t;
 8001ce0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	f7fe fa7c 	bl	80001e4 <__adddf3>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001cf8:	f7fe fc2a 	bl	8000550 <__aeabi_dmul>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d08:	f7fe fa6c 	bl	80001e4 <__adddf3>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4690      	mov	r8, r2
 8001d12:	4699      	mov	r9, r3
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	4b5a      	ldr	r3, [pc, #360]	; (8001e84 <targectory_cal+0x3d4>)
 8001d1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d1e:	f7fe fc17 	bl	8000550 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d2e:	f7fe fc0f 	bl	8000550 <__aeabi_dmul>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d3e:	f7fe fc07 	bl	8000550 <__aeabi_dmul>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4640      	mov	r0, r8
 8001d48:	4649      	mov	r1, r9
 8001d4a:	f7fe fa4b 	bl	80001e4 <__adddf3>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4690      	mov	r8, r2
 8001d54:	4699      	mov	r9, r3
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <targectory_cal+0x3d8>)
 8001d5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d60:	f7fe fbf6 	bl	8000550 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d70:	f7fe fbee 	bl	8000550 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d80:	f7fe fbe6 	bl	8000550 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d90:	f7fe fbde 	bl	8000550 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4640      	mov	r0, r8
 8001d9a:	4649      	mov	r1, r9
 8001d9c:	f7fe fa22 	bl	80001e4 <__adddf3>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4690      	mov	r8, r2
 8001da6:	4699      	mov	r9, r3
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <targectory_cal+0x3dc>)
 8001dae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001db2:	f7fe fbcd 	bl	8000550 <__aeabi_dmul>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001dc2:	f7fe fbc5 	bl	8000550 <__aeabi_dmul>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001dd2:	f7fe fbbd 	bl	8000550 <__aeabi_dmul>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001de2:	f7fe fbb5 	bl	8000550 <__aeabi_dmul>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001df2:	f7fe fbad 	bl	8000550 <__aeabi_dmul>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	18d6      	adds	r6, r2, r3
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4640      	mov	r0, r8
 8001e0c:	4649      	mov	r1, r9
 8001e0e:	f7fe f9e9 	bl	80001e4 <__adddf3>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	e9c6 2300 	strd	r2, r3, [r6]
        t+=dt;
 8001e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e22:	f7fe f9df 	bl	80001e4 <__adddf3>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    for(int i =0;i < *n ; i++){
 8001e2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e30:	3301      	adds	r3, #1
 8001e32:	667b      	str	r3, [r7, #100]	; 0x64
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	f6ff af50 	blt.w	8001ce0 <targectory_cal+0x230>
    }

    if(inverse){
 8001e40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d019      	beq.n	8001e7a <targectory_cal+0x3ca>
        for(int i = 0;i<*n;i++){
 8001e46:	2300      	movs	r3, #0
 8001e48:	663b      	str	r3, [r7, #96]	; 0x60
 8001e4a:	e011      	b.n	8001e70 <targectory_cal+0x3c0>
            datas[i] *= -1;
 8001e4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	4413      	add	r3, r2
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001e5a:	00c9      	lsls	r1, r1, #3
 8001e5c:	6978      	ldr	r0, [r7, #20]
 8001e5e:	4401      	add	r1, r0
 8001e60:	4614      	mov	r4, r2
 8001e62:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e66:	e9c1 4500 	strd	r4, r5, [r1]
        for(int i = 0;i<*n;i++){
 8001e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	663b      	str	r3, [r7, #96]	; 0x60
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e76:	429a      	cmp	r2, r3
 8001e78:	dbe8      	blt.n	8001e4c <targectory_cal+0x39c>
        }
    }

}
 8001e7a:	bf00      	nop
 8001e7c:	377c      	adds	r7, #124	; 0x7c
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e84:	40080000 	.word	0x40080000
 8001e88:	40100000 	.word	0x40100000
 8001e8c:	40140000 	.word	0x40140000

08001e90 <micros>:





uint64_t micros(){
 8001e90:	b4b0      	push	{r4, r5, r7}
 8001e92:	af00      	add	r7, sp, #0
	return _micro + TIM5->CNT;
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <micros+0x28>)
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f04f 0100 	mov.w	r1, #0
 8001e9e:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <micros+0x2c>)
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	1884      	adds	r4, r0, r2
 8001ea6:	eb41 0503 	adc.w	r5, r1, r3
 8001eaa:	4622      	mov	r2, r4
 8001eac:	462b      	mov	r3, r5
}
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bcb0      	pop	{r4, r5, r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	40000c00 	.word	0x40000c00
 8001ebc:	20000150 	.word	0x20000150

08001ec0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001ec0:	b4b0      	push	{r4, r5, r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

	if(htim == &htim5){
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d109      	bne.n	8001ee4 <HAL_TIM_PeriodElapsedCallback+0x24>
		_micro += ((uint64_t)1<<32)-1;
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	f112 34ff 	adds.w	r4, r2, #4294967295
 8001eda:	f143 0500 	adc.w	r5, r3, #0
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ee0:	e9c3 4500 	strd	r4, r5, [r3]
	}

}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bcb0      	pop	{r4, r5, r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20002750 	.word	0x20002750
 8001ef4:	20000150 	.word	0x20000150

08001ef8 <UARTInit>:


//UART protocol

void UARTInit(UARTStucrture *uart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8001f00:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <UARTInit+0x4c>)
 8001f02:	88db      	ldrh	r3, [r3, #6]
 8001f04:	4619      	mov	r1, r3
 8001f06:	2001      	movs	r0, #1
 8001f08:	f004 ff6a 	bl	8006de0 <calloc>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	461a      	mov	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <UARTInit+0x4c>)
 8001f16:	889b      	ldrh	r3, [r3, #4]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	f004 ff60 	bl	8006de0 <calloc>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	81da      	strh	r2, [r3, #14]

}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000134 	.word	0x20000134

08001f48 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6919      	ldr	r1, [r3, #16]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	88db      	ldrh	r3, [r3, #6]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f003 fff7 	bl	8005f50 <HAL_UART_Receive_DMA>
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	88db      	ldrh	r3, [r3, #6]
 8001f76:	461a      	mov	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	1ad3      	subs	r3, r2, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8001f90:	b590      	push	{r4, r7, lr}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8001f98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f9c:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	8a9b      	ldrh	r3, [r3, #20]
 8001fa2:	461c      	mov	r4, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ffe0 	bl	8001f6a <UARTGetRxHead>
 8001faa:	4603      	mov	r3, r0
 8001fac:	429c      	cmp	r4, r3
 8001fae:	d013      	beq.n	8001fd8 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	8a92      	ldrh	r2, [r2, #20]
 8001fb8:	4413      	add	r3, r2
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	8a9b      	ldrh	r3, [r3, #20]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	88d2      	ldrh	r2, [r2, #6]
 8001fc8:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fcc:	fb02 f201 	mul.w	r2, r2, r1
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8001fd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd90      	pop	{r4, r7, pc}

08001fe4 <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b20      	cmp	r3, #32
 8001ff8:	d13d      	bne.n	8002076 <UARTTxDumpBuffer+0x92>
 8001ffa:	4b21      	ldr	r3, [pc, #132]	; (8002080 <UARTTxDumpBuffer+0x9c>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d139      	bne.n	8002076 <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 8002002:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <UARTTxDumpBuffer+0x9c>)
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	89da      	ldrh	r2, [r3, #14]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	899b      	ldrh	r3, [r3, #12]
 8002010:	429a      	cmp	r2, r3
 8002012:	d02d      	beq.n	8002070 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	89da      	ldrh	r2, [r3, #14]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 800201c:	429a      	cmp	r2, r3
 800201e:	d906      	bls.n	800202e <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	89da      	ldrh	r2, [r3, #14]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	b29b      	uxth	r3, r3
 800202c:	e005      	b.n	800203a <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	889a      	ldrh	r2, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	b29b      	uxth	r3, r3
 800203a:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	8992      	ldrh	r2, [r2, #12]
 8002048:	4413      	add	r3, r2
 800204a:	89fa      	ldrh	r2, [r7, #14]
 800204c:	4619      	mov	r1, r3
 800204e:	f003 ff13 	bl	8005e78 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	899b      	ldrh	r3, [r3, #12]
 8002056:	461a      	mov	r2, r3
 8002058:	89fb      	ldrh	r3, [r7, #14]
 800205a:	4413      	add	r3, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	8892      	ldrh	r2, [r2, #4]
 8002060:	fb93 f1f2 	sdiv	r1, r3, r2
 8002064:	fb02 f201 	mul.w	r2, r2, r1
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	b29a      	uxth	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <UARTTxDumpBuffer+0x9c>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
	}
}
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	2000268c 	.word	0x2000268c

08002084 <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	4613      	mov	r3, r2
 8002090:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	889b      	ldrh	r3, [r3, #4]
 8002096:	88fa      	ldrh	r2, [r7, #6]
 8002098:	4293      	cmp	r3, r2
 800209a:	bf28      	it	cs
 800209c:	4613      	movcs	r3, r2
 800209e:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80020a0:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	889b      	ldrh	r3, [r3, #4]
 80020a6:	4619      	mov	r1, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	89db      	ldrh	r3, [r3, #14]
 80020ac:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80020ae:	4293      	cmp	r3, r2
 80020b0:	bfa8      	it	ge
 80020b2:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 80020b4:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	89d2      	ldrh	r2, [r2, #14]
 80020be:	4413      	add	r3, r2
 80020c0:	8aba      	ldrh	r2, [r7, #20]
 80020c2:	68b9      	ldr	r1, [r7, #8]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f004 febd 	bl	8006e44 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	89db      	ldrh	r3, [r3, #14]
 80020ce:	461a      	mov	r2, r3
 80020d0:	8afb      	ldrh	r3, [r7, #22]
 80020d2:	4413      	add	r3, r2
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	8892      	ldrh	r2, [r2, #4]
 80020d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80020dc:	fb02 f201 	mul.w	r2, r2, r1
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 80020e8:	8afa      	ldrh	r2, [r7, #22]
 80020ea:	8abb      	ldrh	r3, [r7, #20]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d00a      	beq.n	8002106 <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6898      	ldr	r0, [r3, #8]
 80020f4:	8abb      	ldrh	r3, [r7, #20]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 80020fa:	8afa      	ldrh	r2, [r7, #22]
 80020fc:	8abb      	ldrh	r3, [r7, #20]
 80020fe:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002100:	461a      	mov	r2, r3
 8002102:	f004 fe9f 	bl	8006e44 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f7ff ff6c 	bl	8001fe4 <UARTTxDumpBuffer>

}
 800210c:	bf00      	nop
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	0000      	movs	r0, r0
	...

08002118 <uart_protocal>:
static uart_state state = state_idle;
static uint8_t sum = 0,debug = 0;
static uint8_t datas[256] = {0},data_ind = 0,n_data = 0;
static uint8_t mode = 0;

void uart_protocal(int16_t input,UARTStucrture *uart){
 8002118:	b580      	push	{r7, lr}
 800211a:	b096      	sub	sp, #88	; 0x58
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	80fb      	strh	r3, [r7, #6]

	debug = input;
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	4bac      	ldr	r3, [pc, #688]	; (80023dc <uart_protocal+0x2c4>)
 800212a:	701a      	strb	r2, [r3, #0]

	switch (state) {
 800212c:	4bac      	ldr	r3, [pc, #688]	; (80023e0 <uart_protocal+0x2c8>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b07      	cmp	r3, #7
 8002132:	f200 8306 	bhi.w	8002742 <uart_protocal+0x62a>
 8002136:	a201      	add	r2, pc, #4	; (adr r2, 800213c <uart_protocal+0x24>)
 8002138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213c:	0800215d 	.word	0x0800215d
 8002140:	08002743 	.word	0x08002743
 8002144:	08002743 	.word	0x08002743
 8002148:	0800228d 	.word	0x0800228d
 800214c:	080022ad 	.word	0x080022ad
 8002150:	080022fb 	.word	0x080022fb
 8002154:	08002715 	.word	0x08002715
 8002158:	08002725 	.word	0x08002725
		case state_idle:
			sum = data_ind = 0;
 800215c:	4ba1      	ldr	r3, [pc, #644]	; (80023e4 <uart_protocal+0x2cc>)
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
 8002162:	4ba0      	ldr	r3, [pc, #640]	; (80023e4 <uart_protocal+0x2cc>)
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	4ba0      	ldr	r3, [pc, #640]	; (80023e8 <uart_protocal+0x2d0>)
 8002168:	701a      	strb	r2, [r3, #0]
			if(input >= 0b10010001 && input <= 0b10011110){
 800216a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800216e:	2b90      	cmp	r3, #144	; 0x90
 8002170:	dd7b      	ble.n	800226a <uart_protocal+0x152>
 8002172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002176:	2b9e      	cmp	r3, #158	; 0x9e
 8002178:	dc77      	bgt.n	800226a <uart_protocal+0x152>
				mode = input & 0b1111;
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	b2da      	uxtb	r2, r3
 8002184:	4b99      	ldr	r3, [pc, #612]	; (80023ec <uart_protocal+0x2d4>)
 8002186:	701a      	strb	r2, [r3, #0]
				sum += input;
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	4b96      	ldr	r3, [pc, #600]	; (80023e8 <uart_protocal+0x2d0>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4413      	add	r3, r2
 8002192:	b2da      	uxtb	r2, r3
 8002194:	4b94      	ldr	r3, [pc, #592]	; (80023e8 <uart_protocal+0x2d0>)
 8002196:	701a      	strb	r2, [r3, #0]
				switch (mode){
 8002198:	4b94      	ldr	r3, [pc, #592]	; (80023ec <uart_protocal+0x2d4>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	3b01      	subs	r3, #1
 800219e:	2b0d      	cmp	r3, #13
 80021a0:	d873      	bhi.n	800228a <uart_protocal+0x172>
 80021a2:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <uart_protocal+0x90>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	080021e1 	.word	0x080021e1
 80021ac:	080021ef 	.word	0x080021ef
 80021b0:	080021f7 	.word	0x080021f7
 80021b4:	080021ff 	.word	0x080021ff
 80021b8:	0800220d 	.word	0x0800220d
 80021bc:	0800221b 	.word	0x0800221b
 80021c0:	08002229 	.word	0x08002229
 80021c4:	08002231 	.word	0x08002231
 80021c8:	08002239 	.word	0x08002239
 80021cc:	08002241 	.word	0x08002241
 80021d0:	08002249 	.word	0x08002249
 80021d4:	08002251 	.word	0x08002251
 80021d8:	08002259 	.word	0x08002259
 80021dc:	08002261 	.word	0x08002261
					case 1:n_data = 2;state = state_data_frame;break;
 80021e0:	4b83      	ldr	r3, [pc, #524]	; (80023f0 <uart_protocal+0x2d8>)
 80021e2:	2202      	movs	r2, #2
 80021e4:	701a      	strb	r2, [r3, #0]
 80021e6:	4b7e      	ldr	r3, [pc, #504]	; (80023e0 <uart_protocal+0x2c8>)
 80021e8:	2204      	movs	r2, #4
 80021ea:	701a      	strb	r2, [r3, #0]
 80021ec:	e03c      	b.n	8002268 <uart_protocal+0x150>
					case 2:state = state_check_sum;break;
 80021ee:	4b7c      	ldr	r3, [pc, #496]	; (80023e0 <uart_protocal+0x2c8>)
 80021f0:	2205      	movs	r2, #5
 80021f2:	701a      	strb	r2, [r3, #0]
 80021f4:	e038      	b.n	8002268 <uart_protocal+0x150>
					case 3:state = state_check_sum;break;
 80021f6:	4b7a      	ldr	r3, [pc, #488]	; (80023e0 <uart_protocal+0x2c8>)
 80021f8:	2205      	movs	r2, #5
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	e034      	b.n	8002268 <uart_protocal+0x150>
					case 4:n_data = 2;state = state_data_frame;break;
 80021fe:	4b7c      	ldr	r3, [pc, #496]	; (80023f0 <uart_protocal+0x2d8>)
 8002200:	2202      	movs	r2, #2
 8002202:	701a      	strb	r2, [r3, #0]
 8002204:	4b76      	ldr	r3, [pc, #472]	; (80023e0 <uart_protocal+0x2c8>)
 8002206:	2204      	movs	r2, #4
 8002208:	701a      	strb	r2, [r3, #0]
 800220a:	e02d      	b.n	8002268 <uart_protocal+0x150>
					case 5:n_data = 2;state = state_data_frame;break;
 800220c:	4b78      	ldr	r3, [pc, #480]	; (80023f0 <uart_protocal+0x2d8>)
 800220e:	2202      	movs	r2, #2
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	4b73      	ldr	r3, [pc, #460]	; (80023e0 <uart_protocal+0x2c8>)
 8002214:	2204      	movs	r2, #4
 8002216:	701a      	strb	r2, [r3, #0]
 8002218:	e026      	b.n	8002268 <uart_protocal+0x150>
					case 6:n_data = 2;state = state_data_frame;break;
 800221a:	4b75      	ldr	r3, [pc, #468]	; (80023f0 <uart_protocal+0x2d8>)
 800221c:	2202      	movs	r2, #2
 800221e:	701a      	strb	r2, [r3, #0]
 8002220:	4b6f      	ldr	r3, [pc, #444]	; (80023e0 <uart_protocal+0x2c8>)
 8002222:	2204      	movs	r2, #4
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e01f      	b.n	8002268 <uart_protocal+0x150>
					case 7:state = state_n_station;break;
 8002228:	4b6d      	ldr	r3, [pc, #436]	; (80023e0 <uart_protocal+0x2c8>)
 800222a:	2203      	movs	r2, #3
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	e01b      	b.n	8002268 <uart_protocal+0x150>
					case 8:state = state_check_sum;break;
 8002230:	4b6b      	ldr	r3, [pc, #428]	; (80023e0 <uart_protocal+0x2c8>)
 8002232:	2205      	movs	r2, #5
 8002234:	701a      	strb	r2, [r3, #0]
 8002236:	e017      	b.n	8002268 <uart_protocal+0x150>
					case 9:state = state_check_sum;break;
 8002238:	4b69      	ldr	r3, [pc, #420]	; (80023e0 <uart_protocal+0x2c8>)
 800223a:	2205      	movs	r2, #5
 800223c:	701a      	strb	r2, [r3, #0]
 800223e:	e013      	b.n	8002268 <uart_protocal+0x150>
					case 10:state = state_check_sum;break;
 8002240:	4b67      	ldr	r3, [pc, #412]	; (80023e0 <uart_protocal+0x2c8>)
 8002242:	2205      	movs	r2, #5
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	e00f      	b.n	8002268 <uart_protocal+0x150>
					case 11:state = state_check_sum;break;
 8002248:	4b65      	ldr	r3, [pc, #404]	; (80023e0 <uart_protocal+0x2c8>)
 800224a:	2205      	movs	r2, #5
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	e00b      	b.n	8002268 <uart_protocal+0x150>
					case 12:state = state_check_sum;break;
 8002250:	4b63      	ldr	r3, [pc, #396]	; (80023e0 <uart_protocal+0x2c8>)
 8002252:	2205      	movs	r2, #5
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	e007      	b.n	8002268 <uart_protocal+0x150>
					case 13:state = state_check_sum;break;
 8002258:	4b61      	ldr	r3, [pc, #388]	; (80023e0 <uart_protocal+0x2c8>)
 800225a:	2205      	movs	r2, #5
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e003      	b.n	8002268 <uart_protocal+0x150>
					case 14:state = state_check_sum;break;
 8002260:	4b5f      	ldr	r3, [pc, #380]	; (80023e0 <uart_protocal+0x2c8>)
 8002262:	2205      	movs	r2, #5
 8002264:	701a      	strb	r2, [r3, #0]
 8002266:	bf00      	nop
				switch (mode){
 8002268:	e00f      	b.n	800228a <uart_protocal+0x172>
				}
			}
			else{
				sum = n_data = data_ind = mode = 0;
 800226a:	4b60      	ldr	r3, [pc, #384]	; (80023ec <uart_protocal+0x2d4>)
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
 8002270:	4b5e      	ldr	r3, [pc, #376]	; (80023ec <uart_protocal+0x2d4>)
 8002272:	781a      	ldrb	r2, [r3, #0]
 8002274:	4b5b      	ldr	r3, [pc, #364]	; (80023e4 <uart_protocal+0x2cc>)
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	4b5a      	ldr	r3, [pc, #360]	; (80023e4 <uart_protocal+0x2cc>)
 800227a:	781a      	ldrb	r2, [r3, #0]
 800227c:	4b5c      	ldr	r3, [pc, #368]	; (80023f0 <uart_protocal+0x2d8>)
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	4b5b      	ldr	r3, [pc, #364]	; (80023f0 <uart_protocal+0x2d8>)
 8002282:	781a      	ldrb	r2, [r3, #0]
 8002284:	4b58      	ldr	r3, [pc, #352]	; (80023e8 <uart_protocal+0x2d0>)
 8002286:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002288:	e25b      	b.n	8002742 <uart_protocal+0x62a>
 800228a:	e25a      	b.n	8002742 <uart_protocal+0x62a>
		case state_n_station:

			//n_data = (input+1)/2 & 0xFF; //data sheet version

			n_data = input; //UI version
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b57      	ldr	r3, [pc, #348]	; (80023f0 <uart_protocal+0x2d8>)
 8002292:	701a      	strb	r2, [r3, #0]


			sum+= input;
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <uart_protocal+0x2d0>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4413      	add	r3, r2
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	4b51      	ldr	r3, [pc, #324]	; (80023e8 <uart_protocal+0x2d0>)
 80022a2:	701a      	strb	r2, [r3, #0]
			state = state_data_frame;
 80022a4:	4b4e      	ldr	r3, [pc, #312]	; (80023e0 <uart_protocal+0x2c8>)
 80022a6:	2204      	movs	r2, #4
 80022a8:	701a      	strb	r2, [r3, #0]
			break;
 80022aa:	e24a      	b.n	8002742 <uart_protocal+0x62a>
		case state_data_frame:
			if(data_ind < n_data){
 80022ac:	4b4d      	ldr	r3, [pc, #308]	; (80023e4 <uart_protocal+0x2cc>)
 80022ae:	781a      	ldrb	r2, [r3, #0]
 80022b0:	4b4f      	ldr	r3, [pc, #316]	; (80023f0 <uart_protocal+0x2d8>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d215      	bcs.n	80022e4 <uart_protocal+0x1cc>
				datas[data_ind] = input;
 80022b8:	4b4a      	ldr	r3, [pc, #296]	; (80023e4 <uart_protocal+0x2cc>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	b2d9      	uxtb	r1, r3
 80022c2:	4b4c      	ldr	r3, [pc, #304]	; (80023f4 <uart_protocal+0x2dc>)
 80022c4:	5499      	strb	r1, [r3, r2]
				sum += datas[data_ind++];
 80022c6:	4b47      	ldr	r3, [pc, #284]	; (80023e4 <uart_protocal+0x2cc>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	b2d1      	uxtb	r1, r2
 80022ce:	4a45      	ldr	r2, [pc, #276]	; (80023e4 <uart_protocal+0x2cc>)
 80022d0:	7011      	strb	r1, [r2, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b47      	ldr	r3, [pc, #284]	; (80023f4 <uart_protocal+0x2dc>)
 80022d6:	5c9a      	ldrb	r2, [r3, r2]
 80022d8:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <uart_protocal+0x2d0>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	4413      	add	r3, r2
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	4b41      	ldr	r3, [pc, #260]	; (80023e8 <uart_protocal+0x2d0>)
 80022e2:	701a      	strb	r2, [r3, #0]
			}
			if(data_ind == n_data){
 80022e4:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <uart_protocal+0x2cc>)
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <uart_protocal+0x2d8>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f040 8221 	bne.w	8002734 <uart_protocal+0x61c>
				state = state_check_sum;
 80022f2:	4b3b      	ldr	r3, [pc, #236]	; (80023e0 <uart_protocal+0x2c8>)
 80022f4:	2205      	movs	r2, #5
 80022f6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80022f8:	e21c      	b.n	8002734 <uart_protocal+0x61c>
		case state_check_sum:
			if(input == (uint8_t) ~sum){
 80022fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022fe:	4a3a      	ldr	r2, [pc, #232]	; (80023e8 <uart_protocal+0x2d0>)
 8002300:	7812      	ldrb	r2, [r2, #0]
 8002302:	43d2      	mvns	r2, r2
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	4293      	cmp	r3, r2
 8002308:	f040 8216 	bne.w	8002738 <uart_protocal+0x620>
				switch(mode){
 800230c:	4b37      	ldr	r3, [pc, #220]	; (80023ec <uart_protocal+0x2d4>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	3b01      	subs	r3, #1
 8002312:	2b0d      	cmp	r3, #13
 8002314:	f200 8210 	bhi.w	8002738 <uart_protocal+0x620>
 8002318:	a201      	add	r2, pc, #4	; (adr r2, 8002320 <uart_protocal+0x208>)
 800231a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231e:	bf00      	nop
 8002320:	08002359 	.word	0x08002359
 8002324:	08002395 	.word	0x08002395
 8002328:	080023b9 	.word	0x080023b9
 800232c:	08002401 	.word	0x08002401
 8002330:	08002433 	.word	0x08002433
 8002334:	0800247b 	.word	0x0800247b
 8002338:	080024a5 	.word	0x080024a5
 800233c:	08002517 	.word	0x08002517
 8002340:	08002539 	.word	0x08002539
 8002344:	08002581 	.word	0x08002581
 8002348:	0800260b 	.word	0x0800260b
 800234c:	08002669 	.word	0x08002669
 8002350:	0800268b 	.word	0x0800268b
 8002354:	080026ad 	.word	0x080026ad
					case 1:{
						uint8_t temp[] = { (0b1001<<4) | mode , datas[0] , datas[1] , (uint8_t)input};
 8002358:	4b24      	ldr	r3, [pc, #144]	; (80023ec <uart_protocal+0x2d4>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8002366:	4b23      	ldr	r3, [pc, #140]	; (80023f4 <uart_protocal+0x2dc>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800236e:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <uart_protocal+0x2dc>)
 8002370:	785b      	ldrb	r3, [r3, #1]
 8002372:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						UARTTxWrite(&UART2, temp, 4);
 800237e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002382:	2204      	movs	r2, #4
 8002384:	4619      	mov	r1, r3
 8002386:	481c      	ldr	r0, [pc, #112]	; (80023f8 <uart_protocal+0x2e0>)
 8002388:	f7ff fe7c 	bl	8002084 <UARTTxWrite>
						state = state_idle;
 800238c:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <uart_protocal+0x2c8>)
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
						break;
 8002392:	e19c      	b.n	80026ce <uart_protocal+0x5b6>
					}
					case 2:{
						mcu_connect = 1;
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <uart_protocal+0x2e4>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 800239a:	f247 5358 	movw	r3, #30040	; 0x7558
 800239e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
						UARTTxWrite(&UART2, temp, 2);
 80023a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023a6:	2202      	movs	r2, #2
 80023a8:	4619      	mov	r1, r3
 80023aa:	4813      	ldr	r0, [pc, #76]	; (80023f8 <uart_protocal+0x2e0>)
 80023ac:	f7ff fe6a 	bl	8002084 <UARTTxWrite>
						state = state_idle;
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <uart_protocal+0x2c8>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
						break;
 80023b6:	e18a      	b.n	80026ce <uart_protocal+0x5b6>
					}
					case 3:{
						mcu_connect = 0;
 80023b8:	4b10      	ldr	r3, [pc, #64]	; (80023fc <uart_protocal+0x2e4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 80023be:	f247 5358 	movw	r3, #30040	; 0x7558
 80023c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
						UARTTxWrite(&UART2, temp, 2);
 80023c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023ca:	2202      	movs	r2, #2
 80023cc:	4619      	mov	r1, r3
 80023ce:	480a      	ldr	r0, [pc, #40]	; (80023f8 <uart_protocal+0x2e0>)
 80023d0:	f7ff fe58 	bl	8002084 <UARTTxWrite>
						state = state_idle;
 80023d4:	4b02      	ldr	r3, [pc, #8]	; (80023e0 <uart_protocal+0x2c8>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
						break;
 80023da:	e178      	b.n	80026ce <uart_protocal+0x5b6>
 80023dc:	20002576 	.word	0x20002576
 80023e0:	20002574 	.word	0x20002574
 80023e4:	20002678 	.word	0x20002678
 80023e8:	20002575 	.word	0x20002575
 80023ec:	2000267a 	.word	0x2000267a
 80023f0:	20002679 	.word	0x20002679
 80023f4:	20002578 	.word	0x20002578
 80023f8:	20000134 	.word	0x20000134
 80023fc:	2000234c 	.word	0x2000234c
					}
					case 4:{
						max_velocity = datas[1];
 8002400:	4bb7      	ldr	r3, [pc, #732]	; (80026e0 <uart_protocal+0x5c8>)
 8002402:	785b      	ldrb	r3, [r3, #1]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f829 	bl	800045c <__aeabi_ui2d>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	49b5      	ldr	r1, [pc, #724]	; (80026e4 <uart_protocal+0x5cc>)
 8002410:	e9c1 2300 	strd	r2, r3, [r1]
						uint8_t temp[] = {0x58,0b01110101};
 8002414:	f247 5358 	movw	r3, #30040	; 0x7558
 8002418:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
						UARTTxWrite(&UART2, temp, 2);
 800241c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002420:	2202      	movs	r2, #2
 8002422:	4619      	mov	r1, r3
 8002424:	48b0      	ldr	r0, [pc, #704]	; (80026e8 <uart_protocal+0x5d0>)
 8002426:	f7ff fe2d 	bl	8002084 <UARTTxWrite>
						state = state_idle;
 800242a:	4bb0      	ldr	r3, [pc, #704]	; (80026ec <uart_protocal+0x5d4>)
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
						break;
 8002430:	e14d      	b.n	80026ce <uart_protocal+0x5b6>
					}
					case 5:{
						set_position = (double)((uint16_t)(datas[0]<<8) + datas[1])*1e-4;
 8002432:	4bab      	ldr	r3, [pc, #684]	; (80026e0 <uart_protocal+0x5c8>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	b29b      	uxth	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	4ba8      	ldr	r3, [pc, #672]	; (80026e0 <uart_protocal+0x5c8>)
 8002440:	785b      	ldrb	r3, [r3, #1]
 8002442:	4413      	add	r3, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe f819 	bl	800047c <__aeabi_i2d>
 800244a:	a3a1      	add	r3, pc, #644	; (adr r3, 80026d0 <uart_protocal+0x5b8>)
 800244c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002450:	f7fe f87e 	bl	8000550 <__aeabi_dmul>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	49a5      	ldr	r1, [pc, #660]	; (80026f0 <uart_protocal+0x5d8>)
 800245a:	e9c1 2300 	strd	r2, r3, [r1]
						uint8_t temp[] = {0x58,0b01110101};
 800245e:	f247 5358 	movw	r3, #30040	; 0x7558
 8002462:	87bb      	strh	r3, [r7, #60]	; 0x3c
						UARTTxWrite(&UART2, temp, 2);
 8002464:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002468:	2202      	movs	r2, #2
 800246a:	4619      	mov	r1, r3
 800246c:	489e      	ldr	r0, [pc, #632]	; (80026e8 <uart_protocal+0x5d0>)
 800246e:	f7ff fe09 	bl	8002084 <UARTTxWrite>
						state = state_idle;
 8002472:	4b9e      	ldr	r3, [pc, #632]	; (80026ec <uart_protocal+0x5d4>)
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
						break;
 8002478:	e129      	b.n	80026ce <uart_protocal+0x5b6>
					}
					case 6:{
						goals[0] = datas[1];
 800247a:	4b99      	ldr	r3, [pc, #612]	; (80026e0 <uart_protocal+0x5c8>)
 800247c:	785a      	ldrb	r2, [r3, #1]
 800247e:	4b9d      	ldr	r3, [pc, #628]	; (80026f4 <uart_protocal+0x5dc>)
 8002480:	701a      	strb	r2, [r3, #0]
						n_goal = 1;
 8002482:	4b9d      	ldr	r3, [pc, #628]	; (80026f8 <uart_protocal+0x5e0>)
 8002484:	2201      	movs	r2, #1
 8002486:	801a      	strh	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 8002488:	f247 5358 	movw	r3, #30040	; 0x7558
 800248c:	873b      	strh	r3, [r7, #56]	; 0x38
						UARTTxWrite(&UART2, temp, 2);
 800248e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002492:	2202      	movs	r2, #2
 8002494:	4619      	mov	r1, r3
 8002496:	4894      	ldr	r0, [pc, #592]	; (80026e8 <uart_protocal+0x5d0>)
 8002498:	f7ff fdf4 	bl	8002084 <UARTTxWrite>
						state = state_idle;
 800249c:	4b93      	ldr	r3, [pc, #588]	; (80026ec <uart_protocal+0x5d4>)
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
						break;
 80024a2:	e114      	b.n	80026ce <uart_protocal+0x5b6>
					}
					case 7:{
						n_goal = 0;
 80024a4:	4b94      	ldr	r3, [pc, #592]	; (80026f8 <uart_protocal+0x5e0>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	801a      	strh	r2, [r3, #0]
						for(int i = 0;i < n_data;i++){
 80024aa:	2300      	movs	r3, #0
 80024ac:	657b      	str	r3, [r7, #84]	; 0x54
 80024ae:	e011      	b.n	80024d4 <uart_protocal+0x3bc>
							goals[2*i+1] = datas[i]>>4;
							n_goal += 2;
							*/

							//UI version
							goals[i] = datas[i];
 80024b0:	4a8b      	ldr	r2, [pc, #556]	; (80026e0 <uart_protocal+0x5c8>)
 80024b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b4:	4413      	add	r3, r2
 80024b6:	7819      	ldrb	r1, [r3, #0]
 80024b8:	4a8e      	ldr	r2, [pc, #568]	; (80026f4 <uart_protocal+0x5dc>)
 80024ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024bc:	4413      	add	r3, r2
 80024be:	460a      	mov	r2, r1
 80024c0:	701a      	strb	r2, [r3, #0]
							n_goal++;
 80024c2:	4b8d      	ldr	r3, [pc, #564]	; (80026f8 <uart_protocal+0x5e0>)
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	3301      	adds	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	4b8b      	ldr	r3, [pc, #556]	; (80026f8 <uart_protocal+0x5e0>)
 80024cc:	801a      	strh	r2, [r3, #0]
						for(int i = 0;i < n_data;i++){
 80024ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d0:	3301      	adds	r3, #1
 80024d2:	657b      	str	r3, [r7, #84]	; 0x54
 80024d4:	4b89      	ldr	r3, [pc, #548]	; (80026fc <uart_protocal+0x5e4>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024dc:	4293      	cmp	r3, r2
 80024de:	dbe7      	blt.n	80024b0 <uart_protocal+0x398>
							//UI version
						}
						if(goals[n_goal-1] == 0){
 80024e0:	4b85      	ldr	r3, [pc, #532]	; (80026f8 <uart_protocal+0x5e0>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	4a83      	ldr	r2, [pc, #524]	; (80026f4 <uart_protocal+0x5dc>)
 80024e8:	5cd3      	ldrb	r3, [r2, r3]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d105      	bne.n	80024fa <uart_protocal+0x3e2>
							n_goal--;
 80024ee:	4b82      	ldr	r3, [pc, #520]	; (80026f8 <uart_protocal+0x5e0>)
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	4b80      	ldr	r3, [pc, #512]	; (80026f8 <uart_protocal+0x5e0>)
 80024f8:	801a      	strh	r2, [r3, #0]
						}
						uint8_t temp[] = {0x58,0b01110101};
 80024fa:	f247 5358 	movw	r3, #30040	; 0x7558
 80024fe:	86bb      	strh	r3, [r7, #52]	; 0x34
						UARTTxWrite(&UART2, temp, 2);
 8002500:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002504:	2202      	movs	r2, #2
 8002506:	4619      	mov	r1, r3
 8002508:	4877      	ldr	r0, [pc, #476]	; (80026e8 <uart_protocal+0x5d0>)
 800250a:	f7ff fdbb 	bl	8002084 <UARTTxWrite>
						state = state_idle;
 800250e:	4b77      	ldr	r3, [pc, #476]	; (80026ec <uart_protocal+0x5d4>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
						break;
 8002514:	e0db      	b.n	80026ce <uart_protocal+0x5b6>
					}
					case 8:{
						go_now = 1;
 8002516:	4b7a      	ldr	r3, [pc, #488]	; (8002700 <uart_protocal+0x5e8>)
 8002518:	2201      	movs	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 800251c:	f247 5358 	movw	r3, #30040	; 0x7558
 8002520:	863b      	strh	r3, [r7, #48]	; 0x30
						UARTTxWrite(&UART2, temp, 2);
 8002522:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002526:	2202      	movs	r2, #2
 8002528:	4619      	mov	r1, r3
 800252a:	486f      	ldr	r0, [pc, #444]	; (80026e8 <uart_protocal+0x5d0>)
 800252c:	f7ff fdaa 	bl	8002084 <UARTTxWrite>
						state = state_idle;
 8002530:	4b6e      	ldr	r3, [pc, #440]	; (80026ec <uart_protocal+0x5d4>)
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
						break;
 8002536:	e0ca      	b.n	80026ce <uart_protocal+0x5b6>
					}
					case 9:{
						uint8_t temp[] = {0x58,0b01110101};
 8002538:	f247 5358 	movw	r3, #30040	; 0x7558
 800253c:	85bb      	strh	r3, [r7, #44]	; 0x2c
						UARTTxWrite(&UART2, temp, 2);
 800253e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002542:	2202      	movs	r2, #2
 8002544:	4619      	mov	r1, r3
 8002546:	4868      	ldr	r0, [pc, #416]	; (80026e8 <uart_protocal+0x5d0>)
 8002548:	f7ff fd9c 	bl	8002084 <UARTTxWrite>
						uint8_t temp2[] = {0b10011001,current_station,~(0b10011001+current_station) & 0xFF};
 800254c:	2399      	movs	r3, #153	; 0x99
 800254e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8002552:	4b6c      	ldr	r3, [pc, #432]	; (8002704 <uart_protocal+0x5ec>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800255a:	4b6a      	ldr	r3, [pc, #424]	; (8002704 <uart_protocal+0x5ec>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	3b67      	subs	r3, #103	; 0x67
 8002560:	b2db      	uxtb	r3, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
						UARTTxWrite(&UART2, temp2, 3);
 800256a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800256e:	2203      	movs	r2, #3
 8002570:	4619      	mov	r1, r3
 8002572:	485d      	ldr	r0, [pc, #372]	; (80026e8 <uart_protocal+0x5d0>)
 8002574:	f7ff fd86 	bl	8002084 <UARTTxWrite>
						state = state_wait_for_ack1_1;
 8002578:	4b5c      	ldr	r3, [pc, #368]	; (80026ec <uart_protocal+0x5d4>)
 800257a:	2206      	movs	r2, #6
 800257c:	701a      	strb	r2, [r3, #0]
						break;
 800257e:	e0a6      	b.n	80026ce <uart_protocal+0x5b6>
					}
					case 10:{
						uint8_t temp[] = {0x58,0b01110101};
 8002580:	f247 5358 	movw	r3, #30040	; 0x7558
 8002584:	84bb      	strh	r3, [r7, #36]	; 0x24
						UARTTxWrite(&UART2, temp, 2);
 8002586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258a:	2202      	movs	r2, #2
 800258c:	4619      	mov	r1, r3
 800258e:	4856      	ldr	r0, [pc, #344]	; (80026e8 <uart_protocal+0x5d0>)
 8002590:	f7ff fd78 	bl	8002084 <UARTTxWrite>
						uint16_t pos = (uint16_t)(current_position*1e4);
 8002594:	4b5c      	ldr	r3, [pc, #368]	; (8002708 <uart_protocal+0x5f0>)
 8002596:	e9d3 0100 	ldrd	r0, r1, [r3]
 800259a:	a34f      	add	r3, pc, #316	; (adr r3, 80026d8 <uart_protocal+0x5c0>)
 800259c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a0:	f7fd ffd6 	bl	8000550 <__aeabi_dmul>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4610      	mov	r0, r2
 80025aa:	4619      	mov	r1, r3
 80025ac:	f7fe fa92 	bl	8000ad4 <__aeabi_d2uiz>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
						uint8_t temp2[] = {0b10011010,pos >> 8,pos & 0xFF, ~(0b10011001+(pos >> 8)+ (pos & 0xFF)) & 0xFF};
 80025b6:	239a      	movs	r3, #154	; 0x9a
 80025b8:	f887 3020 	strb.w	r3, [r7, #32]
 80025bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80025ca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80025d4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80025d8:	0a1b      	lsrs	r3, r3, #8
 80025da:	b29b      	uxth	r3, r3
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	3b67      	subs	r3, #103	; 0x67
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						UARTTxWrite(&UART2, temp2, 4);
 80025f4:	f107 0320 	add.w	r3, r7, #32
 80025f8:	2204      	movs	r2, #4
 80025fa:	4619      	mov	r1, r3
 80025fc:	483a      	ldr	r0, [pc, #232]	; (80026e8 <uart_protocal+0x5d0>)
 80025fe:	f7ff fd41 	bl	8002084 <UARTTxWrite>
						state = state_wait_for_ack1_1;
 8002602:	4b3a      	ldr	r3, [pc, #232]	; (80026ec <uart_protocal+0x5d4>)
 8002604:	2206      	movs	r2, #6
 8002606:	701a      	strb	r2, [r3, #0]
						break;
 8002608:	e061      	b.n	80026ce <uart_protocal+0x5b6>
					}
					case 11:{
						uint8_t temp[] = {0x58,0b01110101};
 800260a:	f247 5358 	movw	r3, #30040	; 0x7558
 800260e:	83bb      	strh	r3, [r7, #28]
						UARTTxWrite(&UART2, temp, 2);
 8002610:	f107 031c 	add.w	r3, r7, #28
 8002614:	2202      	movs	r2, #2
 8002616:	4619      	mov	r1, r3
 8002618:	4833      	ldr	r0, [pc, #204]	; (80026e8 <uart_protocal+0x5d0>)
 800261a:	f7ff fd33 	bl	8002084 <UARTTxWrite>
						uint8_t temp2[] = {0b10011011,(uint8_t)max_velocity,~(0b10011011+(uint8_t)max_velocity) & 0xFF};
 800261e:	239b      	movs	r3, #155	; 0x9b
 8002620:	763b      	strb	r3, [r7, #24]
 8002622:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <uart_protocal+0x5cc>)
 8002624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002628:	4610      	mov	r0, r2
 800262a:	4619      	mov	r1, r3
 800262c:	f7fe fa52 	bl	8000ad4 <__aeabi_d2uiz>
 8002630:	4603      	mov	r3, r0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	767b      	strb	r3, [r7, #25]
 8002636:	4b2b      	ldr	r3, [pc, #172]	; (80026e4 <uart_protocal+0x5cc>)
 8002638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	f7fe fa48 	bl	8000ad4 <__aeabi_d2uiz>
 8002644:	4603      	mov	r3, r0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	3b65      	subs	r3, #101	; 0x65
 800264a:	b2db      	uxtb	r3, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	76bb      	strb	r3, [r7, #26]
						UARTTxWrite(&UART2, temp2, 3);
 8002652:	f107 0318 	add.w	r3, r7, #24
 8002656:	2203      	movs	r2, #3
 8002658:	4619      	mov	r1, r3
 800265a:	4823      	ldr	r0, [pc, #140]	; (80026e8 <uart_protocal+0x5d0>)
 800265c:	f7ff fd12 	bl	8002084 <UARTTxWrite>
						state = state_wait_for_ack1_1;
 8002660:	4b22      	ldr	r3, [pc, #136]	; (80026ec <uart_protocal+0x5d4>)
 8002662:	2206      	movs	r2, #6
 8002664:	701a      	strb	r2, [r3, #0]
						break;
 8002666:	e032      	b.n	80026ce <uart_protocal+0x5b6>
					}
					case 12:{
						enable_endeffector = 1;
 8002668:	4b28      	ldr	r3, [pc, #160]	; (800270c <uart_protocal+0x5f4>)
 800266a:	2201      	movs	r2, #1
 800266c:	701a      	strb	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 800266e:	f247 5358 	movw	r3, #30040	; 0x7558
 8002672:	82bb      	strh	r3, [r7, #20]
						UARTTxWrite(&UART2, temp, 2);
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	2202      	movs	r2, #2
 800267a:	4619      	mov	r1, r3
 800267c:	481a      	ldr	r0, [pc, #104]	; (80026e8 <uart_protocal+0x5d0>)
 800267e:	f7ff fd01 	bl	8002084 <UARTTxWrite>
						state = state_idle;
 8002682:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <uart_protocal+0x5d4>)
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
						break;
 8002688:	e021      	b.n	80026ce <uart_protocal+0x5b6>
					}
					case 13:{
						enable_endeffector = 0;
 800268a:	4b20      	ldr	r3, [pc, #128]	; (800270c <uart_protocal+0x5f4>)
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 8002690:	f247 5358 	movw	r3, #30040	; 0x7558
 8002694:	823b      	strh	r3, [r7, #16]
						UARTTxWrite(&UART2, temp, 2);
 8002696:	f107 0310 	add.w	r3, r7, #16
 800269a:	2202      	movs	r2, #2
 800269c:	4619      	mov	r1, r3
 800269e:	4812      	ldr	r0, [pc, #72]	; (80026e8 <uart_protocal+0x5d0>)
 80026a0:	f7ff fcf0 	bl	8002084 <UARTTxWrite>
						state = state_idle;
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <uart_protocal+0x5d4>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
						break;
 80026aa:	e010      	b.n	80026ce <uart_protocal+0x5b6>
					}
					case 14:{
						enable_sethome = 1;
 80026ac:	4b18      	ldr	r3, [pc, #96]	; (8002710 <uart_protocal+0x5f8>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 80026b2:	f247 5358 	movw	r3, #30040	; 0x7558
 80026b6:	81bb      	strh	r3, [r7, #12]
						UARTTxWrite(&UART2, temp, 2);
 80026b8:	f107 030c 	add.w	r3, r7, #12
 80026bc:	2202      	movs	r2, #2
 80026be:	4619      	mov	r1, r3
 80026c0:	4809      	ldr	r0, [pc, #36]	; (80026e8 <uart_protocal+0x5d0>)
 80026c2:	f7ff fcdf 	bl	8002084 <UARTTxWrite>
						state = state_idle;
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <uart_protocal+0x5d4>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
						break;
 80026cc:	bf00      	nop
				}
			}
			else{
				//error check sum
			}
			break;
 80026ce:	e033      	b.n	8002738 <uart_protocal+0x620>
 80026d0:	eb1c432d 	.word	0xeb1c432d
 80026d4:	3f1a36e2 	.word	0x3f1a36e2
 80026d8:	00000000 	.word	0x00000000
 80026dc:	40c38800 	.word	0x40c38800
 80026e0:	20002578 	.word	0x20002578
 80026e4:	20002558 	.word	0x20002558
 80026e8:	20000134 	.word	0x20000134
 80026ec:	20002574 	.word	0x20002574
 80026f0:	20002560 	.word	0x20002560
 80026f4:	20002350 	.word	0x20002350
 80026f8:	20002554 	.word	0x20002554
 80026fc:	20002679 	.word	0x20002679
 8002700:	20002550 	.word	0x20002550
 8002704:	20002551 	.word	0x20002551
 8002708:	200000a0 	.word	0x200000a0
 800270c:	20002552 	.word	0x20002552
 8002710:	20002553 	.word	0x20002553
		case state_wait_for_ack1_1:{if(input == 0x58){state = state_wait_for_ack1_2;}break;}
 8002714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002718:	2b58      	cmp	r3, #88	; 0x58
 800271a:	d10f      	bne.n	800273c <uart_protocal+0x624>
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <uart_protocal+0x634>)
 800271e:	2207      	movs	r2, #7
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	e00b      	b.n	800273c <uart_protocal+0x624>
		case state_wait_for_ack1_2:{if(input == 0b01110101){state = state_idle;}break;}
 8002724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002728:	2b75      	cmp	r3, #117	; 0x75
 800272a:	d109      	bne.n	8002740 <uart_protocal+0x628>
 800272c:	4b07      	ldr	r3, [pc, #28]	; (800274c <uart_protocal+0x634>)
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
 8002732:	e005      	b.n	8002740 <uart_protocal+0x628>
			break;
 8002734:	bf00      	nop
 8002736:	e004      	b.n	8002742 <uart_protocal+0x62a>
			break;
 8002738:	bf00      	nop
 800273a:	e002      	b.n	8002742 <uart_protocal+0x62a>
		case state_wait_for_ack1_1:{if(input == 0x58){state = state_wait_for_ack1_2;}break;}
 800273c:	bf00      	nop
 800273e:	e000      	b.n	8002742 <uart_protocal+0x62a>
		case state_wait_for_ack1_2:{if(input == 0b01110101){state = state_idle;}break;}
 8002740:	bf00      	nop
	}

}
 8002742:	bf00      	nop
 8002744:	3758      	adds	r7, #88	; 0x58
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20002574 	.word	0x20002574

08002750 <encoder_lowpass_update>:


void encoder_lowpass_update(){
 8002750:	b5b0      	push	{r4, r5, r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0

	 encoder_value = unwraping_update();
 8002756:	f7fe ff2d 	bl	80015b4 <unwraping_update>
 800275a:	4603      	mov	r3, r0
 800275c:	4a2c      	ldr	r2, [pc, #176]	; (8002810 <encoder_lowpass_update+0xc0>)
 800275e:	6013      	str	r3, [r2, #0]

	  // read encoder with low-pass
	  if(micros() - time_stamp > 1000){ // 1kHz
 8002760:	f7ff fb96 	bl	8001e90 <micros>
 8002764:	4b2b      	ldr	r3, [pc, #172]	; (8002814 <encoder_lowpass_update+0xc4>)
 8002766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276a:	1a84      	subs	r4, r0, r2
 800276c:	eb61 0503 	sbc.w	r5, r1, r3
 8002770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	42ab      	cmp	r3, r5
 800277a:	bf08      	it	eq
 800277c:	42a2      	cmpeq	r2, r4
 800277e:	d243      	bcs.n	8002808 <encoder_lowpass_update+0xb8>
		  time_stamp = micros();
 8002780:	f7ff fb86 	bl	8001e90 <micros>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4922      	ldr	r1, [pc, #136]	; (8002814 <encoder_lowpass_update+0xc4>)
 800278a:	e9c1 2300 	strd	r2, r3, [r1]

		  encoder_velocity = velocity_update(encoder_value);
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <encoder_lowpass_update+0xc0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe ff4c 	bl	8001630 <velocity_update>
 8002798:	eeb0 7a40 	vmov.f32	s14, s0
 800279c:	eef0 7a60 	vmov.f32	s15, s1
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <encoder_lowpass_update+0xc8>)
 80027a2:	ed83 7b00 	vstr	d7, [r3]

		  for(int i = 0;i < 10;i++){
 80027a6:	2300      	movs	r3, #0
 80027a8:	607b      	str	r3, [r7, #4]
 80027aa:	e01a      	b.n	80027e2 <encoder_lowpass_update+0x92>
			  lowpass_output[i] = low_pass_process(&lowpass_filters[i], encoder_velocity);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	015b      	lsls	r3, r3, #5
 80027b0:	4a1a      	ldr	r2, [pc, #104]	; (800281c <encoder_lowpass_update+0xcc>)
 80027b2:	4413      	add	r3, r2
 80027b4:	4a18      	ldr	r2, [pc, #96]	; (8002818 <encoder_lowpass_update+0xc8>)
 80027b6:	ed92 7b00 	vldr	d7, [r2]
 80027ba:	eeb0 0a47 	vmov.f32	s0, s14
 80027be:	eef0 0a67 	vmov.f32	s1, s15
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe ff9a 	bl	80016fc <low_pass_process>
 80027c8:	eeb0 7a40 	vmov.f32	s14, s0
 80027cc:	eef0 7a60 	vmov.f32	s15, s1
 80027d0:	4a13      	ldr	r2, [pc, #76]	; (8002820 <encoder_lowpass_update+0xd0>)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4413      	add	r3, r2
 80027d8:	ed83 7b00 	vstr	d7, [r3]
		  for(int i = 0;i < 10;i++){
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3301      	adds	r3, #1
 80027e0:	607b      	str	r3, [r7, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b09      	cmp	r3, #9
 80027e6:	dde1      	ble.n	80027ac <encoder_lowpass_update+0x5c>
		  }

		  encoder_velocity_rpm = ppms_to_rpm(lowpass_output[1]);
 80027e8:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <encoder_lowpass_update+0xd0>)
 80027ea:	ed93 7b02 	vldr	d7, [r3, #8]
 80027ee:	eeb0 0a47 	vmov.f32	s0, s14
 80027f2:	eef0 0a67 	vmov.f32	s1, s15
 80027f6:	f7fe ff5b 	bl	80016b0 <ppms_to_rpm>
 80027fa:	eeb0 7a40 	vmov.f32	s14, s0
 80027fe:	eef0 7a60 	vmov.f32	s15, s1
 8002802:	4b08      	ldr	r3, [pc, #32]	; (8002824 <encoder_lowpass_update+0xd4>)
 8002804:	ed83 7b00 	vstr	d7, [r3]
		  //kalman_output = kalman_filter_update(encoder_velocity*300);
	  }

}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bdb0      	pop	{r4, r5, r7, pc}
 8002810:	20000158 	.word	0x20000158
 8002814:	20000170 	.word	0x20000170
 8002818:	20000160 	.word	0x20000160
 800281c:	20000188 	.word	0x20000188
 8002820:	200002c8 	.word	0x200002c8
 8002824:	20000168 	.word	0x20000168

08002828 <uart_update>:


void uart_update(){
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
	//Uart protocol
	int16_t inputChar = UARTReadChar(&UART2);
 800282e:	480b      	ldr	r0, [pc, #44]	; (800285c <uart_update+0x34>)
 8002830:	f7ff fbae 	bl	8001f90 <UARTReadChar>
 8002834:	4603      	mov	r3, r0
 8002836:	80fb      	strh	r3, [r7, #6]
	if(inputChar != -1){
 8002838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d005      	beq.n	800284e <uart_update+0x26>
	  /*char temp[32];
	  sprintf(temp, "%d", inputChar);
	  UARTTxWrite(&UART2, (uint8_t*) temp, strlen(temp));*/
	  uart_protocal(inputChar, &UART2);
 8002842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002846:	4905      	ldr	r1, [pc, #20]	; (800285c <uart_update+0x34>)
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fc65 	bl	8002118 <uart_protocal>
	}
	UARTTxDumpBuffer(&UART2);
 800284e:	4803      	ldr	r0, [pc, #12]	; (800285c <uart_update+0x34>)
 8002850:	f7ff fbc8 	bl	8001fe4 <UARTTxDumpBuffer>
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000134 	.word	0x20000134

08002860 <moving_state_update>:


void moving_state_update(){
 8002860:	b5b0      	push	{r4, r5, r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0

	switch (move_state) {
 8002866:	4b58      	ldr	r3, [pc, #352]	; (80029c8 <moving_state_update+0x168>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b04      	cmp	r3, #4
 800286c:	f200 8094 	bhi.w	8002998 <moving_state_update+0x138>
 8002870:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <moving_state_update+0x18>)
 8002872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002876:	bf00      	nop
 8002878:	0800288d 	.word	0x0800288d
 800287c:	0800289f 	.word	0x0800289f
 8002880:	08002905 	.word	0x08002905
 8002884:	0800292d 	.word	0x0800292d
 8002888:	0800295f 	.word	0x0800295f
		case state_move_idle:{if(go_now){move_state = state_tar_plan;} break;}
 800288c:	4b4f      	ldr	r3, [pc, #316]	; (80029cc <moving_state_update+0x16c>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 8083 	beq.w	800299c <moving_state_update+0x13c>
 8002896:	4b4c      	ldr	r3, [pc, #304]	; (80029c8 <moving_state_update+0x168>)
 8002898:	2201      	movs	r2, #1
 800289a:	701a      	strb	r2, [r3, #0]
 800289c:	e07e      	b.n	800299c <moving_state_update+0x13c>
		case state_tar_plan:{ targectory_cal(paths, &path_n_cnt, (double)(TIM1->CNT)/(12*64*4 -1)*360,stations_postion[goals[station_ind++]] , 0.02); paths_ind = 0; move_state = state_wait_des; break;}
 800289e:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <moving_state_update+0x170>)
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fd fdda 	bl	800045c <__aeabi_ui2d>
 80028a8:	a341      	add	r3, pc, #260	; (adr r3, 80029b0 <moving_state_update+0x150>)
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ae:	f7fd ff79 	bl	80007a4 <__aeabi_ddiv>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	4b45      	ldr	r3, [pc, #276]	; (80029d4 <moving_state_update+0x174>)
 80028c0:	f7fd fe46 	bl	8000550 <__aeabi_dmul>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4610      	mov	r0, r2
 80028ca:	4619      	mov	r1, r3
 80028cc:	f7fe f8da 	bl	8000a84 <__aeabi_d2iz>
 80028d0:	4601      	mov	r1, r0
 80028d2:	4b41      	ldr	r3, [pc, #260]	; (80029d8 <moving_state_update+0x178>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	483f      	ldr	r0, [pc, #252]	; (80029d8 <moving_state_update+0x178>)
 80028da:	6002      	str	r2, [r0, #0]
 80028dc:	4a3f      	ldr	r2, [pc, #252]	; (80029dc <moving_state_update+0x17c>)
 80028de:	5cd3      	ldrb	r3, [r2, r3]
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b3f      	ldr	r3, [pc, #252]	; (80029e0 <moving_state_update+0x180>)
 80028e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e8:	ed9f 0b33 	vldr	d0, [pc, #204]	; 80029b8 <moving_state_update+0x158>
 80028ec:	460a      	mov	r2, r1
 80028ee:	493d      	ldr	r1, [pc, #244]	; (80029e4 <moving_state_update+0x184>)
 80028f0:	483d      	ldr	r0, [pc, #244]	; (80029e8 <moving_state_update+0x188>)
 80028f2:	f7ff f8dd 	bl	8001ab0 <targectory_cal>
 80028f6:	4b3d      	ldr	r3, [pc, #244]	; (80029ec <moving_state_update+0x18c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	4b32      	ldr	r3, [pc, #200]	; (80029c8 <moving_state_update+0x168>)
 80028fe:	2202      	movs	r2, #2
 8002900:	701a      	strb	r2, [r3, #0]
 8002902:	e04e      	b.n	80029a2 <moving_state_update+0x142>
		case state_wait_des:{if(paths_ind >= path_n_cnt){time_stamp_5sec = micros(); enable_endeffector = 1; move_state = state_wait_5sec;} break;}
 8002904:	4b39      	ldr	r3, [pc, #228]	; (80029ec <moving_state_update+0x18c>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4b36      	ldr	r3, [pc, #216]	; (80029e4 <moving_state_update+0x184>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	db47      	blt.n	80029a0 <moving_state_update+0x140>
 8002910:	f7ff fabe 	bl	8001e90 <micros>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4935      	ldr	r1, [pc, #212]	; (80029f0 <moving_state_update+0x190>)
 800291a:	e9c1 2300 	strd	r2, r3, [r1]
 800291e:	4b35      	ldr	r3, [pc, #212]	; (80029f4 <moving_state_update+0x194>)
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]
 8002924:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <moving_state_update+0x168>)
 8002926:	2203      	movs	r2, #3
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e039      	b.n	80029a0 <moving_state_update+0x140>
		case state_wait_5sec:{if(micros() - time_stamp_5sec >= 5e6){move_state = state_check_left_stations;} break;}
 800292c:	f7ff fab0 	bl	8001e90 <micros>
 8002930:	4b2f      	ldr	r3, [pc, #188]	; (80029f0 <moving_state_update+0x190>)
 8002932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002936:	1a84      	subs	r4, r0, r2
 8002938:	eb61 0503 	sbc.w	r5, r1, r3
 800293c:	4620      	mov	r0, r4
 800293e:	4629      	mov	r1, r5
 8002940:	f7fd fdd0 	bl	80004e4 <__aeabi_ul2d>
 8002944:	a31e      	add	r3, pc, #120	; (adr r3, 80029c0 <moving_state_update+0x160>)
 8002946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294a:	f7fe f887 	bl	8000a5c <__aeabi_dcmpge>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d100      	bne.n	8002956 <moving_state_update+0xf6>
 8002954:	e025      	b.n	80029a2 <moving_state_update+0x142>
 8002956:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <moving_state_update+0x168>)
 8002958:	2204      	movs	r2, #4
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	e021      	b.n	80029a2 <moving_state_update+0x142>
		case state_check_left_stations:{if(station_ind >= n_goal){go_now = station_ind = 0;uint8_t temp[] = {70,110}; UARTTxWrite(&UART2, temp, 2); state = state_idle;} move_state = state_move_idle; break;}
 800295e:	4b26      	ldr	r3, [pc, #152]	; (80029f8 <moving_state_update+0x198>)
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <moving_state_update+0x178>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	dc11      	bgt.n	8002990 <moving_state_update+0x130>
 800296c:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <moving_state_update+0x178>)
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <moving_state_update+0x16c>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	f646 6346 	movw	r3, #28230	; 0x6e46
 800297c:	80bb      	strh	r3, [r7, #4]
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	2202      	movs	r2, #2
 8002982:	4619      	mov	r1, r3
 8002984:	481d      	ldr	r0, [pc, #116]	; (80029fc <moving_state_update+0x19c>)
 8002986:	f7ff fb7d 	bl	8002084 <UARTTxWrite>
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <moving_state_update+0x1a0>)
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <moving_state_update+0x168>)
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
 8002996:	e004      	b.n	80029a2 <moving_state_update+0x142>
		default:break;
 8002998:	bf00      	nop
 800299a:	e002      	b.n	80029a2 <moving_state_update+0x142>
		case state_move_idle:{if(go_now){move_state = state_tar_plan;} break;}
 800299c:	bf00      	nop
 800299e:	e000      	b.n	80029a2 <moving_state_update+0x142>
		case state_wait_des:{if(paths_ind >= path_n_cnt){time_stamp_5sec = micros(); enable_endeffector = 1; move_state = state_wait_5sec;} break;}
 80029a0:	bf00      	nop
	}

}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bdb0      	pop	{r4, r5, r7, pc}
 80029aa:	bf00      	nop
 80029ac:	f3af 8000 	nop.w
 80029b0:	00000000 	.word	0x00000000
 80029b4:	40a7fe00 	.word	0x40a7fe00
 80029b8:	47ae147b 	.word	0x47ae147b
 80029bc:	3f947ae1 	.word	0x3f947ae1
 80029c0:	00000000 	.word	0x00000000
 80029c4:	415312d0 	.word	0x415312d0
 80029c8:	20002568 	.word	0x20002568
 80029cc:	20002550 	.word	0x20002550
 80029d0:	40010000 	.word	0x40010000
 80029d4:	40768000 	.word	0x40768000
 80029d8:	20002348 	.word	0x20002348
 80029dc:	20002350 	.word	0x20002350
 80029e0:	20000078 	.word	0x20000078
 80029e4:	20002344 	.word	0x20002344
 80029e8:	20000400 	.word	0x20000400
 80029ec:	20002340 	.word	0x20002340
 80029f0:	20000180 	.word	0x20000180
 80029f4:	20002552 	.word	0x20002552
 80029f8:	20002554 	.word	0x20002554
 80029fc:	20000134 	.word	0x20000134
 8002a00:	20002574 	.word	0x20002574

08002a04 <end_effector_update>:


#define end_effector_address 0x23
void end_effector_update(){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af02      	add	r7, sp, #8
	if(enable_endeffector){
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <end_effector_update+0x34>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00d      	beq.n	8002a2e <end_effector_update+0x2a>
		uint8_t temp = 0x45;
 8002a12:	2345      	movs	r3, #69	; 0x45
 8002a14:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Master_Transmit(&hi2c1, end_effector_address << 1 , &temp, 1, 1000);
 8002a16:	1dfa      	adds	r2, r7, #7
 8002a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	2301      	movs	r3, #1
 8002a20:	2146      	movs	r1, #70	; 0x46
 8002a22:	4806      	ldr	r0, [pc, #24]	; (8002a3c <end_effector_update+0x38>)
 8002a24:	f001 fac4 	bl	8003fb0 <HAL_I2C_Master_Transmit>
		enable_endeffector = 0;
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <end_effector_update+0x34>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
	}

}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20002552 	.word	0x20002552
 8002a3c:	200026fc 	.word	0x200026fc

08002a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a44:	b672      	cpsid	i
}
 8002a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a48:	e7fe      	b.n	8002a48 <Error_Handler+0x8>
	...

08002a4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	4a0f      	ldr	r2, [pc, #60]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a60:	6453      	str	r3, [r2, #68]	; 0x44
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	4a08      	ldr	r2, [pc, #32]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a8a:	2007      	movs	r0, #7
 8002a8c:	f000 fbda 	bl	8003244 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40023800 	.word	0x40023800

08002a9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	; 0x28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a19      	ldr	r2, [pc, #100]	; (8002b20 <HAL_I2C_MspInit+0x84>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d12c      	bne.n	8002b18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <HAL_I2C_MspInit+0x88>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a17      	ldr	r2, [pc, #92]	; (8002b24 <HAL_I2C_MspInit+0x88>)
 8002ac8:	f043 0302 	orr.w	r3, r3, #2
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <HAL_I2C_MspInit+0x88>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ada:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ae0:	2312      	movs	r3, #18
 8002ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002aec:	2304      	movs	r3, #4
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af0:	f107 0314 	add.w	r3, r7, #20
 8002af4:	4619      	mov	r1, r3
 8002af6:	480c      	ldr	r0, [pc, #48]	; (8002b28 <HAL_I2C_MspInit+0x8c>)
 8002af8:	f000 ff78 	bl	80039ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <HAL_I2C_MspInit+0x88>)
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <HAL_I2C_MspInit+0x88>)
 8002b06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_I2C_MspInit+0x88>)
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b18:	bf00      	nop
 8002b1a:	3728      	adds	r7, #40	; 0x28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40005400 	.word	0x40005400
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40020400 	.word	0x40020400

08002b2c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b34:	f107 0314 	add.w	r3, r7, #20
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a19      	ldr	r2, [pc, #100]	; (8002bb0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d12c      	bne.n	8002ba8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	4a17      	ldr	r2, [pc, #92]	; (8002bb4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b94:	2300      	movs	r3, #0
 8002b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002ba4:	f000 ff22 	bl	80039ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002ba8:	bf00      	nop
 8002baa:	3728      	adds	r7, #40	; 0x28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40010000 	.word	0x40010000
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40020000 	.word	0x40020000

08002bbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a0b      	ldr	r2, [pc, #44]	; (8002bf8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d10d      	bne.n	8002bea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <HAL_TIM_PWM_MspInit+0x40>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	4a09      	ldr	r2, [pc, #36]	; (8002bfc <HAL_TIM_PWM_MspInit+0x40>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bde:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <HAL_TIM_PWM_MspInit+0x40>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	40023800 	.word	0x40023800

08002c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a0e      	ldr	r2, [pc, #56]	; (8002c48 <HAL_TIM_Base_MspInit+0x48>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d115      	bne.n	8002c3e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <HAL_TIM_Base_MspInit+0x4c>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	4a0c      	ldr	r2, [pc, #48]	; (8002c4c <HAL_TIM_Base_MspInit+0x4c>)
 8002c1c:	f043 0308 	orr.w	r3, r3, #8
 8002c20:	6413      	str	r3, [r2, #64]	; 0x40
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_TIM_Base_MspInit+0x4c>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2100      	movs	r1, #0
 8002c32:	2032      	movs	r0, #50	; 0x32
 8002c34:	f000 fb11 	bl	800325a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002c38:	2032      	movs	r0, #50	; 0x32
 8002c3a:	f000 fb2a 	bl	8003292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40000c00 	.word	0x40000c00
 8002c4c:	40023800 	.word	0x40023800

08002c50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 030c 	add.w	r3, r7, #12
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a12      	ldr	r2, [pc, #72]	; (8002cb8 <HAL_TIM_MspPostInit+0x68>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d11d      	bne.n	8002cae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <HAL_TIM_MspPostInit+0x6c>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a10      	ldr	r2, [pc, #64]	; (8002cbc <HAL_TIM_MspPostInit+0x6c>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <HAL_TIM_MspPostInit+0x6c>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c8e:	23c0      	movs	r3, #192	; 0xc0
 8002c90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c92:	2302      	movs	r3, #2
 8002c94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca2:	f107 030c 	add.w	r3, r7, #12
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4805      	ldr	r0, [pc, #20]	; (8002cc0 <HAL_TIM_MspPostInit+0x70>)
 8002caa:	f000 fe9f 	bl	80039ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002cae:	bf00      	nop
 8002cb0:	3720      	adds	r7, #32
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40000400 	.word	0x40000400
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40020000 	.word	0x40020000

08002cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a4c      	ldr	r2, [pc, #304]	; (8002e14 <HAL_UART_MspInit+0x150>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	f040 8091 	bne.w	8002e0a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ce8:	2300      	movs	r3, #0
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	4b4a      	ldr	r3, [pc, #296]	; (8002e18 <HAL_UART_MspInit+0x154>)
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	4a49      	ldr	r2, [pc, #292]	; (8002e18 <HAL_UART_MspInit+0x154>)
 8002cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf8:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <HAL_UART_MspInit+0x154>)
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	4b43      	ldr	r3, [pc, #268]	; (8002e18 <HAL_UART_MspInit+0x154>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	4a42      	ldr	r2, [pc, #264]	; (8002e18 <HAL_UART_MspInit+0x154>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6313      	str	r3, [r2, #48]	; 0x30
 8002d14:	4b40      	ldr	r3, [pc, #256]	; (8002e18 <HAL_UART_MspInit+0x154>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d20:	230c      	movs	r3, #12
 8002d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d30:	2307      	movs	r3, #7
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4838      	ldr	r0, [pc, #224]	; (8002e1c <HAL_UART_MspInit+0x158>)
 8002d3c:	f000 fe56 	bl	80039ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002d40:	4b37      	ldr	r3, [pc, #220]	; (8002e20 <HAL_UART_MspInit+0x15c>)
 8002d42:	4a38      	ldr	r2, [pc, #224]	; (8002e24 <HAL_UART_MspInit+0x160>)
 8002d44:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002d46:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <HAL_UART_MspInit+0x15c>)
 8002d48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d4c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d4e:	4b34      	ldr	r3, [pc, #208]	; (8002e20 <HAL_UART_MspInit+0x15c>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d54:	4b32      	ldr	r3, [pc, #200]	; (8002e20 <HAL_UART_MspInit+0x15c>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d5a:	4b31      	ldr	r3, [pc, #196]	; (8002e20 <HAL_UART_MspInit+0x15c>)
 8002d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d60:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d62:	4b2f      	ldr	r3, [pc, #188]	; (8002e20 <HAL_UART_MspInit+0x15c>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d68:	4b2d      	ldr	r3, [pc, #180]	; (8002e20 <HAL_UART_MspInit+0x15c>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002d6e:	4b2c      	ldr	r3, [pc, #176]	; (8002e20 <HAL_UART_MspInit+0x15c>)
 8002d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d74:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d76:	4b2a      	ldr	r3, [pc, #168]	; (8002e20 <HAL_UART_MspInit+0x15c>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d7c:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <HAL_UART_MspInit+0x15c>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d82:	4827      	ldr	r0, [pc, #156]	; (8002e20 <HAL_UART_MspInit+0x15c>)
 8002d84:	f000 faa0 	bl	80032c8 <HAL_DMA_Init>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002d8e:	f7ff fe57 	bl	8002a40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a22      	ldr	r2, [pc, #136]	; (8002e20 <HAL_UART_MspInit+0x15c>)
 8002d96:	635a      	str	r2, [r3, #52]	; 0x34
 8002d98:	4a21      	ldr	r2, [pc, #132]	; (8002e20 <HAL_UART_MspInit+0x15c>)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002d9e:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <HAL_UART_MspInit+0x164>)
 8002da0:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <HAL_UART_MspInit+0x168>)
 8002da2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002da4:	4b20      	ldr	r3, [pc, #128]	; (8002e28 <HAL_UART_MspInit+0x164>)
 8002da6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002daa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dac:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <HAL_UART_MspInit+0x164>)
 8002dae:	2240      	movs	r2, #64	; 0x40
 8002db0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002db2:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <HAL_UART_MspInit+0x164>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002db8:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <HAL_UART_MspInit+0x164>)
 8002dba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dbe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_UART_MspInit+0x164>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dc6:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <HAL_UART_MspInit+0x164>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002dcc:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <HAL_UART_MspInit+0x164>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <HAL_UART_MspInit+0x164>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dd8:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <HAL_UART_MspInit+0x164>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002dde:	4812      	ldr	r0, [pc, #72]	; (8002e28 <HAL_UART_MspInit+0x164>)
 8002de0:	f000 fa72 	bl	80032c8 <HAL_DMA_Init>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002dea:	f7ff fe29 	bl	8002a40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a0d      	ldr	r2, [pc, #52]	; (8002e28 <HAL_UART_MspInit+0x164>)
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
 8002df4:	4a0c      	ldr	r2, [pc, #48]	; (8002e28 <HAL_UART_MspInit+0x164>)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	2026      	movs	r0, #38	; 0x26
 8002e00:	f000 fa2b 	bl	800325a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e04:	2026      	movs	r0, #38	; 0x26
 8002e06:	f000 fa44 	bl	8003292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e0a:	bf00      	nop
 8002e0c:	3728      	adds	r7, #40	; 0x28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40004400 	.word	0x40004400
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40020000 	.word	0x40020000
 8002e20:	2000269c 	.word	0x2000269c
 8002e24:	40026088 	.word	0x40026088
 8002e28:	200027d0 	.word	0x200027d0
 8002e2c:	400260a0 	.word	0x400260a0

08002e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e34:	e7fe      	b.n	8002e34 <NMI_Handler+0x4>

08002e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e36:	b480      	push	{r7}
 8002e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e3a:	e7fe      	b.n	8002e3a <HardFault_Handler+0x4>

08002e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e40:	e7fe      	b.n	8002e40 <MemManage_Handler+0x4>

08002e42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e46:	e7fe      	b.n	8002e46 <BusFault_Handler+0x4>

08002e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e4c:	e7fe      	b.n	8002e4c <UsageFault_Handler+0x4>

08002e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e7c:	f000 f8f2 	bl	8003064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e80:	bf00      	nop
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002e88:	4802      	ldr	r0, [pc, #8]	; (8002e94 <DMA1_Stream5_IRQHandler+0x10>)
 8002e8a:	f000 fb45 	bl	8003518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	2000269c 	.word	0x2000269c

08002e98 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002e9c:	4802      	ldr	r0, [pc, #8]	; (8002ea8 <DMA1_Stream6_IRQHandler+0x10>)
 8002e9e:	f000 fb3b 	bl	8003518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	200027d0 	.word	0x200027d0

08002eac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002eb0:	4802      	ldr	r0, [pc, #8]	; (8002ebc <USART2_IRQHandler+0x10>)
 8002eb2:	f003 f8cd 	bl	8006050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20002870 	.word	0x20002870

08002ec0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002ec4:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <TIM5_IRQHandler+0x10>)
 8002ec6:	f002 f981 	bl	80051cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20002750 	.word	0x20002750

08002ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002edc:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <_sbrk+0x5c>)
 8002ede:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <_sbrk+0x60>)
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ee8:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <_sbrk+0x64>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <_sbrk+0x64>)
 8002ef2:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <_sbrk+0x68>)
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <_sbrk+0x64>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d207      	bcs.n	8002f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f04:	f003 ff74 	bl	8006df0 <__errno>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f12:	e009      	b.n	8002f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f14:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <_sbrk+0x64>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f1a:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <_sbrk+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	4a05      	ldr	r2, [pc, #20]	; (8002f38 <_sbrk+0x64>)
 8002f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f26:	68fb      	ldr	r3, [r7, #12]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20020000 	.word	0x20020000
 8002f34:	00000400 	.word	0x00000400
 8002f38:	20002690 	.word	0x20002690
 8002f3c:	200028c8 	.word	0x200028c8

08002f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <SystemInit+0x28>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	4a07      	ldr	r2, [pc, #28]	; (8002f68 <SystemInit+0x28>)
 8002f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f54:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <SystemInit+0x28>)
 8002f56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f5a:	609a      	str	r2, [r3, #8]
#endif
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fa4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f72:	e003      	b.n	8002f7c <LoopCopyDataInit>

08002f74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f7a:	3104      	adds	r1, #4

08002f7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f7c:	480b      	ldr	r0, [pc, #44]	; (8002fac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f84:	d3f6      	bcc.n	8002f74 <CopyDataInit>
  ldr  r2, =_sbss
 8002f86:	4a0b      	ldr	r2, [pc, #44]	; (8002fb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f88:	e002      	b.n	8002f90 <LoopFillZerobss>

08002f8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f8c:	f842 3b04 	str.w	r3, [r2], #4

08002f90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f90:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f94:	d3f9      	bcc.n	8002f8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f96:	f7ff ffd3 	bl	8002f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f9a:	f003 ff2f 	bl	8006dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f9e:	f7fd ff37 	bl	8000e10 <main>
  bx  lr    
 8002fa2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fa4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002fa8:	08006fc8 	.word	0x08006fc8
  ldr  r0, =_sdata
 8002fac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002fb0:	20000118 	.word	0x20000118
  ldr  r2, =_sbss
 8002fb4:	20000118 	.word	0x20000118
  ldr  r3, = _ebss
 8002fb8:	200028c4 	.word	0x200028c4

08002fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fbc:	e7fe      	b.n	8002fbc <ADC_IRQHandler>
	...

08002fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <HAL_Init+0x40>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a0d      	ldr	r2, [pc, #52]	; (8003000 <HAL_Init+0x40>)
 8002fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_Init+0x40>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <HAL_Init+0x40>)
 8002fd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fdc:	4b08      	ldr	r3, [pc, #32]	; (8003000 <HAL_Init+0x40>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a07      	ldr	r2, [pc, #28]	; (8003000 <HAL_Init+0x40>)
 8002fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fe8:	2003      	movs	r0, #3
 8002fea:	f000 f92b 	bl	8003244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f000 f808 	bl	8003004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ff4:	f7ff fd2a 	bl	8002a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40023c00 	.word	0x40023c00

08003004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800300c:	4b12      	ldr	r3, [pc, #72]	; (8003058 <HAL_InitTick+0x54>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4b12      	ldr	r3, [pc, #72]	; (800305c <HAL_InitTick+0x58>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	4619      	mov	r1, r3
 8003016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800301a:	fbb3 f3f1 	udiv	r3, r3, r1
 800301e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003022:	4618      	mov	r0, r3
 8003024:	f000 f943 	bl	80032ae <HAL_SYSTICK_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e00e      	b.n	8003050 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b0f      	cmp	r3, #15
 8003036:	d80a      	bhi.n	800304e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003038:	2200      	movs	r2, #0
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	f04f 30ff 	mov.w	r0, #4294967295
 8003040:	f000 f90b 	bl	800325a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003044:	4a06      	ldr	r2, [pc, #24]	; (8003060 <HAL_InitTick+0x5c>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	e000      	b.n	8003050 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	200000a8 	.word	0x200000a8
 800305c:	200000b0 	.word	0x200000b0
 8003060:	200000ac 	.word	0x200000ac

08003064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_IncTick+0x20>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_IncTick+0x24>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4413      	add	r3, r2
 8003074:	4a04      	ldr	r2, [pc, #16]	; (8003088 <HAL_IncTick+0x24>)
 8003076:	6013      	str	r3, [r2, #0]
}
 8003078:	bf00      	nop
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	200000b0 	.word	0x200000b0
 8003088:	200028b0 	.word	0x200028b0

0800308c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return uwTick;
 8003090:	4b03      	ldr	r3, [pc, #12]	; (80030a0 <HAL_GetTick+0x14>)
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	200028b0 	.word	0x200028b0

080030a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <__NVIC_SetPriorityGrouping+0x44>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030c0:	4013      	ands	r3, r2
 80030c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030d6:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <__NVIC_SetPriorityGrouping+0x44>)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	60d3      	str	r3, [r2, #12]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f0:	4b04      	ldr	r3, [pc, #16]	; (8003104 <__NVIC_GetPriorityGrouping+0x18>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	0a1b      	lsrs	r3, r3, #8
 80030f6:	f003 0307 	and.w	r3, r3, #7
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	2b00      	cmp	r3, #0
 8003118:	db0b      	blt.n	8003132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	f003 021f 	and.w	r2, r3, #31
 8003120:	4907      	ldr	r1, [pc, #28]	; (8003140 <__NVIC_EnableIRQ+0x38>)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	2001      	movs	r0, #1
 800312a:	fa00 f202 	lsl.w	r2, r0, r2
 800312e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	e000e100 	.word	0xe000e100

08003144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	6039      	str	r1, [r7, #0]
 800314e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003154:	2b00      	cmp	r3, #0
 8003156:	db0a      	blt.n	800316e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	b2da      	uxtb	r2, r3
 800315c:	490c      	ldr	r1, [pc, #48]	; (8003190 <__NVIC_SetPriority+0x4c>)
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	0112      	lsls	r2, r2, #4
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	440b      	add	r3, r1
 8003168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800316c:	e00a      	b.n	8003184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	b2da      	uxtb	r2, r3
 8003172:	4908      	ldr	r1, [pc, #32]	; (8003194 <__NVIC_SetPriority+0x50>)
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	3b04      	subs	r3, #4
 800317c:	0112      	lsls	r2, r2, #4
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	440b      	add	r3, r1
 8003182:	761a      	strb	r2, [r3, #24]
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000e100 	.word	0xe000e100
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003198:	b480      	push	{r7}
 800319a:	b089      	sub	sp, #36	; 0x24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f1c3 0307 	rsb	r3, r3, #7
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	bf28      	it	cs
 80031b6:	2304      	movcs	r3, #4
 80031b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3304      	adds	r3, #4
 80031be:	2b06      	cmp	r3, #6
 80031c0:	d902      	bls.n	80031c8 <NVIC_EncodePriority+0x30>
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	3b03      	subs	r3, #3
 80031c6:	e000      	b.n	80031ca <NVIC_EncodePriority+0x32>
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031cc:	f04f 32ff 	mov.w	r2, #4294967295
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43da      	mvns	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	401a      	ands	r2, r3
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e0:	f04f 31ff 	mov.w	r1, #4294967295
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ea:	43d9      	mvns	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f0:	4313      	orrs	r3, r2
         );
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3724      	adds	r7, #36	; 0x24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
	...

08003200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3b01      	subs	r3, #1
 800320c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003210:	d301      	bcc.n	8003216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003212:	2301      	movs	r3, #1
 8003214:	e00f      	b.n	8003236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003216:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <SysTick_Config+0x40>)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3b01      	subs	r3, #1
 800321c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800321e:	210f      	movs	r1, #15
 8003220:	f04f 30ff 	mov.w	r0, #4294967295
 8003224:	f7ff ff8e 	bl	8003144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <SysTick_Config+0x40>)
 800322a:	2200      	movs	r2, #0
 800322c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800322e:	4b04      	ldr	r3, [pc, #16]	; (8003240 <SysTick_Config+0x40>)
 8003230:	2207      	movs	r2, #7
 8003232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	e000e010 	.word	0xe000e010

08003244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff ff29 	bl	80030a4 <__NVIC_SetPriorityGrouping>
}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800325a:	b580      	push	{r7, lr}
 800325c:	b086      	sub	sp, #24
 800325e:	af00      	add	r7, sp, #0
 8003260:	4603      	mov	r3, r0
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
 8003266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800326c:	f7ff ff3e 	bl	80030ec <__NVIC_GetPriorityGrouping>
 8003270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	6978      	ldr	r0, [r7, #20]
 8003278:	f7ff ff8e 	bl	8003198 <NVIC_EncodePriority>
 800327c:	4602      	mov	r2, r0
 800327e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003282:	4611      	mov	r1, r2
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff ff5d 	bl	8003144 <__NVIC_SetPriority>
}
 800328a:	bf00      	nop
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	4603      	mov	r3, r0
 800329a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800329c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff ff31 	bl	8003108 <__NVIC_EnableIRQ>
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff ffa2 	bl	8003200 <SysTick_Config>
 80032bc:	4603      	mov	r3, r0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032d4:	f7ff feda 	bl	800308c <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e099      	b.n	8003418 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003304:	e00f      	b.n	8003326 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003306:	f7ff fec1 	bl	800308c <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b05      	cmp	r3, #5
 8003312:	d908      	bls.n	8003326 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2203      	movs	r2, #3
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e078      	b.n	8003418 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1e8      	bne.n	8003306 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4b38      	ldr	r3, [pc, #224]	; (8003420 <HAL_DMA_Init+0x158>)
 8003340:	4013      	ands	r3, r2
 8003342:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003352:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800335e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800336a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	2b04      	cmp	r3, #4
 800337e:	d107      	bne.n	8003390 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	4313      	orrs	r3, r2
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f023 0307 	bic.w	r3, r3, #7
 80033a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d117      	bne.n	80033ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00e      	beq.n	80033ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fa91 	bl	80038f4 <DMA_CheckFifoParam>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2240      	movs	r2, #64	; 0x40
 80033dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033e6:	2301      	movs	r3, #1
 80033e8:	e016      	b.n	8003418 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fa48 	bl	8003888 <DMA_CalcBaseAndBitshift>
 80033f8:	4603      	mov	r3, r0
 80033fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003400:	223f      	movs	r2, #63	; 0x3f
 8003402:	409a      	lsls	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	f010803f 	.word	0xf010803f

08003424 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_DMA_Start_IT+0x26>
 8003446:	2302      	movs	r3, #2
 8003448:	e040      	b.n	80034cc <HAL_DMA_Start_IT+0xa8>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d12f      	bne.n	80034be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2202      	movs	r2, #2
 8003462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f9da 	bl	800382c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347c:	223f      	movs	r2, #63	; 0x3f
 800347e:	409a      	lsls	r2, r3
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0216 	orr.w	r2, r2, #22
 8003492:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d007      	beq.n	80034ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0208 	orr.w	r2, r2, #8
 80034aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	e005      	b.n	80034ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034c6:	2302      	movs	r3, #2
 80034c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d004      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2280      	movs	r2, #128	; 0x80
 80034ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e00c      	b.n	800350c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2205      	movs	r2, #5
 80034f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0201 	bic.w	r2, r2, #1
 8003508:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003524:	4b92      	ldr	r3, [pc, #584]	; (8003770 <HAL_DMA_IRQHandler+0x258>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a92      	ldr	r2, [pc, #584]	; (8003774 <HAL_DMA_IRQHandler+0x25c>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	0a9b      	lsrs	r3, r3, #10
 8003530:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003536:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003542:	2208      	movs	r2, #8
 8003544:	409a      	lsls	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4013      	ands	r3, r2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d01a      	beq.n	8003584 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d013      	beq.n	8003584 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0204 	bic.w	r2, r2, #4
 800356a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003570:	2208      	movs	r2, #8
 8003572:	409a      	lsls	r2, r3
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	f043 0201 	orr.w	r2, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	2201      	movs	r2, #1
 800358a:	409a      	lsls	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d012      	beq.n	80035ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00b      	beq.n	80035ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a6:	2201      	movs	r2, #1
 80035a8:	409a      	lsls	r2, r3
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b2:	f043 0202 	orr.w	r2, r3, #2
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035be:	2204      	movs	r2, #4
 80035c0:	409a      	lsls	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d012      	beq.n	80035f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00b      	beq.n	80035f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035dc:	2204      	movs	r2, #4
 80035de:	409a      	lsls	r2, r3
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e8:	f043 0204 	orr.w	r2, r3, #4
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f4:	2210      	movs	r2, #16
 80035f6:	409a      	lsls	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d043      	beq.n	8003688 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d03c      	beq.n	8003688 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003612:	2210      	movs	r2, #16
 8003614:	409a      	lsls	r2, r3
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d018      	beq.n	800365a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d108      	bne.n	8003648 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d024      	beq.n	8003688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4798      	blx	r3
 8003646:	e01f      	b.n	8003688 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01b      	beq.n	8003688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	4798      	blx	r3
 8003658:	e016      	b.n	8003688 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d107      	bne.n	8003678 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0208 	bic.w	r2, r2, #8
 8003676:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368c:	2220      	movs	r2, #32
 800368e:	409a      	lsls	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4013      	ands	r3, r2
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 808e 	beq.w	80037b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 8086 	beq.w	80037b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ae:	2220      	movs	r2, #32
 80036b0:	409a      	lsls	r2, r3
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b05      	cmp	r3, #5
 80036c0:	d136      	bne.n	8003730 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0216 	bic.w	r2, r2, #22
 80036d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <HAL_DMA_IRQHandler+0x1da>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0208 	bic.w	r2, r2, #8
 8003700:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003706:	223f      	movs	r2, #63	; 0x3f
 8003708:	409a      	lsls	r2, r3
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003722:	2b00      	cmp	r3, #0
 8003724:	d07d      	beq.n	8003822 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	4798      	blx	r3
        }
        return;
 800372e:	e078      	b.n	8003822 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d01c      	beq.n	8003778 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d108      	bne.n	800375e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	2b00      	cmp	r3, #0
 8003752:	d030      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	4798      	blx	r3
 800375c:	e02b      	b.n	80037b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003762:	2b00      	cmp	r3, #0
 8003764:	d027      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
 800376e:	e022      	b.n	80037b6 <HAL_DMA_IRQHandler+0x29e>
 8003770:	200000a8 	.word	0x200000a8
 8003774:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10f      	bne.n	80037a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0210 	bic.w	r2, r2, #16
 8003794:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d032      	beq.n	8003824 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d022      	beq.n	8003810 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2205      	movs	r2, #5
 80037ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0201 	bic.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	3301      	adds	r3, #1
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d307      	bcc.n	80037fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f2      	bne.n	80037e2 <HAL_DMA_IRQHandler+0x2ca>
 80037fc:	e000      	b.n	8003800 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80037fe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	4798      	blx	r3
 8003820:	e000      	b.n	8003824 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003822:	bf00      	nop
    }
  }
}
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop

0800382c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003848:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b40      	cmp	r3, #64	; 0x40
 8003858:	d108      	bne.n	800386c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800386a:	e007      	b.n	800387c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	60da      	str	r2, [r3, #12]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	3b10      	subs	r3, #16
 8003898:	4a14      	ldr	r2, [pc, #80]	; (80038ec <DMA_CalcBaseAndBitshift+0x64>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038a2:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <DMA_CalcBaseAndBitshift+0x68>)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4413      	add	r3, r2
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d909      	bls.n	80038ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038be:	f023 0303 	bic.w	r3, r3, #3
 80038c2:	1d1a      	adds	r2, r3, #4
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	659a      	str	r2, [r3, #88]	; 0x58
 80038c8:	e007      	b.n	80038da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038d2:	f023 0303 	bic.w	r3, r3, #3
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	aaaaaaab 	.word	0xaaaaaaab
 80038f0:	08006fb0 	.word	0x08006fb0

080038f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003904:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d11f      	bne.n	800394e <DMA_CheckFifoParam+0x5a>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b03      	cmp	r3, #3
 8003912:	d856      	bhi.n	80039c2 <DMA_CheckFifoParam+0xce>
 8003914:	a201      	add	r2, pc, #4	; (adr r2, 800391c <DMA_CheckFifoParam+0x28>)
 8003916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391a:	bf00      	nop
 800391c:	0800392d 	.word	0x0800392d
 8003920:	0800393f 	.word	0x0800393f
 8003924:	0800392d 	.word	0x0800392d
 8003928:	080039c3 	.word	0x080039c3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d046      	beq.n	80039c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800393c:	e043      	b.n	80039c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003942:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003946:	d140      	bne.n	80039ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800394c:	e03d      	b.n	80039ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003956:	d121      	bne.n	800399c <DMA_CheckFifoParam+0xa8>
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b03      	cmp	r3, #3
 800395c:	d837      	bhi.n	80039ce <DMA_CheckFifoParam+0xda>
 800395e:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <DMA_CheckFifoParam+0x70>)
 8003960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003964:	08003975 	.word	0x08003975
 8003968:	0800397b 	.word	0x0800397b
 800396c:	08003975 	.word	0x08003975
 8003970:	0800398d 	.word	0x0800398d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
      break;
 8003978:	e030      	b.n	80039dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d025      	beq.n	80039d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800398a:	e022      	b.n	80039d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003994:	d11f      	bne.n	80039d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800399a:	e01c      	b.n	80039d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d903      	bls.n	80039aa <DMA_CheckFifoParam+0xb6>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d003      	beq.n	80039b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039a8:	e018      	b.n	80039dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
      break;
 80039ae:	e015      	b.n	80039dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00e      	beq.n	80039da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
      break;
 80039c0:	e00b      	b.n	80039da <DMA_CheckFifoParam+0xe6>
      break;
 80039c2:	bf00      	nop
 80039c4:	e00a      	b.n	80039dc <DMA_CheckFifoParam+0xe8>
      break;
 80039c6:	bf00      	nop
 80039c8:	e008      	b.n	80039dc <DMA_CheckFifoParam+0xe8>
      break;
 80039ca:	bf00      	nop
 80039cc:	e006      	b.n	80039dc <DMA_CheckFifoParam+0xe8>
      break;
 80039ce:	bf00      	nop
 80039d0:	e004      	b.n	80039dc <DMA_CheckFifoParam+0xe8>
      break;
 80039d2:	bf00      	nop
 80039d4:	e002      	b.n	80039dc <DMA_CheckFifoParam+0xe8>
      break;   
 80039d6:	bf00      	nop
 80039d8:	e000      	b.n	80039dc <DMA_CheckFifoParam+0xe8>
      break;
 80039da:	bf00      	nop
    }
  } 
  
  return status; 
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop

080039ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b089      	sub	sp, #36	; 0x24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	e159      	b.n	8003cbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a08:	2201      	movs	r2, #1
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	f040 8148 	bne.w	8003cb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d00b      	beq.n	8003a46 <HAL_GPIO_Init+0x5a>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d007      	beq.n	8003a46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a3a:	2b11      	cmp	r3, #17
 8003a3c:	d003      	beq.n	8003a46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b12      	cmp	r3, #18
 8003a44:	d130      	bne.n	8003aa8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	2203      	movs	r2, #3
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	091b      	lsrs	r3, r3, #4
 8003a92:	f003 0201 	and.w	r2, r3, #1
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d003      	beq.n	8003ae8 <HAL_GPIO_Init+0xfc>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b12      	cmp	r3, #18
 8003ae6:	d123      	bne.n	8003b30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	08da      	lsrs	r2, r3, #3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3208      	adds	r2, #8
 8003af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	220f      	movs	r2, #15
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	08da      	lsrs	r2, r3, #3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3208      	adds	r2, #8
 8003b2a:	69b9      	ldr	r1, [r7, #24]
 8003b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4013      	ands	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 0203 	and.w	r2, r3, #3
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80a2 	beq.w	8003cb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	4b57      	ldr	r3, [pc, #348]	; (8003cd4 <HAL_GPIO_Init+0x2e8>)
 8003b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7a:	4a56      	ldr	r2, [pc, #344]	; (8003cd4 <HAL_GPIO_Init+0x2e8>)
 8003b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b80:	6453      	str	r3, [r2, #68]	; 0x44
 8003b82:	4b54      	ldr	r3, [pc, #336]	; (8003cd4 <HAL_GPIO_Init+0x2e8>)
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b8e:	4a52      	ldr	r2, [pc, #328]	; (8003cd8 <HAL_GPIO_Init+0x2ec>)
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	089b      	lsrs	r3, r3, #2
 8003b94:	3302      	adds	r3, #2
 8003b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	220f      	movs	r2, #15
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a49      	ldr	r2, [pc, #292]	; (8003cdc <HAL_GPIO_Init+0x2f0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d019      	beq.n	8003bee <HAL_GPIO_Init+0x202>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a48      	ldr	r2, [pc, #288]	; (8003ce0 <HAL_GPIO_Init+0x2f4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d013      	beq.n	8003bea <HAL_GPIO_Init+0x1fe>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a47      	ldr	r2, [pc, #284]	; (8003ce4 <HAL_GPIO_Init+0x2f8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00d      	beq.n	8003be6 <HAL_GPIO_Init+0x1fa>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a46      	ldr	r2, [pc, #280]	; (8003ce8 <HAL_GPIO_Init+0x2fc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d007      	beq.n	8003be2 <HAL_GPIO_Init+0x1f6>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a45      	ldr	r2, [pc, #276]	; (8003cec <HAL_GPIO_Init+0x300>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d101      	bne.n	8003bde <HAL_GPIO_Init+0x1f2>
 8003bda:	2304      	movs	r3, #4
 8003bdc:	e008      	b.n	8003bf0 <HAL_GPIO_Init+0x204>
 8003bde:	2307      	movs	r3, #7
 8003be0:	e006      	b.n	8003bf0 <HAL_GPIO_Init+0x204>
 8003be2:	2303      	movs	r3, #3
 8003be4:	e004      	b.n	8003bf0 <HAL_GPIO_Init+0x204>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e002      	b.n	8003bf0 <HAL_GPIO_Init+0x204>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <HAL_GPIO_Init+0x204>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	f002 0203 	and.w	r2, r2, #3
 8003bf6:	0092      	lsls	r2, r2, #2
 8003bf8:	4093      	lsls	r3, r2
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c00:	4935      	ldr	r1, [pc, #212]	; (8003cd8 <HAL_GPIO_Init+0x2ec>)
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	089b      	lsrs	r3, r3, #2
 8003c06:	3302      	adds	r3, #2
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c0e:	4b38      	ldr	r3, [pc, #224]	; (8003cf0 <HAL_GPIO_Init+0x304>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	43db      	mvns	r3, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c32:	4a2f      	ldr	r2, [pc, #188]	; (8003cf0 <HAL_GPIO_Init+0x304>)
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c38:	4b2d      	ldr	r3, [pc, #180]	; (8003cf0 <HAL_GPIO_Init+0x304>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	43db      	mvns	r3, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4013      	ands	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c5c:	4a24      	ldr	r2, [pc, #144]	; (8003cf0 <HAL_GPIO_Init+0x304>)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c62:	4b23      	ldr	r3, [pc, #140]	; (8003cf0 <HAL_GPIO_Init+0x304>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c86:	4a1a      	ldr	r2, [pc, #104]	; (8003cf0 <HAL_GPIO_Init+0x304>)
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c8c:	4b18      	ldr	r3, [pc, #96]	; (8003cf0 <HAL_GPIO_Init+0x304>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	43db      	mvns	r3, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cb0:	4a0f      	ldr	r2, [pc, #60]	; (8003cf0 <HAL_GPIO_Init+0x304>)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	2b0f      	cmp	r3, #15
 8003cc0:	f67f aea2 	bls.w	8003a08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	bf00      	nop
 8003cc8:	3724      	adds	r7, #36	; 0x24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40013800 	.word	0x40013800
 8003cdc:	40020000 	.word	0x40020000
 8003ce0:	40020400 	.word	0x40020400
 8003ce4:	40020800 	.word	0x40020800
 8003ce8:	40020c00 	.word	0x40020c00
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40013c00 	.word	0x40013c00

08003cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	807b      	strh	r3, [r7, #2]
 8003d00:	4613      	mov	r3, r2
 8003d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d04:	787b      	ldrb	r3, [r7, #1]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d0a:	887a      	ldrh	r2, [r7, #2]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d10:	e003      	b.n	8003d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d12:	887b      	ldrh	r3, [r7, #2]
 8003d14:	041a      	lsls	r2, r3, #16
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	619a      	str	r2, [r3, #24]
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
	...

08003d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e12b      	b.n	8003f92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fe fea4 	bl	8002a9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2224      	movs	r2, #36	; 0x24
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0201 	bic.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d8c:	f001 f85c 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 8003d90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	4a81      	ldr	r2, [pc, #516]	; (8003f9c <HAL_I2C_Init+0x274>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d807      	bhi.n	8003dac <HAL_I2C_Init+0x84>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4a80      	ldr	r2, [pc, #512]	; (8003fa0 <HAL_I2C_Init+0x278>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	bf94      	ite	ls
 8003da4:	2301      	movls	r3, #1
 8003da6:	2300      	movhi	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	e006      	b.n	8003dba <HAL_I2C_Init+0x92>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4a7d      	ldr	r2, [pc, #500]	; (8003fa4 <HAL_I2C_Init+0x27c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	bf94      	ite	ls
 8003db4:	2301      	movls	r3, #1
 8003db6:	2300      	movhi	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e0e7      	b.n	8003f92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4a78      	ldr	r2, [pc, #480]	; (8003fa8 <HAL_I2C_Init+0x280>)
 8003dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dca:	0c9b      	lsrs	r3, r3, #18
 8003dcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4a6a      	ldr	r2, [pc, #424]	; (8003f9c <HAL_I2C_Init+0x274>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d802      	bhi.n	8003dfc <HAL_I2C_Init+0xd4>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	e009      	b.n	8003e10 <HAL_I2C_Init+0xe8>
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e02:	fb02 f303 	mul.w	r3, r2, r3
 8003e06:	4a69      	ldr	r2, [pc, #420]	; (8003fac <HAL_I2C_Init+0x284>)
 8003e08:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0c:	099b      	lsrs	r3, r3, #6
 8003e0e:	3301      	adds	r3, #1
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	430b      	orrs	r3, r1
 8003e16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	495c      	ldr	r1, [pc, #368]	; (8003f9c <HAL_I2C_Init+0x274>)
 8003e2c:	428b      	cmp	r3, r1
 8003e2e:	d819      	bhi.n	8003e64 <HAL_I2C_Init+0x13c>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	1e59      	subs	r1, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e3e:	1c59      	adds	r1, r3, #1
 8003e40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e44:	400b      	ands	r3, r1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_I2C_Init+0x138>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1e59      	subs	r1, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e58:	3301      	adds	r3, #1
 8003e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5e:	e051      	b.n	8003f04 <HAL_I2C_Init+0x1dc>
 8003e60:	2304      	movs	r3, #4
 8003e62:	e04f      	b.n	8003f04 <HAL_I2C_Init+0x1dc>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d111      	bne.n	8003e90 <HAL_I2C_Init+0x168>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1e58      	subs	r0, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6859      	ldr	r1, [r3, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	440b      	add	r3, r1
 8003e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	bf0c      	ite	eq
 8003e88:	2301      	moveq	r3, #1
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	e012      	b.n	8003eb6 <HAL_I2C_Init+0x18e>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	1e58      	subs	r0, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6859      	ldr	r1, [r3, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	0099      	lsls	r1, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_I2C_Init+0x196>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e022      	b.n	8003f04 <HAL_I2C_Init+0x1dc>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10e      	bne.n	8003ee4 <HAL_I2C_Init+0x1bc>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1e58      	subs	r0, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6859      	ldr	r1, [r3, #4]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	440b      	add	r3, r1
 8003ed4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed8:	3301      	adds	r3, #1
 8003eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee2:	e00f      	b.n	8003f04 <HAL_I2C_Init+0x1dc>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1e58      	subs	r0, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	0099      	lsls	r1, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003efa:	3301      	adds	r3, #1
 8003efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	6809      	ldr	r1, [r1, #0]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69da      	ldr	r2, [r3, #28]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6911      	ldr	r1, [r2, #16]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68d2      	ldr	r2, [r2, #12]
 8003f3e:	4311      	orrs	r1, r2
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	430b      	orrs	r3, r1
 8003f46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	000186a0 	.word	0x000186a0
 8003fa0:	001e847f 	.word	0x001e847f
 8003fa4:	003d08ff 	.word	0x003d08ff
 8003fa8:	431bde83 	.word	0x431bde83
 8003fac:	10624dd3 	.word	0x10624dd3

08003fb0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	607a      	str	r2, [r7, #4]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	817b      	strh	r3, [r7, #10]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fc4:	f7ff f862 	bl	800308c <HAL_GetTick>
 8003fc8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	f040 80e0 	bne.w	8004198 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	2319      	movs	r3, #25
 8003fde:	2201      	movs	r2, #1
 8003fe0:	4970      	ldr	r1, [pc, #448]	; (80041a4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 f964 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e0d3      	b.n	800419a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_I2C_Master_Transmit+0x50>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e0cc      	b.n	800419a <HAL_I2C_Master_Transmit+0x1ea>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b01      	cmp	r3, #1
 8004014:	d007      	beq.n	8004026 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0201 	orr.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004034:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2221      	movs	r2, #33	; 0x21
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2210      	movs	r2, #16
 8004042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	893a      	ldrh	r2, [r7, #8]
 8004056:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4a50      	ldr	r2, [pc, #320]	; (80041a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004066:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004068:	8979      	ldrh	r1, [r7, #10]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	6a3a      	ldr	r2, [r7, #32]
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f89c 	bl	80041ac <I2C_MasterRequestWrite>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e08d      	b.n	800419a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407e:	2300      	movs	r3, #0
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004094:	e066      	b.n	8004164 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	6a39      	ldr	r1, [r7, #32]
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f9de 	bl	800445c <I2C_WaitOnTXEFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d107      	bne.n	80040be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e06b      	b.n	800419a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	781a      	ldrb	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d11b      	bne.n	8004138 <HAL_I2C_Master_Transmit+0x188>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	d017      	beq.n	8004138 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	781a      	ldrb	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	6a39      	ldr	r1, [r7, #32]
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 f9ce 	bl	80044de <I2C_WaitOnBTFFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00d      	beq.n	8004164 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	2b04      	cmp	r3, #4
 800414e:	d107      	bne.n	8004160 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e01a      	b.n	800419a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004168:	2b00      	cmp	r3, #0
 800416a:	d194      	bne.n	8004096 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	e000      	b.n	800419a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004198:	2302      	movs	r3, #2
  }
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	00100002 	.word	0x00100002
 80041a8:	ffff0000 	.word	0xffff0000

080041ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	460b      	mov	r3, r1
 80041ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d006      	beq.n	80041d6 <I2C_MasterRequestWrite+0x2a>
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d003      	beq.n	80041d6 <I2C_MasterRequestWrite+0x2a>
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041d4:	d108      	bne.n	80041e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	e00b      	b.n	8004200 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ec:	2b12      	cmp	r3, #18
 80041ee:	d107      	bne.n	8004200 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f84f 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00d      	beq.n	8004234 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004226:	d103      	bne.n	8004230 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800422e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e035      	b.n	80042a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800423c:	d108      	bne.n	8004250 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800423e:	897b      	ldrh	r3, [r7, #10]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	461a      	mov	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800424c:	611a      	str	r2, [r3, #16]
 800424e:	e01b      	b.n	8004288 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004250:	897b      	ldrh	r3, [r7, #10]
 8004252:	11db      	asrs	r3, r3, #7
 8004254:	b2db      	uxtb	r3, r3
 8004256:	f003 0306 	and.w	r3, r3, #6
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f063 030f 	orn	r3, r3, #15
 8004260:	b2da      	uxtb	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	490e      	ldr	r1, [pc, #56]	; (80042a8 <I2C_MasterRequestWrite+0xfc>)
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f875 	bl	800435e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e010      	b.n	80042a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800427e:	897b      	ldrh	r3, [r7, #10]
 8004280:	b2da      	uxtb	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	4907      	ldr	r1, [pc, #28]	; (80042ac <I2C_MasterRequestWrite+0x100>)
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f865 	bl	800435e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	00010008 	.word	0x00010008
 80042ac:	00010002 	.word	0x00010002

080042b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	4613      	mov	r3, r2
 80042be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c0:	e025      	b.n	800430e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c8:	d021      	beq.n	800430e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ca:	f7fe fedf 	bl	800308c <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d302      	bcc.n	80042e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d116      	bne.n	800430e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f043 0220 	orr.w	r2, r3, #32
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e023      	b.n	8004356 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	0c1b      	lsrs	r3, r3, #16
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b01      	cmp	r3, #1
 8004316:	d10d      	bne.n	8004334 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	43da      	mvns	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	4013      	ands	r3, r2
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	bf0c      	ite	eq
 800432a:	2301      	moveq	r3, #1
 800432c:	2300      	movne	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	e00c      	b.n	800434e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	43da      	mvns	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4013      	ands	r3, r2
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	bf0c      	ite	eq
 8004346:	2301      	moveq	r3, #1
 8004348:	2300      	movne	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	429a      	cmp	r2, r3
 8004352:	d0b6      	beq.n	80042c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	607a      	str	r2, [r7, #4]
 800436a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800436c:	e051      	b.n	8004412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437c:	d123      	bne.n	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004396:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f043 0204 	orr.w	r2, r3, #4
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e046      	b.n	8004454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d021      	beq.n	8004412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ce:	f7fe fe5d 	bl	800308c <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d302      	bcc.n	80043e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d116      	bne.n	8004412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e020      	b.n	8004454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	0c1b      	lsrs	r3, r3, #16
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d10c      	bne.n	8004436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	43da      	mvns	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4013      	ands	r3, r2
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	bf14      	ite	ne
 800442e:	2301      	movne	r3, #1
 8004430:	2300      	moveq	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	e00b      	b.n	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	43da      	mvns	r2, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4013      	ands	r3, r2
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf14      	ite	ne
 8004448:	2301      	movne	r3, #1
 800444a:	2300      	moveq	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d18d      	bne.n	800436e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004468:	e02d      	b.n	80044c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f878 	bl	8004560 <I2C_IsAcknowledgeFailed>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e02d      	b.n	80044d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004480:	d021      	beq.n	80044c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004482:	f7fe fe03 	bl	800308c <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	429a      	cmp	r2, r3
 8004490:	d302      	bcc.n	8004498 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d116      	bne.n	80044c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f043 0220 	orr.w	r2, r3, #32
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e007      	b.n	80044d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d0:	2b80      	cmp	r3, #128	; 0x80
 80044d2:	d1ca      	bne.n	800446a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044ea:	e02d      	b.n	8004548 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f837 	bl	8004560 <I2C_IsAcknowledgeFailed>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e02d      	b.n	8004558 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004502:	d021      	beq.n	8004548 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004504:	f7fe fdc2 	bl	800308c <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	429a      	cmp	r2, r3
 8004512:	d302      	bcc.n	800451a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d116      	bne.n	8004548 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	f043 0220 	orr.w	r2, r3, #32
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e007      	b.n	8004558 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b04      	cmp	r3, #4
 8004554:	d1ca      	bne.n	80044ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004576:	d11b      	bne.n	80045b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004580:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	f043 0204 	orr.w	r2, r3, #4
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
	...

080045c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e25b      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d075      	beq.n	80046ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045de:	4ba3      	ldr	r3, [pc, #652]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 030c 	and.w	r3, r3, #12
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d00c      	beq.n	8004604 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ea:	4ba0      	ldr	r3, [pc, #640]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d112      	bne.n	800461c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045f6:	4b9d      	ldr	r3, [pc, #628]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004602:	d10b      	bne.n	800461c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004604:	4b99      	ldr	r3, [pc, #612]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d05b      	beq.n	80046c8 <HAL_RCC_OscConfig+0x108>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d157      	bne.n	80046c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e236      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004624:	d106      	bne.n	8004634 <HAL_RCC_OscConfig+0x74>
 8004626:	4b91      	ldr	r3, [pc, #580]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a90      	ldr	r2, [pc, #576]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 800462c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	e01d      	b.n	8004670 <HAL_RCC_OscConfig+0xb0>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800463c:	d10c      	bne.n	8004658 <HAL_RCC_OscConfig+0x98>
 800463e:	4b8b      	ldr	r3, [pc, #556]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a8a      	ldr	r2, [pc, #552]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	4b88      	ldr	r3, [pc, #544]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a87      	ldr	r2, [pc, #540]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	e00b      	b.n	8004670 <HAL_RCC_OscConfig+0xb0>
 8004658:	4b84      	ldr	r3, [pc, #528]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a83      	ldr	r2, [pc, #524]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 800465e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	4b81      	ldr	r3, [pc, #516]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a80      	ldr	r2, [pc, #512]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 800466a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800466e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d013      	beq.n	80046a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004678:	f7fe fd08 	bl	800308c <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004680:	f7fe fd04 	bl	800308c <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	; 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e1fb      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004692:	4b76      	ldr	r3, [pc, #472]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0xc0>
 800469e:	e014      	b.n	80046ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a0:	f7fe fcf4 	bl	800308c <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046a8:	f7fe fcf0 	bl	800308c <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b64      	cmp	r3, #100	; 0x64
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e1e7      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ba:	4b6c      	ldr	r3, [pc, #432]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0xe8>
 80046c6:	e000      	b.n	80046ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d063      	beq.n	800479e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046d6:	4b65      	ldr	r3, [pc, #404]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 030c 	and.w	r3, r3, #12
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00b      	beq.n	80046fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046e2:	4b62      	ldr	r3, [pc, #392]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d11c      	bne.n	8004728 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ee:	4b5f      	ldr	r3, [pc, #380]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d116      	bne.n	8004728 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046fa:	4b5c      	ldr	r3, [pc, #368]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <HAL_RCC_OscConfig+0x152>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d001      	beq.n	8004712 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e1bb      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004712:	4b56      	ldr	r3, [pc, #344]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4952      	ldr	r1, [pc, #328]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004722:	4313      	orrs	r3, r2
 8004724:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004726:	e03a      	b.n	800479e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d020      	beq.n	8004772 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004730:	4b4f      	ldr	r3, [pc, #316]	; (8004870 <HAL_RCC_OscConfig+0x2b0>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004736:	f7fe fca9 	bl	800308c <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800473e:	f7fe fca5 	bl	800308c <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e19c      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004750:	4b46      	ldr	r3, [pc, #280]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800475c:	4b43      	ldr	r3, [pc, #268]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	4940      	ldr	r1, [pc, #256]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 800476c:	4313      	orrs	r3, r2
 800476e:	600b      	str	r3, [r1, #0]
 8004770:	e015      	b.n	800479e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004772:	4b3f      	ldr	r3, [pc, #252]	; (8004870 <HAL_RCC_OscConfig+0x2b0>)
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fe fc88 	bl	800308c <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004780:	f7fe fc84 	bl	800308c <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e17b      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004792:	4b36      	ldr	r3, [pc, #216]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d030      	beq.n	800480c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d016      	beq.n	80047e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047b2:	4b30      	ldr	r3, [pc, #192]	; (8004874 <HAL_RCC_OscConfig+0x2b4>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b8:	f7fe fc68 	bl	800308c <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047c0:	f7fe fc64 	bl	800308c <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e15b      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047d2:	4b26      	ldr	r3, [pc, #152]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 80047d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0x200>
 80047de:	e015      	b.n	800480c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047e0:	4b24      	ldr	r3, [pc, #144]	; (8004874 <HAL_RCC_OscConfig+0x2b4>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e6:	f7fe fc51 	bl	800308c <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ee:	f7fe fc4d 	bl	800308c <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e144      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004800:	4b1a      	ldr	r3, [pc, #104]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f0      	bne.n	80047ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80a0 	beq.w	800495a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800481a:	2300      	movs	r3, #0
 800481c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800481e:	4b13      	ldr	r3, [pc, #76]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10f      	bne.n	800484a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482a:	2300      	movs	r3, #0
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	4b0f      	ldr	r3, [pc, #60]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	4a0e      	ldr	r2, [pc, #56]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004838:	6413      	str	r3, [r2, #64]	; 0x40
 800483a:	4b0c      	ldr	r3, [pc, #48]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004842:	60bb      	str	r3, [r7, #8]
 8004844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004846:	2301      	movs	r3, #1
 8004848:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484a:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <HAL_RCC_OscConfig+0x2b8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d121      	bne.n	800489a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004856:	4b08      	ldr	r3, [pc, #32]	; (8004878 <HAL_RCC_OscConfig+0x2b8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a07      	ldr	r2, [pc, #28]	; (8004878 <HAL_RCC_OscConfig+0x2b8>)
 800485c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004862:	f7fe fc13 	bl	800308c <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004868:	e011      	b.n	800488e <HAL_RCC_OscConfig+0x2ce>
 800486a:	bf00      	nop
 800486c:	40023800 	.word	0x40023800
 8004870:	42470000 	.word	0x42470000
 8004874:	42470e80 	.word	0x42470e80
 8004878:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800487c:	f7fe fc06 	bl	800308c <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e0fd      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488e:	4b81      	ldr	r3, [pc, #516]	; (8004a94 <HAL_RCC_OscConfig+0x4d4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d106      	bne.n	80048b0 <HAL_RCC_OscConfig+0x2f0>
 80048a2:	4b7d      	ldr	r3, [pc, #500]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a6:	4a7c      	ldr	r2, [pc, #496]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048a8:	f043 0301 	orr.w	r3, r3, #1
 80048ac:	6713      	str	r3, [r2, #112]	; 0x70
 80048ae:	e01c      	b.n	80048ea <HAL_RCC_OscConfig+0x32a>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2b05      	cmp	r3, #5
 80048b6:	d10c      	bne.n	80048d2 <HAL_RCC_OscConfig+0x312>
 80048b8:	4b77      	ldr	r3, [pc, #476]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048bc:	4a76      	ldr	r2, [pc, #472]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048be:	f043 0304 	orr.w	r3, r3, #4
 80048c2:	6713      	str	r3, [r2, #112]	; 0x70
 80048c4:	4b74      	ldr	r3, [pc, #464]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	4a73      	ldr	r2, [pc, #460]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048ca:	f043 0301 	orr.w	r3, r3, #1
 80048ce:	6713      	str	r3, [r2, #112]	; 0x70
 80048d0:	e00b      	b.n	80048ea <HAL_RCC_OscConfig+0x32a>
 80048d2:	4b71      	ldr	r3, [pc, #452]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d6:	4a70      	ldr	r2, [pc, #448]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048d8:	f023 0301 	bic.w	r3, r3, #1
 80048dc:	6713      	str	r3, [r2, #112]	; 0x70
 80048de:	4b6e      	ldr	r3, [pc, #440]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e2:	4a6d      	ldr	r2, [pc, #436]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048e4:	f023 0304 	bic.w	r3, r3, #4
 80048e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d015      	beq.n	800491e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f2:	f7fe fbcb 	bl	800308c <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f8:	e00a      	b.n	8004910 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048fa:	f7fe fbc7 	bl	800308c <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	f241 3288 	movw	r2, #5000	; 0x1388
 8004908:	4293      	cmp	r3, r2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e0bc      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004910:	4b61      	ldr	r3, [pc, #388]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0ee      	beq.n	80048fa <HAL_RCC_OscConfig+0x33a>
 800491c:	e014      	b.n	8004948 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491e:	f7fe fbb5 	bl	800308c <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004924:	e00a      	b.n	800493c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004926:	f7fe fbb1 	bl	800308c <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	f241 3288 	movw	r2, #5000	; 0x1388
 8004934:	4293      	cmp	r3, r2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e0a6      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800493c:	4b56      	ldr	r3, [pc, #344]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 800493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1ee      	bne.n	8004926 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004948:	7dfb      	ldrb	r3, [r7, #23]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d105      	bne.n	800495a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800494e:	4b52      	ldr	r3, [pc, #328]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	4a51      	ldr	r2, [pc, #324]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 8004954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004958:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 8092 	beq.w	8004a88 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004964:	4b4c      	ldr	r3, [pc, #304]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 030c 	and.w	r3, r3, #12
 800496c:	2b08      	cmp	r3, #8
 800496e:	d05c      	beq.n	8004a2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d141      	bne.n	80049fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004978:	4b48      	ldr	r3, [pc, #288]	; (8004a9c <HAL_RCC_OscConfig+0x4dc>)
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497e:	f7fe fb85 	bl	800308c <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004986:	f7fe fb81 	bl	800308c <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e078      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004998:	4b3f      	ldr	r3, [pc, #252]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1f0      	bne.n	8004986 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69da      	ldr	r2, [r3, #28]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	019b      	lsls	r3, r3, #6
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	085b      	lsrs	r3, r3, #1
 80049bc:	3b01      	subs	r3, #1
 80049be:	041b      	lsls	r3, r3, #16
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	061b      	lsls	r3, r3, #24
 80049c8:	4933      	ldr	r1, [pc, #204]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ce:	4b33      	ldr	r3, [pc, #204]	; (8004a9c <HAL_RCC_OscConfig+0x4dc>)
 80049d0:	2201      	movs	r2, #1
 80049d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d4:	f7fe fb5a 	bl	800308c <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049dc:	f7fe fb56 	bl	800308c <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e04d      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ee:	4b2a      	ldr	r3, [pc, #168]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0f0      	beq.n	80049dc <HAL_RCC_OscConfig+0x41c>
 80049fa:	e045      	b.n	8004a88 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fc:	4b27      	ldr	r3, [pc, #156]	; (8004a9c <HAL_RCC_OscConfig+0x4dc>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a02:	f7fe fb43 	bl	800308c <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0a:	f7fe fb3f 	bl	800308c <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e036      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1c:	4b1e      	ldr	r3, [pc, #120]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f0      	bne.n	8004a0a <HAL_RCC_OscConfig+0x44a>
 8004a28:	e02e      	b.n	8004a88 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e029      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a36:	4b18      	ldr	r3, [pc, #96]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d11c      	bne.n	8004a84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d115      	bne.n	8004a84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a5e:	4013      	ands	r3, r2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d10d      	bne.n	8004a84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d106      	bne.n	8004a84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d001      	beq.n	8004a88 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e000      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	40007000 	.word	0x40007000
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	42470060 	.word	0x42470060

08004aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0cc      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab4:	4b68      	ldr	r3, [pc, #416]	; (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d90c      	bls.n	8004adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac2:	4b65      	ldr	r3, [pc, #404]	; (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aca:	4b63      	ldr	r3, [pc, #396]	; (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0b8      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d020      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004af4:	4b59      	ldr	r3, [pc, #356]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4a58      	ldr	r2, [pc, #352]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004afe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b0c:	4b53      	ldr	r3, [pc, #332]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	4a52      	ldr	r2, [pc, #328]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b18:	4b50      	ldr	r3, [pc, #320]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	494d      	ldr	r1, [pc, #308]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d044      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d107      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3e:	4b47      	ldr	r3, [pc, #284]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d119      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e07f      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d003      	beq.n	8004b5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d107      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5e:	4b3f      	ldr	r3, [pc, #252]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d109      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e06f      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b6e:	4b3b      	ldr	r3, [pc, #236]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e067      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b7e:	4b37      	ldr	r3, [pc, #220]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f023 0203 	bic.w	r2, r3, #3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	4934      	ldr	r1, [pc, #208]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b90:	f7fe fa7c 	bl	800308c <HAL_GetTick>
 8004b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b96:	e00a      	b.n	8004bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b98:	f7fe fa78 	bl	800308c <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e04f      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bae:	4b2b      	ldr	r3, [pc, #172]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 020c 	and.w	r2, r3, #12
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d1eb      	bne.n	8004b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc0:	4b25      	ldr	r3, [pc, #148]	; (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 030f 	and.w	r3, r3, #15
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d20c      	bcs.n	8004be8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bce:	4b22      	ldr	r3, [pc, #136]	; (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd6:	4b20      	ldr	r3, [pc, #128]	; (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d001      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e032      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf4:	4b19      	ldr	r3, [pc, #100]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4916      	ldr	r1, [pc, #88]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c12:	4b12      	ldr	r3, [pc, #72]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	490e      	ldr	r1, [pc, #56]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c26:	f000 f821 	bl	8004c6c <HAL_RCC_GetSysClockFreq>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	091b      	lsrs	r3, r3, #4
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	490a      	ldr	r1, [pc, #40]	; (8004c60 <HAL_RCC_ClockConfig+0x1c0>)
 8004c38:	5ccb      	ldrb	r3, [r1, r3]
 8004c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3e:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c42:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <HAL_RCC_ClockConfig+0x1c8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fe f9dc 	bl	8003004 <HAL_InitTick>

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40023c00 	.word	0x40023c00
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	08006f98 	.word	0x08006f98
 8004c64:	200000a8 	.word	0x200000a8
 8004c68:	200000ac 	.word	0x200000ac

08004c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004c70:	b084      	sub	sp, #16
 8004c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	607b      	str	r3, [r7, #4]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c84:	4b67      	ldr	r3, [pc, #412]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d00d      	beq.n	8004cac <HAL_RCC_GetSysClockFreq+0x40>
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	f200 80bd 	bhi.w	8004e10 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d003      	beq.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c9e:	e0b7      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ca0:	4b61      	ldr	r3, [pc, #388]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ca2:	60bb      	str	r3, [r7, #8]
       break;
 8004ca4:	e0b7      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ca6:	4b61      	ldr	r3, [pc, #388]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004ca8:	60bb      	str	r3, [r7, #8]
      break;
 8004caa:	e0b4      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cac:	4b5d      	ldr	r3, [pc, #372]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cb6:	4b5b      	ldr	r3, [pc, #364]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d04d      	beq.n	8004d5e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc2:	4b58      	ldr	r3, [pc, #352]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	099b      	lsrs	r3, r3, #6
 8004cc8:	461a      	mov	r2, r3
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004cd2:	f04f 0100 	mov.w	r1, #0
 8004cd6:	ea02 0800 	and.w	r8, r2, r0
 8004cda:	ea03 0901 	and.w	r9, r3, r1
 8004cde:	4640      	mov	r0, r8
 8004ce0:	4649      	mov	r1, r9
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	014b      	lsls	r3, r1, #5
 8004cec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004cf0:	0142      	lsls	r2, r0, #5
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	ebb0 0008 	subs.w	r0, r0, r8
 8004cfa:	eb61 0109 	sbc.w	r1, r1, r9
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	018b      	lsls	r3, r1, #6
 8004d08:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d0c:	0182      	lsls	r2, r0, #6
 8004d0e:	1a12      	subs	r2, r2, r0
 8004d10:	eb63 0301 	sbc.w	r3, r3, r1
 8004d14:	f04f 0000 	mov.w	r0, #0
 8004d18:	f04f 0100 	mov.w	r1, #0
 8004d1c:	00d9      	lsls	r1, r3, #3
 8004d1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d22:	00d0      	lsls	r0, r2, #3
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	eb12 0208 	adds.w	r2, r2, r8
 8004d2c:	eb43 0309 	adc.w	r3, r3, r9
 8004d30:	f04f 0000 	mov.w	r0, #0
 8004d34:	f04f 0100 	mov.w	r1, #0
 8004d38:	0259      	lsls	r1, r3, #9
 8004d3a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004d3e:	0250      	lsls	r0, r2, #9
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	f7fb fee0 	bl	8000b14 <__aeabi_uldivmod>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4613      	mov	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e04a      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5e:	4b31      	ldr	r3, [pc, #196]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	099b      	lsrs	r3, r3, #6
 8004d64:	461a      	mov	r2, r3
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d6e:	f04f 0100 	mov.w	r1, #0
 8004d72:	ea02 0400 	and.w	r4, r2, r0
 8004d76:	ea03 0501 	and.w	r5, r3, r1
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	014b      	lsls	r3, r1, #5
 8004d88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d8c:	0142      	lsls	r2, r0, #5
 8004d8e:	4610      	mov	r0, r2
 8004d90:	4619      	mov	r1, r3
 8004d92:	1b00      	subs	r0, r0, r4
 8004d94:	eb61 0105 	sbc.w	r1, r1, r5
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	018b      	lsls	r3, r1, #6
 8004da2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004da6:	0182      	lsls	r2, r0, #6
 8004da8:	1a12      	subs	r2, r2, r0
 8004daa:	eb63 0301 	sbc.w	r3, r3, r1
 8004dae:	f04f 0000 	mov.w	r0, #0
 8004db2:	f04f 0100 	mov.w	r1, #0
 8004db6:	00d9      	lsls	r1, r3, #3
 8004db8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dbc:	00d0      	lsls	r0, r2, #3
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	1912      	adds	r2, r2, r4
 8004dc4:	eb45 0303 	adc.w	r3, r5, r3
 8004dc8:	f04f 0000 	mov.w	r0, #0
 8004dcc:	f04f 0100 	mov.w	r1, #0
 8004dd0:	0299      	lsls	r1, r3, #10
 8004dd2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004dd6:	0290      	lsls	r0, r2, #10
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4610      	mov	r0, r2
 8004dde:	4619      	mov	r1, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	461a      	mov	r2, r3
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	f7fb fe94 	bl	8000b14 <__aeabi_uldivmod>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4613      	mov	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	0c1b      	lsrs	r3, r3, #16
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	3301      	adds	r3, #1
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0c:	60bb      	str	r3, [r7, #8]
      break;
 8004e0e:	e002      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e10:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e12:	60bb      	str	r3, [r7, #8]
      break;
 8004e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e16:	68bb      	ldr	r3, [r7, #8]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e22:	bf00      	nop
 8004e24:	40023800 	.word	0x40023800
 8004e28:	00f42400 	.word	0x00f42400
 8004e2c:	007a1200 	.word	0x007a1200

08004e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e34:	4b03      	ldr	r3, [pc, #12]	; (8004e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e36:	681b      	ldr	r3, [r3, #0]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	200000a8 	.word	0x200000a8

08004e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e4c:	f7ff fff0 	bl	8004e30 <HAL_RCC_GetHCLKFreq>
 8004e50:	4602      	mov	r2, r0
 8004e52:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	0a9b      	lsrs	r3, r3, #10
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	4903      	ldr	r1, [pc, #12]	; (8004e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e5e:	5ccb      	ldrb	r3, [r1, r3]
 8004e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	08006fa8 	.word	0x08006fa8

08004e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e74:	f7ff ffdc 	bl	8004e30 <HAL_RCC_GetHCLKFreq>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	0b5b      	lsrs	r3, r3, #13
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	4903      	ldr	r1, [pc, #12]	; (8004e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e86:	5ccb      	ldrb	r3, [r1, r3]
 8004e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40023800 	.word	0x40023800
 8004e94:	08006fa8 	.word	0x08006fa8

08004e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e01d      	b.n	8004ee6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fd fe9e 	bl	8002c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	f000 fc32 	bl	8005740 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b085      	sub	sp, #20
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2b06      	cmp	r3, #6
 8004f0e:	d007      	beq.n	8004f20 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b085      	sub	sp, #20
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0201 	orr.w	r2, r2, #1
 8004f4c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b06      	cmp	r3, #6
 8004f5e:	d007      	beq.n	8004f70 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b082      	sub	sp, #8
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e01d      	b.n	8004fcc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d106      	bne.n	8004faa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7fd fe09 	bl	8002bbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2202      	movs	r2, #2
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	f000 fbbf 	bl	8005740 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	6839      	ldr	r1, [r7, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fe50 	bl	8005c8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a10      	ldr	r2, [pc, #64]	; (8005034 <HAL_TIM_PWM_Start+0x60>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d107      	bne.n	8005006 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005004:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b06      	cmp	r3, #6
 8005016:	d007      	beq.n	8005028 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40010000 	.word	0x40010000

08005038 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e083      	b.n	8005154 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d106      	bne.n	8005066 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7fd fd63 	bl	8002b2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2202      	movs	r2, #2
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800507c:	f023 0307 	bic.w	r3, r3, #7
 8005080:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3304      	adds	r3, #4
 800508a:	4619      	mov	r1, r3
 800508c:	4610      	mov	r0, r2
 800508e:	f000 fb57 	bl	8005740 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ba:	f023 0303 	bic.w	r3, r3, #3
 80050be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	021b      	lsls	r3, r3, #8
 80050ca:	4313      	orrs	r3, r2
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80050d8:	f023 030c 	bic.w	r3, r3, #12
 80050dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	4313      	orrs	r3, r2
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	011a      	lsls	r2, r3, #4
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	031b      	lsls	r3, r3, #12
 8005108:	4313      	orrs	r3, r2
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005116:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800511e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	4313      	orrs	r3, r2
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <HAL_TIM_Encoder_Start+0x18>
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b04      	cmp	r3, #4
 8005170:	d008      	beq.n	8005184 <HAL_TIM_Encoder_Start+0x28>
 8005172:	e00f      	b.n	8005194 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2201      	movs	r2, #1
 800517a:	2100      	movs	r1, #0
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fd85 	bl	8005c8c <TIM_CCxChannelCmd>
      break;
 8005182:	e016      	b.n	80051b2 <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2201      	movs	r2, #1
 800518a:	2104      	movs	r1, #4
 800518c:	4618      	mov	r0, r3
 800518e:	f000 fd7d 	bl	8005c8c <TIM_CCxChannelCmd>
      break;
 8005192:	e00e      	b.n	80051b2 <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2201      	movs	r2, #1
 800519a:	2100      	movs	r1, #0
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fd75 	bl	8005c8c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2201      	movs	r2, #1
 80051a8:	2104      	movs	r1, #4
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 fd6e 	bl	8005c8c <TIM_CCxChannelCmd>
      break;
 80051b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0201 	orr.w	r2, r2, #1
 80051c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d122      	bne.n	8005228 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d11b      	bne.n	8005228 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f06f 0202 	mvn.w	r2, #2
 80051f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fa78 	bl	8005704 <HAL_TIM_IC_CaptureCallback>
 8005214:	e005      	b.n	8005222 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fa6a 	bl	80056f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fa7b 	bl	8005718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b04      	cmp	r3, #4
 8005234:	d122      	bne.n	800527c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b04      	cmp	r3, #4
 8005242:	d11b      	bne.n	800527c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0204 	mvn.w	r2, #4
 800524c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2202      	movs	r2, #2
 8005252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fa4e 	bl	8005704 <HAL_TIM_IC_CaptureCallback>
 8005268:	e005      	b.n	8005276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fa40 	bl	80056f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fa51 	bl	8005718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b08      	cmp	r3, #8
 8005288:	d122      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b08      	cmp	r3, #8
 8005296:	d11b      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0208 	mvn.w	r2, #8
 80052a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2204      	movs	r2, #4
 80052a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fa24 	bl	8005704 <HAL_TIM_IC_CaptureCallback>
 80052bc:	e005      	b.n	80052ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fa16 	bl	80056f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fa27 	bl	8005718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0310 	and.w	r3, r3, #16
 80052da:	2b10      	cmp	r3, #16
 80052dc:	d122      	bne.n	8005324 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b10      	cmp	r3, #16
 80052ea:	d11b      	bne.n	8005324 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0210 	mvn.w	r2, #16
 80052f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2208      	movs	r2, #8
 80052fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f9fa 	bl	8005704 <HAL_TIM_IC_CaptureCallback>
 8005310:	e005      	b.n	800531e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f9ec 	bl	80056f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f9fd 	bl	8005718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b01      	cmp	r3, #1
 8005330:	d10e      	bne.n	8005350 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b01      	cmp	r3, #1
 800533e:	d107      	bne.n	8005350 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f06f 0201 	mvn.w	r2, #1
 8005348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7fc fdb8 	bl	8001ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535a:	2b80      	cmp	r3, #128	; 0x80
 800535c:	d10e      	bne.n	800537c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005368:	2b80      	cmp	r3, #128	; 0x80
 800536a:	d107      	bne.n	800537c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fd26 	bl	8005dc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005386:	2b40      	cmp	r3, #64	; 0x40
 8005388:	d10e      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005394:	2b40      	cmp	r3, #64	; 0x40
 8005396:	d107      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f9c2 	bl	800572c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0320 	and.w	r3, r3, #32
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	d10e      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	d107      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0220 	mvn.w	r2, #32
 80053cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fcf0 	bl	8005db4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053d4:	bf00      	nop
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80053f2:	2302      	movs	r3, #2
 80053f4:	e0b4      	b.n	8005560 <HAL_TIM_PWM_ConfigChannel+0x184>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2202      	movs	r2, #2
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b0c      	cmp	r3, #12
 800540a:	f200 809f 	bhi.w	800554c <HAL_TIM_PWM_ConfigChannel+0x170>
 800540e:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	08005449 	.word	0x08005449
 8005418:	0800554d 	.word	0x0800554d
 800541c:	0800554d 	.word	0x0800554d
 8005420:	0800554d 	.word	0x0800554d
 8005424:	08005489 	.word	0x08005489
 8005428:	0800554d 	.word	0x0800554d
 800542c:	0800554d 	.word	0x0800554d
 8005430:	0800554d 	.word	0x0800554d
 8005434:	080054cb 	.word	0x080054cb
 8005438:	0800554d 	.word	0x0800554d
 800543c:	0800554d 	.word	0x0800554d
 8005440:	0800554d 	.word	0x0800554d
 8005444:	0800550b 	.word	0x0800550b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	4618      	mov	r0, r3
 8005450:	f000 f9f6 	bl	8005840 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0208 	orr.w	r2, r2, #8
 8005462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0204 	bic.w	r2, r2, #4
 8005472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6999      	ldr	r1, [r3, #24]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	619a      	str	r2, [r3, #24]
      break;
 8005486:	e062      	b.n	800554e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fa3c 	bl	800590c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6999      	ldr	r1, [r3, #24]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	021a      	lsls	r2, r3, #8
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	619a      	str	r2, [r3, #24]
      break;
 80054c8:	e041      	b.n	800554e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fa87 	bl	80059e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0208 	orr.w	r2, r2, #8
 80054e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69da      	ldr	r2, [r3, #28]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0204 	bic.w	r2, r2, #4
 80054f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69d9      	ldr	r1, [r3, #28]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	61da      	str	r2, [r3, #28]
      break;
 8005508:	e021      	b.n	800554e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68b9      	ldr	r1, [r7, #8]
 8005510:	4618      	mov	r0, r3
 8005512:	f000 fad1 	bl	8005ab8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69da      	ldr	r2, [r3, #28]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69d9      	ldr	r1, [r3, #28]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	021a      	lsls	r2, r3, #8
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	61da      	str	r2, [r3, #28]
      break;
 800554a:	e000      	b.n	800554e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800554c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_TIM_ConfigClockSource+0x18>
 800557c:	2302      	movs	r3, #2
 800557e:	e0b3      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x180>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800559e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b8:	d03e      	beq.n	8005638 <HAL_TIM_ConfigClockSource+0xd0>
 80055ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055be:	f200 8087 	bhi.w	80056d0 <HAL_TIM_ConfigClockSource+0x168>
 80055c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c6:	f000 8085 	beq.w	80056d4 <HAL_TIM_ConfigClockSource+0x16c>
 80055ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ce:	d87f      	bhi.n	80056d0 <HAL_TIM_ConfigClockSource+0x168>
 80055d0:	2b70      	cmp	r3, #112	; 0x70
 80055d2:	d01a      	beq.n	800560a <HAL_TIM_ConfigClockSource+0xa2>
 80055d4:	2b70      	cmp	r3, #112	; 0x70
 80055d6:	d87b      	bhi.n	80056d0 <HAL_TIM_ConfigClockSource+0x168>
 80055d8:	2b60      	cmp	r3, #96	; 0x60
 80055da:	d050      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x116>
 80055dc:	2b60      	cmp	r3, #96	; 0x60
 80055de:	d877      	bhi.n	80056d0 <HAL_TIM_ConfigClockSource+0x168>
 80055e0:	2b50      	cmp	r3, #80	; 0x50
 80055e2:	d03c      	beq.n	800565e <HAL_TIM_ConfigClockSource+0xf6>
 80055e4:	2b50      	cmp	r3, #80	; 0x50
 80055e6:	d873      	bhi.n	80056d0 <HAL_TIM_ConfigClockSource+0x168>
 80055e8:	2b40      	cmp	r3, #64	; 0x40
 80055ea:	d058      	beq.n	800569e <HAL_TIM_ConfigClockSource+0x136>
 80055ec:	2b40      	cmp	r3, #64	; 0x40
 80055ee:	d86f      	bhi.n	80056d0 <HAL_TIM_ConfigClockSource+0x168>
 80055f0:	2b30      	cmp	r3, #48	; 0x30
 80055f2:	d064      	beq.n	80056be <HAL_TIM_ConfigClockSource+0x156>
 80055f4:	2b30      	cmp	r3, #48	; 0x30
 80055f6:	d86b      	bhi.n	80056d0 <HAL_TIM_ConfigClockSource+0x168>
 80055f8:	2b20      	cmp	r3, #32
 80055fa:	d060      	beq.n	80056be <HAL_TIM_ConfigClockSource+0x156>
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d867      	bhi.n	80056d0 <HAL_TIM_ConfigClockSource+0x168>
 8005600:	2b00      	cmp	r3, #0
 8005602:	d05c      	beq.n	80056be <HAL_TIM_ConfigClockSource+0x156>
 8005604:	2b10      	cmp	r3, #16
 8005606:	d05a      	beq.n	80056be <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005608:	e062      	b.n	80056d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6899      	ldr	r1, [r3, #8]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f000 fb17 	bl	8005c4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800562c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	609a      	str	r2, [r3, #8]
      break;
 8005636:	e04e      	b.n	80056d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	6899      	ldr	r1, [r3, #8]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f000 fb00 	bl	8005c4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800565a:	609a      	str	r2, [r3, #8]
      break;
 800565c:	e03b      	b.n	80056d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6818      	ldr	r0, [r3, #0]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6859      	ldr	r1, [r3, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	461a      	mov	r2, r3
 800566c:	f000 fa74 	bl	8005b58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2150      	movs	r1, #80	; 0x50
 8005676:	4618      	mov	r0, r3
 8005678:	f000 facd 	bl	8005c16 <TIM_ITRx_SetConfig>
      break;
 800567c:	e02b      	b.n	80056d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6818      	ldr	r0, [r3, #0]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6859      	ldr	r1, [r3, #4]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	461a      	mov	r2, r3
 800568c:	f000 fa93 	bl	8005bb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2160      	movs	r1, #96	; 0x60
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fabd 	bl	8005c16 <TIM_ITRx_SetConfig>
      break;
 800569c:	e01b      	b.n	80056d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6859      	ldr	r1, [r3, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	461a      	mov	r2, r3
 80056ac:	f000 fa54 	bl	8005b58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2140      	movs	r1, #64	; 0x40
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 faad 	bl	8005c16 <TIM_ITRx_SetConfig>
      break;
 80056bc:	e00b      	b.n	80056d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4619      	mov	r1, r3
 80056c8:	4610      	mov	r0, r2
 80056ca:	f000 faa4 	bl	8005c16 <TIM_ITRx_SetConfig>
      break;
 80056ce:	e002      	b.n	80056d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056d0:	bf00      	nop
 80056d2:	e000      	b.n	80056d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a34      	ldr	r2, [pc, #208]	; (8005824 <TIM_Base_SetConfig+0xe4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00f      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575e:	d00b      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a31      	ldr	r2, [pc, #196]	; (8005828 <TIM_Base_SetConfig+0xe8>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d007      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a30      	ldr	r2, [pc, #192]	; (800582c <TIM_Base_SetConfig+0xec>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a2f      	ldr	r2, [pc, #188]	; (8005830 <TIM_Base_SetConfig+0xf0>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d108      	bne.n	800578a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a25      	ldr	r2, [pc, #148]	; (8005824 <TIM_Base_SetConfig+0xe4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d01b      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005798:	d017      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a22      	ldr	r2, [pc, #136]	; (8005828 <TIM_Base_SetConfig+0xe8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d013      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a21      	ldr	r2, [pc, #132]	; (800582c <TIM_Base_SetConfig+0xec>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d00f      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a20      	ldr	r2, [pc, #128]	; (8005830 <TIM_Base_SetConfig+0xf0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00b      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a1f      	ldr	r2, [pc, #124]	; (8005834 <TIM_Base_SetConfig+0xf4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d007      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a1e      	ldr	r2, [pc, #120]	; (8005838 <TIM_Base_SetConfig+0xf8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d003      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a1d      	ldr	r2, [pc, #116]	; (800583c <TIM_Base_SetConfig+0xfc>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d108      	bne.n	80057dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a08      	ldr	r2, [pc, #32]	; (8005824 <TIM_Base_SetConfig+0xe4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d103      	bne.n	8005810 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	615a      	str	r2, [r3, #20]
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40010000 	.word	0x40010000
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800
 8005830:	40000c00 	.word	0x40000c00
 8005834:	40014000 	.word	0x40014000
 8005838:	40014400 	.word	0x40014400
 800583c:	40014800 	.word	0x40014800

08005840 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	f023 0201 	bic.w	r2, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 0303 	bic.w	r3, r3, #3
 8005876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f023 0302 	bic.w	r3, r3, #2
 8005888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a1c      	ldr	r2, [pc, #112]	; (8005908 <TIM_OC1_SetConfig+0xc8>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d10c      	bne.n	80058b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f023 0308 	bic.w	r3, r3, #8
 80058a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f023 0304 	bic.w	r3, r3, #4
 80058b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a13      	ldr	r2, [pc, #76]	; (8005908 <TIM_OC1_SetConfig+0xc8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d111      	bne.n	80058e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	621a      	str	r2, [r3, #32]
}
 80058fc:	bf00      	nop
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	40010000 	.word	0x40010000

0800590c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	f023 0210 	bic.w	r2, r3, #16
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	021b      	lsls	r3, r3, #8
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f023 0320 	bic.w	r3, r3, #32
 8005956:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	011b      	lsls	r3, r3, #4
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a1e      	ldr	r2, [pc, #120]	; (80059e0 <TIM_OC2_SetConfig+0xd4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d10d      	bne.n	8005988 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	4313      	orrs	r3, r2
 800597e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005986:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <TIM_OC2_SetConfig+0xd4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d113      	bne.n	80059b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005996:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800599e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	621a      	str	r2, [r3, #32]
}
 80059d2:	bf00      	nop
 80059d4:	371c      	adds	r7, #28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	40010000 	.word	0x40010000

080059e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	021b      	lsls	r3, r3, #8
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a1d      	ldr	r2, [pc, #116]	; (8005ab4 <TIM_OC3_SetConfig+0xd0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d10d      	bne.n	8005a5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	021b      	lsls	r3, r3, #8
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a14      	ldr	r2, [pc, #80]	; (8005ab4 <TIM_OC3_SetConfig+0xd0>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d113      	bne.n	8005a8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	011b      	lsls	r3, r3, #4
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	621a      	str	r2, [r3, #32]
}
 8005aa8:	bf00      	nop
 8005aaa:	371c      	adds	r7, #28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	40010000 	.word	0x40010000

08005ab8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	031b      	lsls	r3, r3, #12
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a10      	ldr	r2, [pc, #64]	; (8005b54 <TIM_OC4_SetConfig+0x9c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d109      	bne.n	8005b2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	019b      	lsls	r3, r3, #6
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40010000 	.word	0x40010000

08005b58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	f023 0201 	bic.w	r2, r3, #1
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f023 030a 	bic.w	r3, r3, #10
 8005b94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	621a      	str	r2, [r3, #32]
}
 8005baa:	bf00      	nop
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b087      	sub	sp, #28
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f023 0210 	bic.w	r2, r3, #16
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005be0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	031b      	lsls	r3, r3, #12
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	621a      	str	r2, [r3, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b085      	sub	sp, #20
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f043 0307 	orr.w	r3, r3, #7
 8005c38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	609a      	str	r2, [r3, #8]
}
 8005c40:	bf00      	nop
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	021a      	lsls	r2, r3, #8
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	609a      	str	r2, [r3, #8]
}
 8005c80:	bf00      	nop
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 031f 	and.w	r3, r3, #31
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1a      	ldr	r2, [r3, #32]
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	43db      	mvns	r3, r3
 8005cae:	401a      	ands	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a1a      	ldr	r2, [r3, #32]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f003 031f 	and.w	r3, r3, #31
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	621a      	str	r2, [r3, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d101      	bne.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cec:	2302      	movs	r3, #2
 8005cee:	e050      	b.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a1c      	ldr	r2, [pc, #112]	; (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d018      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3c:	d013      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a18      	ldr	r2, [pc, #96]	; (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00e      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a16      	ldr	r2, [pc, #88]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d009      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a15      	ldr	r2, [pc, #84]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d004      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a13      	ldr	r2, [pc, #76]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d10c      	bne.n	8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40010000 	.word	0x40010000
 8005da4:	40000400 	.word	0x40000400
 8005da8:	40000800 	.word	0x40000800
 8005dac:	40000c00 	.word	0x40000c00
 8005db0:	40014000 	.word	0x40014000

08005db4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e03f      	b.n	8005e6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7fc ff5e 	bl	8002cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2224      	movs	r2, #36	; 0x24
 8005e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fc41 	bl	80066a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	695a      	ldr	r2, [r3, #20]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
	...

08005e78 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	4613      	mov	r3, r2
 8005e84:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	d153      	bne.n	8005f3a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <HAL_UART_Transmit_DMA+0x26>
 8005e98:	88fb      	ldrh	r3, [r7, #6]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e04c      	b.n	8005f3c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d101      	bne.n	8005eb0 <HAL_UART_Transmit_DMA+0x38>
 8005eac:	2302      	movs	r3, #2
 8005eae:	e045      	b.n	8005f3c <HAL_UART_Transmit_DMA+0xc4>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	88fa      	ldrh	r2, [r7, #6]
 8005ec2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	88fa      	ldrh	r2, [r7, #6]
 8005ec8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2221      	movs	r2, #33	; 0x21
 8005ed4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005edc:	4a19      	ldr	r2, [pc, #100]	; (8005f44 <HAL_UART_Transmit_DMA+0xcc>)
 8005ede:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee4:	4a18      	ldr	r2, [pc, #96]	; (8005f48 <HAL_UART_Transmit_DMA+0xd0>)
 8005ee6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eec:	4a17      	ldr	r2, [pc, #92]	; (8005f4c <HAL_UART_Transmit_DMA+0xd4>)
 8005eee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005ef8:	f107 0308 	add.w	r3, r7, #8
 8005efc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	6819      	ldr	r1, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	88fb      	ldrh	r3, [r7, #6]
 8005f10:	f7fd fa88 	bl	8003424 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f1c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	695a      	ldr	r2, [r3, #20]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f34:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	e000      	b.n	8005f3c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005f3a:	2302      	movs	r3, #2
  }
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3718      	adds	r7, #24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	080062b5 	.word	0x080062b5
 8005f48:	08006307 	.word	0x08006307
 8005f4c:	080063a7 	.word	0x080063a7

08005f50 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b20      	cmp	r3, #32
 8005f68:	d166      	bne.n	8006038 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <HAL_UART_Receive_DMA+0x26>
 8005f70:	88fb      	ldrh	r3, [r7, #6]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e05f      	b.n	800603a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_UART_Receive_DMA+0x38>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e058      	b.n	800603a <HAL_UART_Receive_DMA+0xea>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	88fa      	ldrh	r2, [r7, #6]
 8005f9a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2222      	movs	r2, #34	; 0x22
 8005fa6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fae:	4a25      	ldr	r2, [pc, #148]	; (8006044 <HAL_UART_Receive_DMA+0xf4>)
 8005fb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb6:	4a24      	ldr	r2, [pc, #144]	; (8006048 <HAL_UART_Receive_DMA+0xf8>)
 8005fb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbe:	4a23      	ldr	r2, [pc, #140]	; (800604c <HAL_UART_Receive_DMA+0xfc>)
 8005fc0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005fca:	f107 0308 	add.w	r3, r7, #8
 8005fce:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	4619      	mov	r1, r3
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	88fb      	ldrh	r3, [r7, #6]
 8005fe2:	f7fd fa1f 	bl	8003424 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006012:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695a      	ldr	r2, [r3, #20]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0201 	orr.w	r2, r2, #1
 8006022:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695a      	ldr	r2, [r3, #20]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006032:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	e000      	b.n	800603a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006038:	2302      	movs	r3, #2
  }
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	08006323 	.word	0x08006323
 8006048:	0800638b 	.word	0x0800638b
 800604c:	080063a7 	.word	0x080063a7

08006050 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006070:	2300      	movs	r3, #0
 8006072:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006074:	2300      	movs	r3, #0
 8006076:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10d      	bne.n	80060a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b00      	cmp	r3, #0
 800608e:	d008      	beq.n	80060a2 <HAL_UART_IRQHandler+0x52>
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fa83 	bl	80065a6 <UART_Receive_IT>
      return;
 80060a0:	e0d0      	b.n	8006244 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 80b0 	beq.w	800620a <HAL_UART_IRQHandler+0x1ba>
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d105      	bne.n	80060c0 <HAL_UART_IRQHandler+0x70>
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 80a5 	beq.w	800620a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <HAL_UART_IRQHandler+0x90>
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d8:	f043 0201 	orr.w	r2, r3, #1
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	f003 0304 	and.w	r3, r3, #4
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <HAL_UART_IRQHandler+0xb0>
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d005      	beq.n	8006100 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f8:	f043 0202 	orr.w	r2, r3, #2
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00a      	beq.n	8006120 <HAL_UART_IRQHandler+0xd0>
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d005      	beq.n	8006120 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006118:	f043 0204 	orr.w	r2, r3, #4
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00f      	beq.n	800614a <HAL_UART_IRQHandler+0xfa>
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	f003 0320 	and.w	r3, r3, #32
 8006130:	2b00      	cmp	r3, #0
 8006132:	d104      	bne.n	800613e <HAL_UART_IRQHandler+0xee>
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d005      	beq.n	800614a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006142:	f043 0208 	orr.w	r2, r3, #8
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614e:	2b00      	cmp	r3, #0
 8006150:	d077      	beq.n	8006242 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	f003 0320 	and.w	r3, r3, #32
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <HAL_UART_IRQHandler+0x11c>
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	f003 0320 	and.w	r3, r3, #32
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fa1d 	bl	80065a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006176:	2b40      	cmp	r3, #64	; 0x40
 8006178:	bf0c      	ite	eq
 800617a:	2301      	moveq	r3, #1
 800617c:	2300      	movne	r3, #0
 800617e:	b2db      	uxtb	r3, r3
 8006180:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006186:	f003 0308 	and.w	r3, r3, #8
 800618a:	2b00      	cmp	r3, #0
 800618c:	d102      	bne.n	8006194 <HAL_UART_IRQHandler+0x144>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d031      	beq.n	80061f8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f966 	bl	8006466 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a4:	2b40      	cmp	r3, #64	; 0x40
 80061a6:	d123      	bne.n	80061f0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695a      	ldr	r2, [r3, #20]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061b6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d013      	beq.n	80061e8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c4:	4a21      	ldr	r2, [pc, #132]	; (800624c <HAL_UART_IRQHandler+0x1fc>)
 80061c6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fd f981 	bl	80034d4 <HAL_DMA_Abort_IT>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d016      	beq.n	8006206 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061e2:	4610      	mov	r0, r2
 80061e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e6:	e00e      	b.n	8006206 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f859 	bl	80062a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ee:	e00a      	b.n	8006206 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f855 	bl	80062a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f6:	e006      	b.n	8006206 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f851 	bl	80062a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006204:	e01d      	b.n	8006242 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006206:	bf00      	nop
    return;
 8006208:	e01b      	b.n	8006242 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006210:	2b00      	cmp	r3, #0
 8006212:	d008      	beq.n	8006226 <HAL_UART_IRQHandler+0x1d6>
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f953 	bl	80064ca <UART_Transmit_IT>
    return;
 8006224:	e00e      	b.n	8006244 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	d009      	beq.n	8006244 <HAL_UART_IRQHandler+0x1f4>
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006236:	2b00      	cmp	r3, #0
 8006238:	d004      	beq.n	8006244 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f99b 	bl	8006576 <UART_EndTransmit_IT>
    return;
 8006240:	e000      	b.n	8006244 <HAL_UART_IRQHandler+0x1f4>
    return;
 8006242:	bf00      	nop
  }
}
 8006244:	3720      	adds	r7, #32
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	080064a3 	.word	0x080064a3

08006250 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d113      	bne.n	80062f8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695a      	ldr	r2, [r3, #20]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062e4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062f4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062f6:	e002      	b.n	80062fe <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff ffa9 	bl	8006250 <HAL_UART_TxCpltCallback>
}
 80062fe:	bf00      	nop
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f7ff ffa5 	bl	8006264 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800631a:	bf00      	nop
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800633a:	2b00      	cmp	r3, #0
 800633c:	d11e      	bne.n	800637c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006352:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695a      	ldr	r2, [r3, #20]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 0201 	bic.w	r2, r2, #1
 8006362:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695a      	ldr	r2, [r3, #20]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006372:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f7ff ff7b 	bl	8006278 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f7ff ff77 	bl	800628c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800639e:	bf00      	nop
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b084      	sub	sp, #16
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c2:	2b80      	cmp	r3, #128	; 0x80
 80063c4:	bf0c      	ite	eq
 80063c6:	2301      	moveq	r3, #1
 80063c8:	2300      	movne	r3, #0
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b21      	cmp	r3, #33	; 0x21
 80063d8:	d108      	bne.n	80063ec <UART_DMAError+0x46>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d005      	beq.n	80063ec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2200      	movs	r2, #0
 80063e4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80063e6:	68b8      	ldr	r0, [r7, #8]
 80063e8:	f000 f827 	bl	800643a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f6:	2b40      	cmp	r3, #64	; 0x40
 80063f8:	bf0c      	ite	eq
 80063fa:	2301      	moveq	r3, #1
 80063fc:	2300      	movne	r3, #0
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b22      	cmp	r3, #34	; 0x22
 800640c:	d108      	bne.n	8006420 <UART_DMAError+0x7a>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d005      	beq.n	8006420 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2200      	movs	r2, #0
 8006418:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800641a:	68b8      	ldr	r0, [r7, #8]
 800641c:	f000 f823 	bl	8006466 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006424:	f043 0210 	orr.w	r2, r3, #16
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800642c:	68b8      	ldr	r0, [r7, #8]
 800642e:	f7ff ff37 	bl	80062a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006432:	bf00      	nop
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006450:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2220      	movs	r2, #32
 8006456:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800647c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	695a      	ldr	r2, [r3, #20]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0201 	bic.w	r2, r2, #1
 800648c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7ff feef 	bl	80062a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064c2:	bf00      	nop
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b085      	sub	sp, #20
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b21      	cmp	r3, #33	; 0x21
 80064dc:	d144      	bne.n	8006568 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e6:	d11a      	bne.n	800651e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064fc:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d105      	bne.n	8006512 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	1c9a      	adds	r2, r3, #2
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	621a      	str	r2, [r3, #32]
 8006510:	e00e      	b.n	8006530 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	621a      	str	r2, [r3, #32]
 800651c:	e008      	b.n	8006530 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	1c59      	adds	r1, r3, #1
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6211      	str	r1, [r2, #32]
 8006528:	781a      	ldrb	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006534:	b29b      	uxth	r3, r3
 8006536:	3b01      	subs	r3, #1
 8006538:	b29b      	uxth	r3, r3
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	4619      	mov	r1, r3
 800653e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10f      	bne.n	8006564 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006552:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006562:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006564:	2300      	movs	r3, #0
 8006566:	e000      	b.n	800656a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006568:	2302      	movs	r3, #2
  }
}
 800656a:	4618      	mov	r0, r3
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b082      	sub	sp, #8
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800658c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2220      	movs	r2, #32
 8006592:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7ff fe5a 	bl	8006250 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b22      	cmp	r3, #34	; 0x22
 80065b8:	d171      	bne.n	800669e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c2:	d123      	bne.n	800660c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10e      	bne.n	80065f0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e8:	1c9a      	adds	r2, r3, #2
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	629a      	str	r2, [r3, #40]	; 0x28
 80065ee:	e029      	b.n	8006644 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	629a      	str	r2, [r3, #40]	; 0x28
 800660a:	e01b      	b.n	8006644 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10a      	bne.n	800662a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6858      	ldr	r0, [r3, #4]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661e:	1c59      	adds	r1, r3, #1
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	6291      	str	r1, [r2, #40]	; 0x28
 8006624:	b2c2      	uxtb	r2, r0
 8006626:	701a      	strb	r2, [r3, #0]
 8006628:	e00c      	b.n	8006644 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	b2da      	uxtb	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006636:	1c58      	adds	r0, r3, #1
 8006638:	6879      	ldr	r1, [r7, #4]
 800663a:	6288      	str	r0, [r1, #40]	; 0x28
 800663c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006648:	b29b      	uxth	r3, r3
 800664a:	3b01      	subs	r3, #1
 800664c:	b29b      	uxth	r3, r3
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	4619      	mov	r1, r3
 8006652:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006654:	2b00      	cmp	r3, #0
 8006656:	d120      	bne.n	800669a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 0220 	bic.w	r2, r2, #32
 8006666:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006676:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695a      	ldr	r2, [r3, #20]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f022 0201 	bic.w	r2, r2, #1
 8006686:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7ff fdf1 	bl	8006278 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	e002      	b.n	80066a0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	e000      	b.n	80066a0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800669e:	2302      	movs	r3, #2
  }
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ac:	b0bd      	sub	sp, #244	; 0xf4
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c4:	68d9      	ldr	r1, [r3, #12]
 80066c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	ea40 0301 	orr.w	r3, r0, r1
 80066d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	431a      	orrs	r2, r3
 80066e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	431a      	orrs	r2, r3
 80066e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80066f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006700:	f021 010c 	bic.w	r1, r1, #12
 8006704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800670e:	430b      	orrs	r3, r1
 8006710:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800671e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006722:	6999      	ldr	r1, [r3, #24]
 8006724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	ea40 0301 	orr.w	r3, r0, r1
 800672e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800673a:	f040 81a5 	bne.w	8006a88 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800673e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	4bcd      	ldr	r3, [pc, #820]	; (8006a7c <UART_SetConfig+0x3d4>)
 8006746:	429a      	cmp	r2, r3
 8006748:	d006      	beq.n	8006758 <UART_SetConfig+0xb0>
 800674a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	4bcb      	ldr	r3, [pc, #812]	; (8006a80 <UART_SetConfig+0x3d8>)
 8006752:	429a      	cmp	r2, r3
 8006754:	f040 80cb 	bne.w	80068ee <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006758:	f7fe fb8a 	bl	8004e70 <HAL_RCC_GetPCLK2Freq>
 800675c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006760:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006764:	461c      	mov	r4, r3
 8006766:	f04f 0500 	mov.w	r5, #0
 800676a:	4622      	mov	r2, r4
 800676c:	462b      	mov	r3, r5
 800676e:	1891      	adds	r1, r2, r2
 8006770:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8006774:	415b      	adcs	r3, r3
 8006776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800677a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800677e:	1912      	adds	r2, r2, r4
 8006780:	eb45 0303 	adc.w	r3, r5, r3
 8006784:	f04f 0000 	mov.w	r0, #0
 8006788:	f04f 0100 	mov.w	r1, #0
 800678c:	00d9      	lsls	r1, r3, #3
 800678e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006792:	00d0      	lsls	r0, r2, #3
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	1911      	adds	r1, r2, r4
 800679a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800679e:	416b      	adcs	r3, r5
 80067a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	461a      	mov	r2, r3
 80067ac:	f04f 0300 	mov.w	r3, #0
 80067b0:	1891      	adds	r1, r2, r2
 80067b2:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80067b6:	415b      	adcs	r3, r3
 80067b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067bc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80067c0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80067c4:	f7fa f9a6 	bl	8000b14 <__aeabi_uldivmod>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4bad      	ldr	r3, [pc, #692]	; (8006a84 <UART_SetConfig+0x3dc>)
 80067ce:	fba3 2302 	umull	r2, r3, r3, r2
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	011e      	lsls	r6, r3, #4
 80067d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067da:	461c      	mov	r4, r3
 80067dc:	f04f 0500 	mov.w	r5, #0
 80067e0:	4622      	mov	r2, r4
 80067e2:	462b      	mov	r3, r5
 80067e4:	1891      	adds	r1, r2, r2
 80067e6:	67b9      	str	r1, [r7, #120]	; 0x78
 80067e8:	415b      	adcs	r3, r3
 80067ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067ec:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80067f0:	1912      	adds	r2, r2, r4
 80067f2:	eb45 0303 	adc.w	r3, r5, r3
 80067f6:	f04f 0000 	mov.w	r0, #0
 80067fa:	f04f 0100 	mov.w	r1, #0
 80067fe:	00d9      	lsls	r1, r3, #3
 8006800:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006804:	00d0      	lsls	r0, r2, #3
 8006806:	4602      	mov	r2, r0
 8006808:	460b      	mov	r3, r1
 800680a:	1911      	adds	r1, r2, r4
 800680c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006810:	416b      	adcs	r3, r5
 8006812:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	461a      	mov	r2, r3
 800681e:	f04f 0300 	mov.w	r3, #0
 8006822:	1891      	adds	r1, r2, r2
 8006824:	6739      	str	r1, [r7, #112]	; 0x70
 8006826:	415b      	adcs	r3, r3
 8006828:	677b      	str	r3, [r7, #116]	; 0x74
 800682a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800682e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8006832:	f7fa f96f 	bl	8000b14 <__aeabi_uldivmod>
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	4b92      	ldr	r3, [pc, #584]	; (8006a84 <UART_SetConfig+0x3dc>)
 800683c:	fba3 1302 	umull	r1, r3, r3, r2
 8006840:	095b      	lsrs	r3, r3, #5
 8006842:	2164      	movs	r1, #100	; 0x64
 8006844:	fb01 f303 	mul.w	r3, r1, r3
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	3332      	adds	r3, #50	; 0x32
 800684e:	4a8d      	ldr	r2, [pc, #564]	; (8006a84 <UART_SetConfig+0x3dc>)
 8006850:	fba2 2303 	umull	r2, r3, r2, r3
 8006854:	095b      	lsrs	r3, r3, #5
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800685c:	441e      	add	r6, r3
 800685e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006862:	4618      	mov	r0, r3
 8006864:	f04f 0100 	mov.w	r1, #0
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	1894      	adds	r4, r2, r2
 800686e:	66bc      	str	r4, [r7, #104]	; 0x68
 8006870:	415b      	adcs	r3, r3
 8006872:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006874:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006878:	1812      	adds	r2, r2, r0
 800687a:	eb41 0303 	adc.w	r3, r1, r3
 800687e:	f04f 0400 	mov.w	r4, #0
 8006882:	f04f 0500 	mov.w	r5, #0
 8006886:	00dd      	lsls	r5, r3, #3
 8006888:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800688c:	00d4      	lsls	r4, r2, #3
 800688e:	4622      	mov	r2, r4
 8006890:	462b      	mov	r3, r5
 8006892:	1814      	adds	r4, r2, r0
 8006894:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8006898:	414b      	adcs	r3, r1
 800689a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800689e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	461a      	mov	r2, r3
 80068a6:	f04f 0300 	mov.w	r3, #0
 80068aa:	1891      	adds	r1, r2, r2
 80068ac:	6639      	str	r1, [r7, #96]	; 0x60
 80068ae:	415b      	adcs	r3, r3
 80068b0:	667b      	str	r3, [r7, #100]	; 0x64
 80068b2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80068b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80068ba:	f7fa f92b 	bl	8000b14 <__aeabi_uldivmod>
 80068be:	4602      	mov	r2, r0
 80068c0:	460b      	mov	r3, r1
 80068c2:	4b70      	ldr	r3, [pc, #448]	; (8006a84 <UART_SetConfig+0x3dc>)
 80068c4:	fba3 1302 	umull	r1, r3, r3, r2
 80068c8:	095b      	lsrs	r3, r3, #5
 80068ca:	2164      	movs	r1, #100	; 0x64
 80068cc:	fb01 f303 	mul.w	r3, r1, r3
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	3332      	adds	r3, #50	; 0x32
 80068d6:	4a6b      	ldr	r2, [pc, #428]	; (8006a84 <UART_SetConfig+0x3dc>)
 80068d8:	fba2 2303 	umull	r2, r3, r2, r3
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	f003 0207 	and.w	r2, r3, #7
 80068e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4432      	add	r2, r6
 80068ea:	609a      	str	r2, [r3, #8]
 80068ec:	e26d      	b.n	8006dca <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068ee:	f7fe faab 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 80068f2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068fa:	461c      	mov	r4, r3
 80068fc:	f04f 0500 	mov.w	r5, #0
 8006900:	4622      	mov	r2, r4
 8006902:	462b      	mov	r3, r5
 8006904:	1891      	adds	r1, r2, r2
 8006906:	65b9      	str	r1, [r7, #88]	; 0x58
 8006908:	415b      	adcs	r3, r3
 800690a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800690c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006910:	1912      	adds	r2, r2, r4
 8006912:	eb45 0303 	adc.w	r3, r5, r3
 8006916:	f04f 0000 	mov.w	r0, #0
 800691a:	f04f 0100 	mov.w	r1, #0
 800691e:	00d9      	lsls	r1, r3, #3
 8006920:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006924:	00d0      	lsls	r0, r2, #3
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	1911      	adds	r1, r2, r4
 800692c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8006930:	416b      	adcs	r3, r5
 8006932:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	461a      	mov	r2, r3
 800693e:	f04f 0300 	mov.w	r3, #0
 8006942:	1891      	adds	r1, r2, r2
 8006944:	6539      	str	r1, [r7, #80]	; 0x50
 8006946:	415b      	adcs	r3, r3
 8006948:	657b      	str	r3, [r7, #84]	; 0x54
 800694a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800694e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006952:	f7fa f8df 	bl	8000b14 <__aeabi_uldivmod>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4b4a      	ldr	r3, [pc, #296]	; (8006a84 <UART_SetConfig+0x3dc>)
 800695c:	fba3 2302 	umull	r2, r3, r3, r2
 8006960:	095b      	lsrs	r3, r3, #5
 8006962:	011e      	lsls	r6, r3, #4
 8006964:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006968:	461c      	mov	r4, r3
 800696a:	f04f 0500 	mov.w	r5, #0
 800696e:	4622      	mov	r2, r4
 8006970:	462b      	mov	r3, r5
 8006972:	1891      	adds	r1, r2, r2
 8006974:	64b9      	str	r1, [r7, #72]	; 0x48
 8006976:	415b      	adcs	r3, r3
 8006978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800697a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800697e:	1912      	adds	r2, r2, r4
 8006980:	eb45 0303 	adc.w	r3, r5, r3
 8006984:	f04f 0000 	mov.w	r0, #0
 8006988:	f04f 0100 	mov.w	r1, #0
 800698c:	00d9      	lsls	r1, r3, #3
 800698e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006992:	00d0      	lsls	r0, r2, #3
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	1911      	adds	r1, r2, r4
 800699a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800699e:	416b      	adcs	r3, r5
 80069a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80069a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	461a      	mov	r2, r3
 80069ac:	f04f 0300 	mov.w	r3, #0
 80069b0:	1891      	adds	r1, r2, r2
 80069b2:	6439      	str	r1, [r7, #64]	; 0x40
 80069b4:	415b      	adcs	r3, r3
 80069b6:	647b      	str	r3, [r7, #68]	; 0x44
 80069b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069bc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80069c0:	f7fa f8a8 	bl	8000b14 <__aeabi_uldivmod>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	4b2e      	ldr	r3, [pc, #184]	; (8006a84 <UART_SetConfig+0x3dc>)
 80069ca:	fba3 1302 	umull	r1, r3, r3, r2
 80069ce:	095b      	lsrs	r3, r3, #5
 80069d0:	2164      	movs	r1, #100	; 0x64
 80069d2:	fb01 f303 	mul.w	r3, r1, r3
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	3332      	adds	r3, #50	; 0x32
 80069dc:	4a29      	ldr	r2, [pc, #164]	; (8006a84 <UART_SetConfig+0x3dc>)
 80069de:	fba2 2303 	umull	r2, r3, r2, r3
 80069e2:	095b      	lsrs	r3, r3, #5
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069ea:	441e      	add	r6, r3
 80069ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069f0:	4618      	mov	r0, r3
 80069f2:	f04f 0100 	mov.w	r1, #0
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
 80069fa:	1894      	adds	r4, r2, r2
 80069fc:	63bc      	str	r4, [r7, #56]	; 0x38
 80069fe:	415b      	adcs	r3, r3
 8006a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a02:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a06:	1812      	adds	r2, r2, r0
 8006a08:	eb41 0303 	adc.w	r3, r1, r3
 8006a0c:	f04f 0400 	mov.w	r4, #0
 8006a10:	f04f 0500 	mov.w	r5, #0
 8006a14:	00dd      	lsls	r5, r3, #3
 8006a16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a1a:	00d4      	lsls	r4, r2, #3
 8006a1c:	4622      	mov	r2, r4
 8006a1e:	462b      	mov	r3, r5
 8006a20:	1814      	adds	r4, r2, r0
 8006a22:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8006a26:	414b      	adcs	r3, r1
 8006a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	461a      	mov	r2, r3
 8006a34:	f04f 0300 	mov.w	r3, #0
 8006a38:	1891      	adds	r1, r2, r2
 8006a3a:	6339      	str	r1, [r7, #48]	; 0x30
 8006a3c:	415b      	adcs	r3, r3
 8006a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006a44:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a48:	f7fa f864 	bl	8000b14 <__aeabi_uldivmod>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4b0c      	ldr	r3, [pc, #48]	; (8006a84 <UART_SetConfig+0x3dc>)
 8006a52:	fba3 1302 	umull	r1, r3, r3, r2
 8006a56:	095b      	lsrs	r3, r3, #5
 8006a58:	2164      	movs	r1, #100	; 0x64
 8006a5a:	fb01 f303 	mul.w	r3, r1, r3
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	3332      	adds	r3, #50	; 0x32
 8006a64:	4a07      	ldr	r2, [pc, #28]	; (8006a84 <UART_SetConfig+0x3dc>)
 8006a66:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6a:	095b      	lsrs	r3, r3, #5
 8006a6c:	f003 0207 	and.w	r2, r3, #7
 8006a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4432      	add	r2, r6
 8006a78:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006a7a:	e1a6      	b.n	8006dca <UART_SetConfig+0x722>
 8006a7c:	40011000 	.word	0x40011000
 8006a80:	40011400 	.word	0x40011400
 8006a84:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	4bd1      	ldr	r3, [pc, #836]	; (8006dd4 <UART_SetConfig+0x72c>)
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d006      	beq.n	8006aa2 <UART_SetConfig+0x3fa>
 8006a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	4bcf      	ldr	r3, [pc, #828]	; (8006dd8 <UART_SetConfig+0x730>)
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	f040 80ca 	bne.w	8006c36 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006aa2:	f7fe f9e5 	bl	8004e70 <HAL_RCC_GetPCLK2Freq>
 8006aa6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006aaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006aae:	461c      	mov	r4, r3
 8006ab0:	f04f 0500 	mov.w	r5, #0
 8006ab4:	4622      	mov	r2, r4
 8006ab6:	462b      	mov	r3, r5
 8006ab8:	1891      	adds	r1, r2, r2
 8006aba:	62b9      	str	r1, [r7, #40]	; 0x28
 8006abc:	415b      	adcs	r3, r3
 8006abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ac0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ac4:	1912      	adds	r2, r2, r4
 8006ac6:	eb45 0303 	adc.w	r3, r5, r3
 8006aca:	f04f 0000 	mov.w	r0, #0
 8006ace:	f04f 0100 	mov.w	r1, #0
 8006ad2:	00d9      	lsls	r1, r3, #3
 8006ad4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ad8:	00d0      	lsls	r0, r2, #3
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	eb12 0a04 	adds.w	sl, r2, r4
 8006ae2:	eb43 0b05 	adc.w	fp, r3, r5
 8006ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f04f 0100 	mov.w	r1, #0
 8006af2:	f04f 0200 	mov.w	r2, #0
 8006af6:	f04f 0300 	mov.w	r3, #0
 8006afa:	008b      	lsls	r3, r1, #2
 8006afc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b00:	0082      	lsls	r2, r0, #2
 8006b02:	4650      	mov	r0, sl
 8006b04:	4659      	mov	r1, fp
 8006b06:	f7fa f805 	bl	8000b14 <__aeabi_uldivmod>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4bb3      	ldr	r3, [pc, #716]	; (8006ddc <UART_SetConfig+0x734>)
 8006b10:	fba3 2302 	umull	r2, r3, r3, r2
 8006b14:	095b      	lsrs	r3, r3, #5
 8006b16:	011e      	lsls	r6, r3, #4
 8006b18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f04f 0100 	mov.w	r1, #0
 8006b22:	4602      	mov	r2, r0
 8006b24:	460b      	mov	r3, r1
 8006b26:	1894      	adds	r4, r2, r2
 8006b28:	623c      	str	r4, [r7, #32]
 8006b2a:	415b      	adcs	r3, r3
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b32:	1812      	adds	r2, r2, r0
 8006b34:	eb41 0303 	adc.w	r3, r1, r3
 8006b38:	f04f 0400 	mov.w	r4, #0
 8006b3c:	f04f 0500 	mov.w	r5, #0
 8006b40:	00dd      	lsls	r5, r3, #3
 8006b42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b46:	00d4      	lsls	r4, r2, #3
 8006b48:	4622      	mov	r2, r4
 8006b4a:	462b      	mov	r3, r5
 8006b4c:	1814      	adds	r4, r2, r0
 8006b4e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8006b52:	414b      	adcs	r3, r1
 8006b54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f04f 0100 	mov.w	r1, #0
 8006b64:	f04f 0200 	mov.w	r2, #0
 8006b68:	f04f 0300 	mov.w	r3, #0
 8006b6c:	008b      	lsls	r3, r1, #2
 8006b6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b72:	0082      	lsls	r2, r0, #2
 8006b74:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006b78:	f7f9 ffcc 	bl	8000b14 <__aeabi_uldivmod>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4b96      	ldr	r3, [pc, #600]	; (8006ddc <UART_SetConfig+0x734>)
 8006b82:	fba3 1302 	umull	r1, r3, r3, r2
 8006b86:	095b      	lsrs	r3, r3, #5
 8006b88:	2164      	movs	r1, #100	; 0x64
 8006b8a:	fb01 f303 	mul.w	r3, r1, r3
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	011b      	lsls	r3, r3, #4
 8006b92:	3332      	adds	r3, #50	; 0x32
 8006b94:	4a91      	ldr	r2, [pc, #580]	; (8006ddc <UART_SetConfig+0x734>)
 8006b96:	fba2 2303 	umull	r2, r3, r2, r3
 8006b9a:	095b      	lsrs	r3, r3, #5
 8006b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ba0:	441e      	add	r6, r3
 8006ba2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f04f 0100 	mov.w	r1, #0
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	1894      	adds	r4, r2, r2
 8006bb2:	61bc      	str	r4, [r7, #24]
 8006bb4:	415b      	adcs	r3, r3
 8006bb6:	61fb      	str	r3, [r7, #28]
 8006bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bbc:	1812      	adds	r2, r2, r0
 8006bbe:	eb41 0303 	adc.w	r3, r1, r3
 8006bc2:	f04f 0400 	mov.w	r4, #0
 8006bc6:	f04f 0500 	mov.w	r5, #0
 8006bca:	00dd      	lsls	r5, r3, #3
 8006bcc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006bd0:	00d4      	lsls	r4, r2, #3
 8006bd2:	4622      	mov	r2, r4
 8006bd4:	462b      	mov	r3, r5
 8006bd6:	1814      	adds	r4, r2, r0
 8006bd8:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8006bdc:	414b      	adcs	r3, r1
 8006bde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f04f 0100 	mov.w	r1, #0
 8006bee:	f04f 0200 	mov.w	r2, #0
 8006bf2:	f04f 0300 	mov.w	r3, #0
 8006bf6:	008b      	lsls	r3, r1, #2
 8006bf8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006bfc:	0082      	lsls	r2, r0, #2
 8006bfe:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006c02:	f7f9 ff87 	bl	8000b14 <__aeabi_uldivmod>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4b74      	ldr	r3, [pc, #464]	; (8006ddc <UART_SetConfig+0x734>)
 8006c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c10:	095b      	lsrs	r3, r3, #5
 8006c12:	2164      	movs	r1, #100	; 0x64
 8006c14:	fb01 f303 	mul.w	r3, r1, r3
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	3332      	adds	r3, #50	; 0x32
 8006c1e:	4a6f      	ldr	r2, [pc, #444]	; (8006ddc <UART_SetConfig+0x734>)
 8006c20:	fba2 2303 	umull	r2, r3, r2, r3
 8006c24:	095b      	lsrs	r3, r3, #5
 8006c26:	f003 020f 	and.w	r2, r3, #15
 8006c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4432      	add	r2, r6
 8006c32:	609a      	str	r2, [r3, #8]
 8006c34:	e0c9      	b.n	8006dca <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c36:	f7fe f907 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 8006c3a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c42:	461c      	mov	r4, r3
 8006c44:	f04f 0500 	mov.w	r5, #0
 8006c48:	4622      	mov	r2, r4
 8006c4a:	462b      	mov	r3, r5
 8006c4c:	1891      	adds	r1, r2, r2
 8006c4e:	6139      	str	r1, [r7, #16]
 8006c50:	415b      	adcs	r3, r3
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c58:	1912      	adds	r2, r2, r4
 8006c5a:	eb45 0303 	adc.w	r3, r5, r3
 8006c5e:	f04f 0000 	mov.w	r0, #0
 8006c62:	f04f 0100 	mov.w	r1, #0
 8006c66:	00d9      	lsls	r1, r3, #3
 8006c68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c6c:	00d0      	lsls	r0, r2, #3
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	eb12 0804 	adds.w	r8, r2, r4
 8006c76:	eb43 0905 	adc.w	r9, r3, r5
 8006c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f04f 0100 	mov.w	r1, #0
 8006c86:	f04f 0200 	mov.w	r2, #0
 8006c8a:	f04f 0300 	mov.w	r3, #0
 8006c8e:	008b      	lsls	r3, r1, #2
 8006c90:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c94:	0082      	lsls	r2, r0, #2
 8006c96:	4640      	mov	r0, r8
 8006c98:	4649      	mov	r1, r9
 8006c9a:	f7f9 ff3b 	bl	8000b14 <__aeabi_uldivmod>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4b4e      	ldr	r3, [pc, #312]	; (8006ddc <UART_SetConfig+0x734>)
 8006ca4:	fba3 2302 	umull	r2, r3, r3, r2
 8006ca8:	095b      	lsrs	r3, r3, #5
 8006caa:	011e      	lsls	r6, r3, #4
 8006cac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f04f 0100 	mov.w	r1, #0
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	1894      	adds	r4, r2, r2
 8006cbc:	60bc      	str	r4, [r7, #8]
 8006cbe:	415b      	adcs	r3, r3
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cc6:	1812      	adds	r2, r2, r0
 8006cc8:	eb41 0303 	adc.w	r3, r1, r3
 8006ccc:	f04f 0400 	mov.w	r4, #0
 8006cd0:	f04f 0500 	mov.w	r5, #0
 8006cd4:	00dd      	lsls	r5, r3, #3
 8006cd6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006cda:	00d4      	lsls	r4, r2, #3
 8006cdc:	4622      	mov	r2, r4
 8006cde:	462b      	mov	r3, r5
 8006ce0:	1814      	adds	r4, r2, r0
 8006ce2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8006ce6:	414b      	adcs	r3, r1
 8006ce8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f04f 0100 	mov.w	r1, #0
 8006cf8:	f04f 0200 	mov.w	r2, #0
 8006cfc:	f04f 0300 	mov.w	r3, #0
 8006d00:	008b      	lsls	r3, r1, #2
 8006d02:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d06:	0082      	lsls	r2, r0, #2
 8006d08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d0c:	f7f9 ff02 	bl	8000b14 <__aeabi_uldivmod>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4b31      	ldr	r3, [pc, #196]	; (8006ddc <UART_SetConfig+0x734>)
 8006d16:	fba3 1302 	umull	r1, r3, r3, r2
 8006d1a:	095b      	lsrs	r3, r3, #5
 8006d1c:	2164      	movs	r1, #100	; 0x64
 8006d1e:	fb01 f303 	mul.w	r3, r1, r3
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	011b      	lsls	r3, r3, #4
 8006d26:	3332      	adds	r3, #50	; 0x32
 8006d28:	4a2c      	ldr	r2, [pc, #176]	; (8006ddc <UART_SetConfig+0x734>)
 8006d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2e:	095b      	lsrs	r3, r3, #5
 8006d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d34:	441e      	add	r6, r3
 8006d36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f04f 0100 	mov.w	r1, #0
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	1894      	adds	r4, r2, r2
 8006d46:	603c      	str	r4, [r7, #0]
 8006d48:	415b      	adcs	r3, r3
 8006d4a:	607b      	str	r3, [r7, #4]
 8006d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d50:	1812      	adds	r2, r2, r0
 8006d52:	eb41 0303 	adc.w	r3, r1, r3
 8006d56:	f04f 0400 	mov.w	r4, #0
 8006d5a:	f04f 0500 	mov.w	r5, #0
 8006d5e:	00dd      	lsls	r5, r3, #3
 8006d60:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d64:	00d4      	lsls	r4, r2, #3
 8006d66:	4622      	mov	r2, r4
 8006d68:	462b      	mov	r3, r5
 8006d6a:	1814      	adds	r4, r2, r0
 8006d6c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8006d70:	414b      	adcs	r3, r1
 8006d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f04f 0100 	mov.w	r1, #0
 8006d82:	f04f 0200 	mov.w	r2, #0
 8006d86:	f04f 0300 	mov.w	r3, #0
 8006d8a:	008b      	lsls	r3, r1, #2
 8006d8c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d90:	0082      	lsls	r2, r0, #2
 8006d92:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006d96:	f7f9 febd 	bl	8000b14 <__aeabi_uldivmod>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4b0f      	ldr	r3, [pc, #60]	; (8006ddc <UART_SetConfig+0x734>)
 8006da0:	fba3 1302 	umull	r1, r3, r3, r2
 8006da4:	095b      	lsrs	r3, r3, #5
 8006da6:	2164      	movs	r1, #100	; 0x64
 8006da8:	fb01 f303 	mul.w	r3, r1, r3
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	011b      	lsls	r3, r3, #4
 8006db0:	3332      	adds	r3, #50	; 0x32
 8006db2:	4a0a      	ldr	r2, [pc, #40]	; (8006ddc <UART_SetConfig+0x734>)
 8006db4:	fba2 2303 	umull	r2, r3, r2, r3
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	f003 020f 	and.w	r2, r3, #15
 8006dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4432      	add	r2, r6
 8006dc6:	609a      	str	r2, [r3, #8]
}
 8006dc8:	e7ff      	b.n	8006dca <UART_SetConfig+0x722>
 8006dca:	bf00      	nop
 8006dcc:	37f4      	adds	r7, #244	; 0xf4
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd4:	40011000 	.word	0x40011000
 8006dd8:	40011400 	.word	0x40011400
 8006ddc:	51eb851f 	.word	0x51eb851f

08006de0 <calloc>:
 8006de0:	4b02      	ldr	r3, [pc, #8]	; (8006dec <calloc+0xc>)
 8006de2:	460a      	mov	r2, r1
 8006de4:	4601      	mov	r1, r0
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	f000 b842 	b.w	8006e70 <_calloc_r>
 8006dec:	200000b4 	.word	0x200000b4

08006df0 <__errno>:
 8006df0:	4b01      	ldr	r3, [pc, #4]	; (8006df8 <__errno+0x8>)
 8006df2:	6818      	ldr	r0, [r3, #0]
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	200000b4 	.word	0x200000b4

08006dfc <__libc_init_array>:
 8006dfc:	b570      	push	{r4, r5, r6, lr}
 8006dfe:	4d0d      	ldr	r5, [pc, #52]	; (8006e34 <__libc_init_array+0x38>)
 8006e00:	4c0d      	ldr	r4, [pc, #52]	; (8006e38 <__libc_init_array+0x3c>)
 8006e02:	1b64      	subs	r4, r4, r5
 8006e04:	10a4      	asrs	r4, r4, #2
 8006e06:	2600      	movs	r6, #0
 8006e08:	42a6      	cmp	r6, r4
 8006e0a:	d109      	bne.n	8006e20 <__libc_init_array+0x24>
 8006e0c:	4d0b      	ldr	r5, [pc, #44]	; (8006e3c <__libc_init_array+0x40>)
 8006e0e:	4c0c      	ldr	r4, [pc, #48]	; (8006e40 <__libc_init_array+0x44>)
 8006e10:	f000 f8b6 	bl	8006f80 <_init>
 8006e14:	1b64      	subs	r4, r4, r5
 8006e16:	10a4      	asrs	r4, r4, #2
 8006e18:	2600      	movs	r6, #0
 8006e1a:	42a6      	cmp	r6, r4
 8006e1c:	d105      	bne.n	8006e2a <__libc_init_array+0x2e>
 8006e1e:	bd70      	pop	{r4, r5, r6, pc}
 8006e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e24:	4798      	blx	r3
 8006e26:	3601      	adds	r6, #1
 8006e28:	e7ee      	b.n	8006e08 <__libc_init_array+0xc>
 8006e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e2e:	4798      	blx	r3
 8006e30:	3601      	adds	r6, #1
 8006e32:	e7f2      	b.n	8006e1a <__libc_init_array+0x1e>
 8006e34:	08006fc0 	.word	0x08006fc0
 8006e38:	08006fc0 	.word	0x08006fc0
 8006e3c:	08006fc0 	.word	0x08006fc0
 8006e40:	08006fc4 	.word	0x08006fc4

08006e44 <memcpy>:
 8006e44:	440a      	add	r2, r1
 8006e46:	4291      	cmp	r1, r2
 8006e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e4c:	d100      	bne.n	8006e50 <memcpy+0xc>
 8006e4e:	4770      	bx	lr
 8006e50:	b510      	push	{r4, lr}
 8006e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e5a:	4291      	cmp	r1, r2
 8006e5c:	d1f9      	bne.n	8006e52 <memcpy+0xe>
 8006e5e:	bd10      	pop	{r4, pc}

08006e60 <memset>:
 8006e60:	4402      	add	r2, r0
 8006e62:	4603      	mov	r3, r0
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d100      	bne.n	8006e6a <memset+0xa>
 8006e68:	4770      	bx	lr
 8006e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e6e:	e7f9      	b.n	8006e64 <memset+0x4>

08006e70 <_calloc_r>:
 8006e70:	b513      	push	{r0, r1, r4, lr}
 8006e72:	434a      	muls	r2, r1
 8006e74:	4611      	mov	r1, r2
 8006e76:	9201      	str	r2, [sp, #4]
 8006e78:	f000 f80a 	bl	8006e90 <_malloc_r>
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	b118      	cbz	r0, 8006e88 <_calloc_r+0x18>
 8006e80:	9a01      	ldr	r2, [sp, #4]
 8006e82:	2100      	movs	r1, #0
 8006e84:	f7ff ffec 	bl	8006e60 <memset>
 8006e88:	4620      	mov	r0, r4
 8006e8a:	b002      	add	sp, #8
 8006e8c:	bd10      	pop	{r4, pc}
	...

08006e90 <_malloc_r>:
 8006e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e92:	1ccd      	adds	r5, r1, #3
 8006e94:	f025 0503 	bic.w	r5, r5, #3
 8006e98:	3508      	adds	r5, #8
 8006e9a:	2d0c      	cmp	r5, #12
 8006e9c:	bf38      	it	cc
 8006e9e:	250c      	movcc	r5, #12
 8006ea0:	2d00      	cmp	r5, #0
 8006ea2:	4606      	mov	r6, r0
 8006ea4:	db01      	blt.n	8006eaa <_malloc_r+0x1a>
 8006ea6:	42a9      	cmp	r1, r5
 8006ea8:	d903      	bls.n	8006eb2 <_malloc_r+0x22>
 8006eaa:	230c      	movs	r3, #12
 8006eac:	6033      	str	r3, [r6, #0]
 8006eae:	2000      	movs	r0, #0
 8006eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eb2:	f000 f857 	bl	8006f64 <__malloc_lock>
 8006eb6:	4921      	ldr	r1, [pc, #132]	; (8006f3c <_malloc_r+0xac>)
 8006eb8:	680a      	ldr	r2, [r1, #0]
 8006eba:	4614      	mov	r4, r2
 8006ebc:	b99c      	cbnz	r4, 8006ee6 <_malloc_r+0x56>
 8006ebe:	4f20      	ldr	r7, [pc, #128]	; (8006f40 <_malloc_r+0xb0>)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	b923      	cbnz	r3, 8006ece <_malloc_r+0x3e>
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	f000 f83c 	bl	8006f44 <_sbrk_r>
 8006ecc:	6038      	str	r0, [r7, #0]
 8006ece:	4629      	mov	r1, r5
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	f000 f837 	bl	8006f44 <_sbrk_r>
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	d123      	bne.n	8006f22 <_malloc_r+0x92>
 8006eda:	230c      	movs	r3, #12
 8006edc:	6033      	str	r3, [r6, #0]
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f000 f846 	bl	8006f70 <__malloc_unlock>
 8006ee4:	e7e3      	b.n	8006eae <_malloc_r+0x1e>
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	1b5b      	subs	r3, r3, r5
 8006eea:	d417      	bmi.n	8006f1c <_malloc_r+0x8c>
 8006eec:	2b0b      	cmp	r3, #11
 8006eee:	d903      	bls.n	8006ef8 <_malloc_r+0x68>
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	441c      	add	r4, r3
 8006ef4:	6025      	str	r5, [r4, #0]
 8006ef6:	e004      	b.n	8006f02 <_malloc_r+0x72>
 8006ef8:	6863      	ldr	r3, [r4, #4]
 8006efa:	42a2      	cmp	r2, r4
 8006efc:	bf0c      	ite	eq
 8006efe:	600b      	streq	r3, [r1, #0]
 8006f00:	6053      	strne	r3, [r2, #4]
 8006f02:	4630      	mov	r0, r6
 8006f04:	f000 f834 	bl	8006f70 <__malloc_unlock>
 8006f08:	f104 000b 	add.w	r0, r4, #11
 8006f0c:	1d23      	adds	r3, r4, #4
 8006f0e:	f020 0007 	bic.w	r0, r0, #7
 8006f12:	1ac2      	subs	r2, r0, r3
 8006f14:	d0cc      	beq.n	8006eb0 <_malloc_r+0x20>
 8006f16:	1a1b      	subs	r3, r3, r0
 8006f18:	50a3      	str	r3, [r4, r2]
 8006f1a:	e7c9      	b.n	8006eb0 <_malloc_r+0x20>
 8006f1c:	4622      	mov	r2, r4
 8006f1e:	6864      	ldr	r4, [r4, #4]
 8006f20:	e7cc      	b.n	8006ebc <_malloc_r+0x2c>
 8006f22:	1cc4      	adds	r4, r0, #3
 8006f24:	f024 0403 	bic.w	r4, r4, #3
 8006f28:	42a0      	cmp	r0, r4
 8006f2a:	d0e3      	beq.n	8006ef4 <_malloc_r+0x64>
 8006f2c:	1a21      	subs	r1, r4, r0
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f000 f808 	bl	8006f44 <_sbrk_r>
 8006f34:	3001      	adds	r0, #1
 8006f36:	d1dd      	bne.n	8006ef4 <_malloc_r+0x64>
 8006f38:	e7cf      	b.n	8006eda <_malloc_r+0x4a>
 8006f3a:	bf00      	nop
 8006f3c:	20002694 	.word	0x20002694
 8006f40:	20002698 	.word	0x20002698

08006f44 <_sbrk_r>:
 8006f44:	b538      	push	{r3, r4, r5, lr}
 8006f46:	4d06      	ldr	r5, [pc, #24]	; (8006f60 <_sbrk_r+0x1c>)
 8006f48:	2300      	movs	r3, #0
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	4608      	mov	r0, r1
 8006f4e:	602b      	str	r3, [r5, #0]
 8006f50:	f7fb ffc0 	bl	8002ed4 <_sbrk>
 8006f54:	1c43      	adds	r3, r0, #1
 8006f56:	d102      	bne.n	8006f5e <_sbrk_r+0x1a>
 8006f58:	682b      	ldr	r3, [r5, #0]
 8006f5a:	b103      	cbz	r3, 8006f5e <_sbrk_r+0x1a>
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	bd38      	pop	{r3, r4, r5, pc}
 8006f60:	200028b4 	.word	0x200028b4

08006f64 <__malloc_lock>:
 8006f64:	4801      	ldr	r0, [pc, #4]	; (8006f6c <__malloc_lock+0x8>)
 8006f66:	f000 b809 	b.w	8006f7c <__retarget_lock_acquire_recursive>
 8006f6a:	bf00      	nop
 8006f6c:	200028bc 	.word	0x200028bc

08006f70 <__malloc_unlock>:
 8006f70:	4801      	ldr	r0, [pc, #4]	; (8006f78 <__malloc_unlock+0x8>)
 8006f72:	f000 b804 	b.w	8006f7e <__retarget_lock_release_recursive>
 8006f76:	bf00      	nop
 8006f78:	200028bc 	.word	0x200028bc

08006f7c <__retarget_lock_acquire_recursive>:
 8006f7c:	4770      	bx	lr

08006f7e <__retarget_lock_release_recursive>:
 8006f7e:	4770      	bx	lr

08006f80 <_init>:
 8006f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f82:	bf00      	nop
 8006f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f86:	bc08      	pop	{r3}
 8006f88:	469e      	mov	lr, r3
 8006f8a:	4770      	bx	lr

08006f8c <_fini>:
 8006f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8e:	bf00      	nop
 8006f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f92:	bc08      	pop	{r3}
 8006f94:	469e      	mov	lr, r3
 8006f96:	4770      	bx	lr
