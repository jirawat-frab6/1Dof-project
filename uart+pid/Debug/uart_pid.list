
uart_pid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006418  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065d4  080065d4  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  080065d4  080065d4  000165d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065dc  080065dc  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065dc  080065dc  000165dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065e0  080065e0  000165e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  080065e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000274c  20000118  080066fc  00020118  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002864  080066fc  00022864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c89c  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b6a  00000000  00000000  0002c9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c90  00000000  00000000  0002e550  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  0002f1e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016302  00000000  00000000  0002fd98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a49  00000000  00000000  0004609a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cd87  00000000  00000000  0004eae3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db86a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003860  00000000  00000000  000db8e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000118 	.word	0x20000118
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006598 	.word	0x08006598

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000011c 	.word	0x2000011c
 80001d4:	08006598 	.word	0x08006598

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b972 	b.w	8000e10 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9e08      	ldr	r6, [sp, #32]
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	4688      	mov	r8, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d14b      	bne.n	8000bea <__udivmoddi4+0xa6>
 8000b52:	428a      	cmp	r2, r1
 8000b54:	4615      	mov	r5, r2
 8000b56:	d967      	bls.n	8000c28 <__udivmoddi4+0xe4>
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	b14a      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b5e:	f1c2 0720 	rsb	r7, r2, #32
 8000b62:	fa01 f302 	lsl.w	r3, r1, r2
 8000b66:	fa20 f707 	lsr.w	r7, r0, r7
 8000b6a:	4095      	lsls	r5, r2
 8000b6c:	ea47 0803 	orr.w	r8, r7, r3
 8000b70:	4094      	lsls	r4, r2
 8000b72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b76:	0c23      	lsrs	r3, r4, #16
 8000b78:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b7c:	fa1f fc85 	uxth.w	ip, r5
 8000b80:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b88:	fb07 f10c 	mul.w	r1, r7, ip
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x60>
 8000b90:	18eb      	adds	r3, r5, r3
 8000b92:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b96:	f080 811b 	bcs.w	8000dd0 <__udivmoddi4+0x28c>
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	f240 8118 	bls.w	8000dd0 <__udivmoddi4+0x28c>
 8000ba0:	3f02      	subs	r7, #2
 8000ba2:	442b      	add	r3, r5
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb8:	45a4      	cmp	ip, r4
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x8c>
 8000bbc:	192c      	adds	r4, r5, r4
 8000bbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc2:	f080 8107 	bcs.w	8000dd4 <__udivmoddi4+0x290>
 8000bc6:	45a4      	cmp	ip, r4
 8000bc8:	f240 8104 	bls.w	8000dd4 <__udivmoddi4+0x290>
 8000bcc:	3802      	subs	r0, #2
 8000bce:	442c      	add	r4, r5
 8000bd0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd4:	eba4 040c 	sub.w	r4, r4, ip
 8000bd8:	2700      	movs	r7, #0
 8000bda:	b11e      	cbz	r6, 8000be4 <__udivmoddi4+0xa0>
 8000bdc:	40d4      	lsrs	r4, r2
 8000bde:	2300      	movs	r3, #0
 8000be0:	e9c6 4300 	strd	r4, r3, [r6]
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d909      	bls.n	8000c02 <__udivmoddi4+0xbe>
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	f000 80eb 	beq.w	8000dca <__udivmoddi4+0x286>
 8000bf4:	2700      	movs	r7, #0
 8000bf6:	e9c6 0100 	strd	r0, r1, [r6]
 8000bfa:	4638      	mov	r0, r7
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	fab3 f783 	clz	r7, r3
 8000c06:	2f00      	cmp	r7, #0
 8000c08:	d147      	bne.n	8000c9a <__udivmoddi4+0x156>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d302      	bcc.n	8000c14 <__udivmoddi4+0xd0>
 8000c0e:	4282      	cmp	r2, r0
 8000c10:	f200 80fa 	bhi.w	8000e08 <__udivmoddi4+0x2c4>
 8000c14:	1a84      	subs	r4, r0, r2
 8000c16:	eb61 0303 	sbc.w	r3, r1, r3
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	4698      	mov	r8, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d0e0      	beq.n	8000be4 <__udivmoddi4+0xa0>
 8000c22:	e9c6 4800 	strd	r4, r8, [r6]
 8000c26:	e7dd      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000c28:	b902      	cbnz	r2, 8000c2c <__udivmoddi4+0xe8>
 8000c2a:	deff      	udf	#255	; 0xff
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	f040 808f 	bne.w	8000d54 <__udivmoddi4+0x210>
 8000c36:	1b49      	subs	r1, r1, r5
 8000c38:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3c:	fa1f f885 	uxth.w	r8, r5
 8000c40:	2701      	movs	r7, #1
 8000c42:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c46:	0c23      	lsrs	r3, r4, #16
 8000c48:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c50:	fb08 f10c 	mul.w	r1, r8, ip
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x124>
 8000c58:	18eb      	adds	r3, r5, r3
 8000c5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x122>
 8000c60:	4299      	cmp	r1, r3
 8000c62:	f200 80cd 	bhi.w	8000e00 <__udivmoddi4+0x2bc>
 8000c66:	4684      	mov	ip, r0
 8000c68:	1a59      	subs	r1, r3, r1
 8000c6a:	b2a3      	uxth	r3, r4
 8000c6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c70:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c74:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c78:	fb08 f800 	mul.w	r8, r8, r0
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x14c>
 8000c80:	192c      	adds	r4, r5, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x14a>
 8000c88:	45a0      	cmp	r8, r4
 8000c8a:	f200 80b6 	bhi.w	8000dfa <__udivmoddi4+0x2b6>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	eba4 0408 	sub.w	r4, r4, r8
 8000c94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c98:	e79f      	b.n	8000bda <__udivmoddi4+0x96>
 8000c9a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c9e:	40bb      	lsls	r3, r7
 8000ca0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cac:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cb0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb8:	4325      	orrs	r5, r4
 8000cba:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cbe:	0c2c      	lsrs	r4, r5, #16
 8000cc0:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc4:	fa1f fa8e 	uxth.w	sl, lr
 8000cc8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ccc:	fb09 f40a 	mul.w	r4, r9, sl
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	fa02 f207 	lsl.w	r2, r2, r7
 8000cd6:	fa00 f107 	lsl.w	r1, r0, r7
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b0>
 8000cdc:	eb1e 0303 	adds.w	r3, lr, r3
 8000ce0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce4:	f080 8087 	bcs.w	8000df6 <__udivmoddi4+0x2b2>
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	f240 8084 	bls.w	8000df6 <__udivmoddi4+0x2b2>
 8000cee:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf2:	4473      	add	r3, lr
 8000cf4:	1b1b      	subs	r3, r3, r4
 8000cf6:	b2ad      	uxth	r5, r5
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000d00:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d04:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d08:	45a2      	cmp	sl, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1da>
 8000d0c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d10:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d14:	d26b      	bcs.n	8000dee <__udivmoddi4+0x2aa>
 8000d16:	45a2      	cmp	sl, r4
 8000d18:	d969      	bls.n	8000dee <__udivmoddi4+0x2aa>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4474      	add	r4, lr
 8000d1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d22:	fba0 8902 	umull	r8, r9, r0, r2
 8000d26:	eba4 040a 	sub.w	r4, r4, sl
 8000d2a:	454c      	cmp	r4, r9
 8000d2c:	46c2      	mov	sl, r8
 8000d2e:	464b      	mov	r3, r9
 8000d30:	d354      	bcc.n	8000ddc <__udivmoddi4+0x298>
 8000d32:	d051      	beq.n	8000dd8 <__udivmoddi4+0x294>
 8000d34:	2e00      	cmp	r6, #0
 8000d36:	d069      	beq.n	8000e0c <__udivmoddi4+0x2c8>
 8000d38:	ebb1 050a 	subs.w	r5, r1, sl
 8000d3c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d40:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d44:	40fd      	lsrs	r5, r7
 8000d46:	40fc      	lsrs	r4, r7
 8000d48:	ea4c 0505 	orr.w	r5, ip, r5
 8000d4c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d50:	2700      	movs	r7, #0
 8000d52:	e747      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000d54:	f1c2 0320 	rsb	r3, r2, #32
 8000d58:	fa20 f703 	lsr.w	r7, r0, r3
 8000d5c:	4095      	lsls	r5, r2
 8000d5e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d62:	fa21 f303 	lsr.w	r3, r1, r3
 8000d66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d6a:	4338      	orrs	r0, r7
 8000d6c:	0c01      	lsrs	r1, r0, #16
 8000d6e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d72:	fa1f f885 	uxth.w	r8, r5
 8000d76:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7e:	fb07 f308 	mul.w	r3, r7, r8
 8000d82:	428b      	cmp	r3, r1
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x256>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d90:	d22f      	bcs.n	8000df2 <__udivmoddi4+0x2ae>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d92d      	bls.n	8000df2 <__udivmoddi4+0x2ae>
 8000d96:	3f02      	subs	r7, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1acb      	subs	r3, r1, r3
 8000d9c:	b281      	uxth	r1, r0
 8000d9e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb00 f308 	mul.w	r3, r0, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x27e>
 8000db2:	1869      	adds	r1, r5, r1
 8000db4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db8:	d217      	bcs.n	8000dea <__udivmoddi4+0x2a6>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d915      	bls.n	8000dea <__udivmoddi4+0x2a6>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4429      	add	r1, r5
 8000dc2:	1ac9      	subs	r1, r1, r3
 8000dc4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc8:	e73b      	b.n	8000c42 <__udivmoddi4+0xfe>
 8000dca:	4637      	mov	r7, r6
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e709      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000dd0:	4607      	mov	r7, r0
 8000dd2:	e6e7      	b.n	8000ba4 <__udivmoddi4+0x60>
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	e6fb      	b.n	8000bd0 <__udivmoddi4+0x8c>
 8000dd8:	4541      	cmp	r1, r8
 8000dda:	d2ab      	bcs.n	8000d34 <__udivmoddi4+0x1f0>
 8000ddc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000de0:	eb69 020e 	sbc.w	r2, r9, lr
 8000de4:	3801      	subs	r0, #1
 8000de6:	4613      	mov	r3, r2
 8000de8:	e7a4      	b.n	8000d34 <__udivmoddi4+0x1f0>
 8000dea:	4660      	mov	r0, ip
 8000dec:	e7e9      	b.n	8000dc2 <__udivmoddi4+0x27e>
 8000dee:	4618      	mov	r0, r3
 8000df0:	e795      	b.n	8000d1e <__udivmoddi4+0x1da>
 8000df2:	4667      	mov	r7, ip
 8000df4:	e7d1      	b.n	8000d9a <__udivmoddi4+0x256>
 8000df6:	4681      	mov	r9, r0
 8000df8:	e77c      	b.n	8000cf4 <__udivmoddi4+0x1b0>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	442c      	add	r4, r5
 8000dfe:	e747      	b.n	8000c90 <__udivmoddi4+0x14c>
 8000e00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e04:	442b      	add	r3, r5
 8000e06:	e72f      	b.n	8000c68 <__udivmoddi4+0x124>
 8000e08:	4638      	mov	r0, r7
 8000e0a:	e708      	b.n	8000c1e <__udivmoddi4+0xda>
 8000e0c:	4637      	mov	r7, r6
 8000e0e:	e6e9      	b.n	8000be4 <__udivmoddi4+0xa0>

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	0000      	movs	r0, r0
	...

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e20:	f002 f870 	bl	8002f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e24:	f000 f962 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e28:	f000 fb28 	bl	800147c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e2c:	f000 fafe 	bl	800142c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e30:	f000 fad0 	bl	80013d4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000e34:	f000 f9c4 	bl	80011c0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e38:	f000 fa1a 	bl	8001270 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000e3c:	f000 fa7c 	bl	8001338 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // start micro
  HAL_TIM_Base_Start_IT(&htim5);
 8000e40:	4895      	ldr	r0, [pc, #596]	; (8001098 <main+0x280>)
 8000e42:	f003 fbc0 	bl	80045c6 <HAL_TIM_Base_Start_IT>

  // start PWM
  HAL_TIM_Base_Start(&htim3);
 8000e46:	4895      	ldr	r0, [pc, #596]	; (800109c <main+0x284>)
 8000e48:	f003 fb99 	bl	800457e <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4893      	ldr	r0, [pc, #588]	; (800109c <main+0x284>)
 8000e50:	f003 fc08 	bl	8004664 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e54:	2104      	movs	r1, #4
 8000e56:	4891      	ldr	r0, [pc, #580]	; (800109c <main+0x284>)
 8000e58:	f003 fc04 	bl	8004664 <HAL_TIM_PWM_Start>


  // start QEI
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000e5c:	213c      	movs	r1, #60	; 0x3c
 8000e5e:	4890      	ldr	r0, [pc, #576]	; (80010a0 <main+0x288>)
 8000e60:	f003 fcc4 	bl	80047ec <HAL_TIM_Encoder_Start>


  //init lowpass_filter
  for(int i = 0;i < 10;i++){
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	e00f      	b.n	8000e8a <main+0x72>
	  lowpass_filters[i].Wc = Wc_arr[i];
 8000e6a:	4a8e      	ldr	r2, [pc, #568]	; (80010a4 <main+0x28c>)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	4413      	add	r3, r2
 8000e72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e76:	498c      	ldr	r1, [pc, #560]	; (80010a8 <main+0x290>)
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	0152      	lsls	r2, r2, #5
 8000e7c:	440a      	add	r2, r1
 8000e7e:	3218      	adds	r2, #24
 8000e80:	e9c2 3400 	strd	r3, r4, [r2]
  for(int i = 0;i < 10;i++){
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	3301      	adds	r3, #1
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2b09      	cmp	r3, #9
 8000e8e:	ddec      	ble.n	8000e6a <main+0x52>
  }

  //init pid
  pids[0].dt = pids[1].dt = 0.02;
 8000e90:	4a86      	ldr	r2, [pc, #536]	; (80010ac <main+0x294>)
 8000e92:	a47b      	add	r4, pc, #492	; (adr r4, 8001080 <main+0x268>)
 8000e94:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000e98:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
 8000e9c:	4b83      	ldr	r3, [pc, #524]	; (80010ac <main+0x294>)
 8000e9e:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8000ea2:	4a82      	ldr	r2, [pc, #520]	; (80010ac <main+0x294>)
 8000ea4:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
  pids[0].min = pids[1].min = -10000;
 8000ea8:	4a80      	ldr	r2, [pc, #512]	; (80010ac <main+0x294>)
 8000eaa:	a477      	add	r4, pc, #476	; (adr r4, 8001088 <main+0x270>)
 8000eac:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000eb0:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 8000eb4:	4b7d      	ldr	r3, [pc, #500]	; (80010ac <main+0x294>)
 8000eb6:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8000eba:	4a7c      	ldr	r2, [pc, #496]	; (80010ac <main+0x294>)
 8000ebc:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
  pids[0].max = pids[1].max = 10000;
 8000ec0:	4a7a      	ldr	r2, [pc, #488]	; (80010ac <main+0x294>)
 8000ec2:	a473      	add	r4, pc, #460	; (adr r4, 8001090 <main+0x278>)
 8000ec4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000ec8:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8000ecc:	4b77      	ldr	r3, [pc, #476]	; (80010ac <main+0x294>)
 8000ece:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8000ed2:	4a76      	ldr	r2, [pc, #472]	; (80010ac <main+0x294>)
 8000ed4:	e9c2 3408 	strd	r3, r4, [r2, #32]
  pids[0].tau = pids[1].tau = 0.02;
 8000ed8:	4a74      	ldr	r2, [pc, #464]	; (80010ac <main+0x294>)
 8000eda:	a469      	add	r4, pc, #420	; (adr r4, 8001080 <main+0x268>)
 8000edc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000ee0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
 8000ee4:	4b71      	ldr	r3, [pc, #452]	; (80010ac <main+0x294>)
 8000ee6:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8000eea:	4a70      	ldr	r2, [pc, #448]	; (80010ac <main+0x294>)
 8000eec:	e9c2 3406 	strd	r3, r4, [r2, #24]


  pids[0].kp = 500;
 8000ef0:	4a6e      	ldr	r2, [pc, #440]	; (80010ac <main+0x294>)
 8000ef2:	f04f 0300 	mov.w	r3, #0
 8000ef6:	4c6e      	ldr	r4, [pc, #440]	; (80010b0 <main+0x298>)
 8000ef8:	e9c2 3400 	strd	r3, r4, [r2]
  pids[0].ki = 600;
 8000efc:	4a6b      	ldr	r2, [pc, #428]	; (80010ac <main+0x294>)
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	4c6c      	ldr	r4, [pc, #432]	; (80010b4 <main+0x29c>)
 8000f04:	e9c2 3402 	strd	r3, r4, [r2, #8]
  pids[0].kd = 10;
 8000f08:	4a68      	ldr	r2, [pc, #416]	; (80010ac <main+0x294>)
 8000f0a:	f04f 0300 	mov.w	r3, #0
 8000f0e:	4c6a      	ldr	r4, [pc, #424]	; (80010b8 <main+0x2a0>)
 8000f10:	e9c2 3404 	strd	r3, r4, [r2, #16]




  //PID position control
  pids[1].kp = 500;
 8000f14:	4a65      	ldr	r2, [pc, #404]	; (80010ac <main+0x294>)
 8000f16:	f04f 0300 	mov.w	r3, #0
 8000f1a:	4c65      	ldr	r4, [pc, #404]	; (80010b0 <main+0x298>)
 8000f1c:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
  pids[1].ki = 1000;
 8000f20:	4a62      	ldr	r2, [pc, #392]	; (80010ac <main+0x294>)
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	4c65      	ldr	r4, [pc, #404]	; (80010bc <main+0x2a4>)
 8000f28:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
  pids[1].kd = 1;
 8000f2c:	4a5f      	ldr	r2, [pc, #380]	; (80010ac <main+0x294>)
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	4c63      	ldr	r4, [pc, #396]	; (80010c0 <main+0x2a8>)
 8000f34:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68



  //UART protocol
  UART2.huart = &huart2;
 8000f38:	4b62      	ldr	r3, [pc, #392]	; (80010c4 <main+0x2ac>)
 8000f3a:	4a63      	ldr	r2, [pc, #396]	; (80010c8 <main+0x2b0>)
 8000f3c:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 8000f3e:	4b61      	ldr	r3, [pc, #388]	; (80010c4 <main+0x2ac>)
 8000f40:	22ff      	movs	r2, #255	; 0xff
 8000f42:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8000f44:	4b5f      	ldr	r3, [pc, #380]	; (80010c4 <main+0x2ac>)
 8000f46:	22ff      	movs	r2, #255	; 0xff
 8000f48:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 8000f4a:	485e      	ldr	r0, [pc, #376]	; (80010c4 <main+0x2ac>)
 8000f4c:	f000 ffd6 	bl	8001efc <UARTInit>
  UARTResetStart(&UART2);
 8000f50:	485c      	ldr	r0, [pc, #368]	; (80010c4 <main+0x2ac>)
 8000f52:	f000 fffb 	bl	8001f4c <UARTResetStart>




  targectory_cal(paths, &path_n_cnt, 0, 180, 0.02);
 8000f56:	ed9f 0b4a 	vldr	d0, [pc, #296]	; 8001080 <main+0x268>
 8000f5a:	23b4      	movs	r3, #180	; 0xb4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	495b      	ldr	r1, [pc, #364]	; (80010cc <main+0x2b4>)
 8000f60:	485b      	ldr	r0, [pc, #364]	; (80010d0 <main+0x2b8>)
 8000f62:	f000 fda5 	bl	8001ab0 <targectory_cal>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  moving_state_update();
 8000f66:	f001 fc9b 	bl	80028a0 <moving_state_update>

	  encoder_lowpass_update();
 8000f6a:	f001 fc09 	bl	8002780 <encoder_lowpass_update>


	  //pid control , system dead-time = 0.16 sec = 6.25 Hz 165000
	  if(micros() - time_stamp2 > 20000){ // 6.06Hz
 8000f6e:	f000 ff8f 	bl	8001e90 <micros>
 8000f72:	460a      	mov	r2, r1
 8000f74:	4601      	mov	r1, r0
 8000f76:	4b57      	ldr	r3, [pc, #348]	; (80010d4 <main+0x2bc>)
 8000f78:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4614      	mov	r4, r2
 8000f80:	ebb3 030b 	subs.w	r3, r3, fp
 8000f84:	eb64 040c 	sbc.w	r4, r4, ip
 8000f88:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	42a2      	cmp	r2, r4
 8000f92:	bf08      	it	eq
 8000f94:	4299      	cmpeq	r1, r3
 8000f96:	d26d      	bcs.n	8001074 <main+0x25c>
		  time_stamp2 = micros();
 8000f98:	f000 ff7a 	bl	8001e90 <micros>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	460c      	mov	r4, r1
 8000fa0:	4a4c      	ldr	r2, [pc, #304]	; (80010d4 <main+0x2bc>)
 8000fa2:	e9c2 3400 	strd	r3, r4, [r2]


		  setpoint = paths_ind < path_n_cnt ? paths[paths_ind++]/6:0;
 8000fa6:	4b4c      	ldr	r3, [pc, #304]	; (80010d8 <main+0x2c0>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b48      	ldr	r3, [pc, #288]	; (80010cc <main+0x2b4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	da11      	bge.n	8000fd6 <main+0x1be>
 8000fb2:	4b49      	ldr	r3, [pc, #292]	; (80010d8 <main+0x2c0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	4947      	ldr	r1, [pc, #284]	; (80010d8 <main+0x2c0>)
 8000fba:	600a      	str	r2, [r1, #0]
 8000fbc:	4a44      	ldr	r2, [pc, #272]	; (80010d0 <main+0x2b8>)
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	4b44      	ldr	r3, [pc, #272]	; (80010dc <main+0x2c4>)
 8000fcc:	f7ff fbea 	bl	80007a4 <__aeabi_ddiv>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	460c      	mov	r4, r1
 8000fd4:	e003      	b.n	8000fde <main+0x1c6>
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	f04f 0400 	mov.w	r4, #0
 8000fde:	4a40      	ldr	r2, [pc, #256]	; (80010e0 <main+0x2c8>)
 8000fe0:	e9c2 3400 	strd	r3, r4, [r2]
		  pid_pwm_output = pid_update(&pids[0], setpoint, encoder_velocity_rpm);
 8000fe4:	4b3e      	ldr	r3, [pc, #248]	; (80010e0 <main+0x2c8>)
 8000fe6:	ed93 7b00 	vldr	d7, [r3]
 8000fea:	4b3e      	ldr	r3, [pc, #248]	; (80010e4 <main+0x2cc>)
 8000fec:	ed93 6b00 	vldr	d6, [r3]
 8000ff0:	eeb0 1a46 	vmov.f32	s2, s12
 8000ff4:	eef0 1a66 	vmov.f32	s3, s13
 8000ff8:	eeb0 0a47 	vmov.f32	s0, s14
 8000ffc:	eef0 0a67 	vmov.f32	s1, s15
 8001000:	482a      	ldr	r0, [pc, #168]	; (80010ac <main+0x294>)
 8001002:	f000 fbe7 	bl	80017d4 <pid_update>
 8001006:	eeb0 7a40 	vmov.f32	s14, s0
 800100a:	eef0 7a60 	vmov.f32	s15, s1
 800100e:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <main+0x2d0>)
 8001010:	ed83 7b00 	vstr	d7, [r3]
			}
			pid_pwm_output = pid_update(&pids[1], setpoint, (double)encoder_value/(12*64*4-1)*360);
		   */


		  if(pid_pwm_output > 0){
 8001014:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <main+0x2d0>)
 8001016:	e9d3 0100 	ldrd	r0, r1, [r3]
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	f7ff fd25 	bl	8000a70 <__aeabi_dcmpgt>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d011      	beq.n	8001050 <main+0x238>
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,pid_pwm_output);
 800102c:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <main+0x2d0>)
 800102e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001032:	4a1a      	ldr	r2, [pc, #104]	; (800109c <main+0x284>)
 8001034:	6812      	ldr	r2, [r2, #0]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	4618      	mov	r0, r3
 800103a:	4621      	mov	r1, r4
 800103c:	f7ff fd4a 	bl	8000ad4 <__aeabi_d2uiz>
 8001040:	4603      	mov	r3, r0
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	6353      	str	r3, [r2, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <main+0x284>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2200      	movs	r2, #0
 800104c:	639a      	str	r2, [r3, #56]	; 0x38
 800104e:	e011      	b.n	8001074 <main+0x25c>
		  }
		  else{
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <main+0x284>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2200      	movs	r2, #0
 8001056:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,-pid_pwm_output);
 8001058:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <main+0x2d0>)
 800105a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800105e:	461d      	mov	r5, r3
 8001060:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <main+0x284>)
 8001066:	681c      	ldr	r4, [r3, #0]
 8001068:	4628      	mov	r0, r5
 800106a:	4631      	mov	r1, r6
 800106c:	f7ff fd32 	bl	8000ad4 <__aeabi_d2uiz>
 8001070:	4603      	mov	r3, r0
 8001072:	63a3      	str	r3, [r4, #56]	; 0x38
		  }
	  }


	  uart_update();
 8001074:	f001 fbf8 	bl	8002868 <uart_update>
	  moving_state_update();
 8001078:	e775      	b.n	8000f66 <main+0x14e>
 800107a:	bf00      	nop
 800107c:	f3af 8000 	nop.w
 8001080:	47ae147b 	.word	0x47ae147b
 8001084:	3f947ae1 	.word	0x3f947ae1
 8001088:	00000000 	.word	0x00000000
 800108c:	c0c38800 	.word	0xc0c38800
 8001090:	00000000 	.word	0x00000000
 8001094:	40c38800 	.word	0x40c38800
 8001098:	200026fc 	.word	0x200026fc
 800109c:	2000273c 	.word	0x2000273c
 80010a0:	200027dc 	.word	0x200027dc
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000188 	.word	0x20000188
 80010ac:	20000340 	.word	0x20000340
 80010b0:	407f4000 	.word	0x407f4000
 80010b4:	4082c000 	.word	0x4082c000
 80010b8:	40240000 	.word	0x40240000
 80010bc:	408f4000 	.word	0x408f4000
 80010c0:	3ff00000 	.word	0x3ff00000
 80010c4:	20000134 	.word	0x20000134
 80010c8:	2000281c 	.word	0x2000281c
 80010cc:	20002344 	.word	0x20002344
 80010d0:	20000400 	.word	0x20000400
 80010d4:	20000178 	.word	0x20000178
 80010d8:	20002340 	.word	0x20002340
 80010dc:	40180000 	.word	0x40180000
 80010e0:	200003f8 	.word	0x200003f8
 80010e4:	20000168 	.word	0x20000168
 80010e8:	200003f0 	.word	0x200003f0

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	; 0x50
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	2230      	movs	r2, #48	; 0x30
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 f9c9 	bl	8006492 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <SystemClock_Config+0xcc>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	4a27      	ldr	r2, [pc, #156]	; (80011b8 <SystemClock_Config+0xcc>)
 800111a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111e:	6413      	str	r3, [r2, #64]	; 0x40
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <SystemClock_Config+0xcc>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <SystemClock_Config+0xd0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a21      	ldr	r2, [pc, #132]	; (80011bc <SystemClock_Config+0xd0>)
 8001136:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <SystemClock_Config+0xd0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001148:	2302      	movs	r3, #2
 800114a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114c:	2301      	movs	r3, #1
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001150:	2310      	movs	r3, #16
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001154:	2302      	movs	r3, #2
 8001156:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001158:	2300      	movs	r3, #0
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800115c:	2310      	movs	r3, #16
 800115e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001160:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001164:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001166:	2304      	movs	r3, #4
 8001168:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800116a:	2304      	movs	r3, #4
 800116c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116e:	f107 0320 	add.w	r3, r7, #32
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fd76 	bl	8003c64 <HAL_RCC_OscConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800117e:	f001 fc4b 	bl	8002a18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001182:	230f      	movs	r3, #15
 8001184:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001186:	2302      	movs	r3, #2
 8001188:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800118e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001192:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	2102      	movs	r1, #2
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 ffd0 	bl	8004144 <HAL_RCC_ClockConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011aa:	f001 fc35 	bl	8002a18 <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3750      	adds	r7, #80	; 0x50
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40007000 	.word	0x40007000

080011c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2224      	movs	r2, #36	; 0x24
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f005 f95f 	bl	8006492 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <MX_TIM1_Init+0xa8>)
 80011de:	4a23      	ldr	r2, [pc, #140]	; (800126c <MX_TIM1_Init+0xac>)
 80011e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MX_TIM1_Init+0xa8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <MX_TIM1_Init+0xa8>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = (12*64*4) -1;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <MX_TIM1_Init+0xa8>)
 80011f0:	f640 32ff 	movw	r2, #3071	; 0xbff
 80011f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MX_TIM1_Init+0xa8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_TIM1_Init+0xa8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_TIM1_Init+0xa8>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001208:	2303      	movs	r3, #3
 800120a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001210:	2301      	movs	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001220:	2301      	movs	r3, #1
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	4619      	mov	r1, r3
 8001232:	480d      	ldr	r0, [pc, #52]	; (8001268 <MX_TIM1_Init+0xa8>)
 8001234:	f003 fa48 	bl	80046c8 <HAL_TIM_Encoder_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800123e:	f001 fbeb 	bl	8002a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	; (8001268 <MX_TIM1_Init+0xa8>)
 8001250:	f004 f87e 	bl	8005350 <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800125a:	f001 fbdd 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	3730      	adds	r7, #48	; 0x30
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200027dc 	.word	0x200027dc
 800126c:	40010000 	.word	0x40010000

08001270 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]
 800128e:	615a      	str	r2, [r3, #20]
 8001290:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001292:	4b27      	ldr	r3, [pc, #156]	; (8001330 <MX_TIM3_Init+0xc0>)
 8001294:	4a27      	ldr	r2, [pc, #156]	; (8001334 <MX_TIM3_Init+0xc4>)
 8001296:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001298:	4b25      	ldr	r3, [pc, #148]	; (8001330 <MX_TIM3_Init+0xc0>)
 800129a:	2200      	movs	r2, #0
 800129c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	4b24      	ldr	r3, [pc, #144]	; (8001330 <MX_TIM3_Init+0xc0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80012a4:	4b22      	ldr	r3, [pc, #136]	; (8001330 <MX_TIM3_Init+0xc0>)
 80012a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80012aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ac:	4b20      	ldr	r3, [pc, #128]	; (8001330 <MX_TIM3_Init+0xc0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b2:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <MX_TIM3_Init+0xc0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012b8:	481d      	ldr	r0, [pc, #116]	; (8001330 <MX_TIM3_Init+0xc0>)
 80012ba:	f003 f9a8 	bl	800460e <HAL_TIM_PWM_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80012c4:	f001 fba8 	bl	8002a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012d0:	f107 0320 	add.w	r3, r7, #32
 80012d4:	4619      	mov	r1, r3
 80012d6:	4816      	ldr	r0, [pc, #88]	; (8001330 <MX_TIM3_Init+0xc0>)
 80012d8:	f004 f83a 	bl	8005350 <HAL_TIMEx_MasterConfigSynchronization>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80012e2:	f001 fb99 	bl	8002a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e6:	2360      	movs	r3, #96	; 0x60
 80012e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	4619      	mov	r1, r3
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <MX_TIM3_Init+0xc0>)
 80012fe:	f003 fbb5 	bl	8004a6c <HAL_TIM_PWM_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001308:	f001 fb86 	bl	8002a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2204      	movs	r2, #4
 8001310:	4619      	mov	r1, r3
 8001312:	4807      	ldr	r0, [pc, #28]	; (8001330 <MX_TIM3_Init+0xc0>)
 8001314:	f003 fbaa 	bl	8004a6c <HAL_TIM_PWM_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800131e:	f001 fb7b 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001322:	4803      	ldr	r0, [pc, #12]	; (8001330 <MX_TIM3_Init+0xc0>)
 8001324:	f001 fc36 	bl	8002b94 <HAL_TIM_MspPostInit>

}
 8001328:	bf00      	nop
 800132a:	3728      	adds	r7, #40	; 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2000273c 	.word	0x2000273c
 8001334:	40000400 	.word	0x40000400

08001338 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_TIM5_Init+0x94>)
 8001356:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <MX_TIM5_Init+0x98>)
 8001358:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_TIM5_Init+0x94>)
 800135c:	2263      	movs	r2, #99	; 0x63
 800135e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_TIM5_Init+0x94>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_TIM5_Init+0x94>)
 8001368:	f04f 32ff 	mov.w	r2, #4294967295
 800136c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_TIM5_Init+0x94>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_TIM5_Init+0x94>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800137a:	4814      	ldr	r0, [pc, #80]	; (80013cc <MX_TIM5_Init+0x94>)
 800137c:	f003 f8d4 	bl	8004528 <HAL_TIM_Base_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001386:	f001 fb47 	bl	8002a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001390:	f107 0308 	add.w	r3, r7, #8
 8001394:	4619      	mov	r1, r3
 8001396:	480d      	ldr	r0, [pc, #52]	; (80013cc <MX_TIM5_Init+0x94>)
 8001398:	f003 fc2e 	bl	8004bf8 <HAL_TIM_ConfigClockSource>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80013a2:	f001 fb39 	bl	8002a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013ae:	463b      	mov	r3, r7
 80013b0:	4619      	mov	r1, r3
 80013b2:	4806      	ldr	r0, [pc, #24]	; (80013cc <MX_TIM5_Init+0x94>)
 80013b4:	f003 ffcc 	bl	8005350 <HAL_TIMEx_MasterConfigSynchronization>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80013be:	f001 fb2b 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200026fc 	.word	0x200026fc
 80013d0:	40000c00 	.word	0x40000c00

080013d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <MX_USART2_UART_Init+0x50>)
 80013da:	4a13      	ldr	r2, [pc, #76]	; (8001428 <MX_USART2_UART_Init+0x54>)
 80013dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_USART2_UART_Init+0x50>)
 80013e0:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80013e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_USART2_UART_Init+0x50>)
 80013e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013ec:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <MX_USART2_UART_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_USART2_UART_Init+0x50>)
 80013f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_USART2_UART_Init+0x50>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_USART2_UART_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_USART2_UART_Init+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_USART2_UART_Init+0x50>)
 8001410:	f004 f820 	bl	8005454 <HAL_UART_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800141a:	f001 fafd 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2000281c 	.word	0x2000281c
 8001428:	40004400 	.word	0x40004400

0800142c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_DMA_Init+0x4c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <MX_DMA_Init+0x4c>)
 800143c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <MX_DMA_Init+0x4c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2010      	movs	r0, #16
 8001454:	f001 fea3 	bl	800319e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001458:	2010      	movs	r0, #16
 800145a:	f001 febc 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2011      	movs	r0, #17
 8001464:	f001 fe9b 	bl	800319e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001468:	2011      	movs	r0, #17
 800146a:	f001 feb4 	bl	80031d6 <HAL_NVIC_EnableIRQ>

}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <MX_GPIO_Init+0xd0>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a2c      	ldr	r2, [pc, #176]	; (800154c <MX_GPIO_Init+0xd0>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b2a      	ldr	r3, [pc, #168]	; (800154c <MX_GPIO_Init+0xd0>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b26      	ldr	r3, [pc, #152]	; (800154c <MX_GPIO_Init+0xd0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a25      	ldr	r2, [pc, #148]	; (800154c <MX_GPIO_Init+0xd0>)
 80014b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <MX_GPIO_Init+0xd0>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b1f      	ldr	r3, [pc, #124]	; (800154c <MX_GPIO_Init+0xd0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a1e      	ldr	r2, [pc, #120]	; (800154c <MX_GPIO_Init+0xd0>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <MX_GPIO_Init+0xd0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <MX_GPIO_Init+0xd0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a17      	ldr	r2, [pc, #92]	; (800154c <MX_GPIO_Init+0xd0>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <MX_GPIO_Init+0xd0>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	2120      	movs	r1, #32
 8001506:	4812      	ldr	r0, [pc, #72]	; (8001550 <MX_GPIO_Init+0xd4>)
 8001508:	f002 fb92 	bl	8003c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800150c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <MX_GPIO_Init+0xd8>)
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	480d      	ldr	r0, [pc, #52]	; (8001558 <MX_GPIO_Init+0xdc>)
 8001522:	f002 fa03 	bl	800392c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001526:	2320      	movs	r3, #32
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <MX_GPIO_Init+0xd4>)
 800153e:	f002 f9f5 	bl	800392c <HAL_GPIO_Init>

}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	; 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	40020000 	.word	0x40020000
 8001554:	10210000 	.word	0x10210000
 8001558:	40020800 	.word	0x40020800

0800155c <unwraping_update>:
static int pre_enc_cnt = 0;
static int k = 0;

#define half_enc_cnt (12*64*4)/2
#define enc_cnt 12*64*4
int unwraping_update(){
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

	static int cur_enc_cnt = 0;

	cur_enc_cnt = TIM1->CNT;
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <unwraping_update+0x6c>)
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	461a      	mov	r2, r3
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <unwraping_update+0x70>)
 8001568:	601a      	str	r2, [r3, #0]


	if(abs((int)cur_enc_cnt - pre_enc_cnt) > half_enc_cnt){
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <unwraping_update+0x70>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <unwraping_update+0x74>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	bfb8      	it	lt
 8001578:	425b      	neglt	r3, r3
 800157a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800157e:	dd0f      	ble.n	80015a0 <unwraping_update+0x44>
		k+= (int)cur_enc_cnt - pre_enc_cnt > 0 ? -1 : 1 ;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <unwraping_update+0x70>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <unwraping_update+0x74>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	dd02      	ble.n	8001594 <unwraping_update+0x38>
 800158e:	f04f 32ff 	mov.w	r2, #4294967295
 8001592:	e000      	b.n	8001596 <unwraping_update+0x3a>
 8001594:	2201      	movs	r2, #1
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <unwraping_update+0x78>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4413      	add	r3, r2
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <unwraping_update+0x78>)
 800159e:	6013      	str	r3, [r2, #0]
	}

	pre_enc_cnt = cur_enc_cnt;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <unwraping_update+0x70>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <unwraping_update+0x74>)
 80015a6:	6013      	str	r3, [r2, #0]
	return enc_cnt * k + cur_enc_cnt;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <unwraping_update+0x78>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	029b      	lsls	r3, r3, #10
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <unwraping_update+0x70>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40010000 	.word	0x40010000
 80015cc:	2000267c 	.word	0x2000267c
 80015d0:	2000256c 	.word	0x2000256c
 80015d4:	20002570 	.word	0x20002570

080015d8 <velocity_update>:

double velocity_update(int cur_pos){
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	static int pre_pos = 0;
	static int pre_time = 0;
	static int cur_time = 0;

	cur_time = micros();
 80015e0:	f000 fc56 	bl	8001e90 <micros>
 80015e4:	4603      	mov	r3, r0
 80015e6:	460c      	mov	r4, r1
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <velocity_update+0x70>)
 80015ec:	601a      	str	r2, [r3, #0]

	double velo = (double)(cur_pos - pre_pos)/(cur_time - pre_time);
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <velocity_update+0x74>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ff40 	bl	800047c <__aeabi_i2d>
 80015fc:	4604      	mov	r4, r0
 80015fe:	460d      	mov	r5, r1
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <velocity_update+0x70>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <velocity_update+0x78>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff36 	bl	800047c <__aeabi_i2d>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4620      	mov	r0, r4
 8001616:	4629      	mov	r1, r5
 8001618:	f7ff f8c4 	bl	80007a4 <__aeabi_ddiv>
 800161c:	4603      	mov	r3, r0
 800161e:	460c      	mov	r4, r1
 8001620:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pre_pos = cur_pos;
 8001624:	4a09      	ldr	r2, [pc, #36]	; (800164c <velocity_update+0x74>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
	pre_time = cur_time;
 800162a:	4b07      	ldr	r3, [pc, #28]	; (8001648 <velocity_update+0x70>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a08      	ldr	r2, [pc, #32]	; (8001650 <velocity_update+0x78>)
 8001630:	6013      	str	r3, [r2, #0]

	return velo;
 8001632:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001636:	ec44 3b17 	vmov	d7, r3, r4

}
 800163a:	eeb0 0a47 	vmov.f32	s0, s14
 800163e:	eef0 0a67 	vmov.f32	s1, s15
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bdb0      	pop	{r4, r5, r7, pc}
 8001648:	20002680 	.word	0x20002680
 800164c:	20002684 	.word	0x20002684
 8001650:	20002688 	.word	0x20002688
 8001654:	00000000 	.word	0x00000000

08001658 <ppms_to_rpm>:

double ppms_to_rpm(double input){
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	ed87 0b00 	vstr	d0, [r7]
	return input*60e6/(enc_cnt);
 8001662:	a30e      	add	r3, pc, #56	; (adr r3, 800169c <ppms_to_rpm+0x44>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800166c:	f7fe ff70 	bl	8000550 <__aeabi_dmul>
 8001670:	4603      	mov	r3, r0
 8001672:	460c      	mov	r4, r1
 8001674:	4618      	mov	r0, r3
 8001676:	4621      	mov	r1, r4
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <ppms_to_rpm+0x40>)
 800167e:	f7ff f891 	bl	80007a4 <__aeabi_ddiv>
 8001682:	4603      	mov	r3, r0
 8001684:	460c      	mov	r4, r1
 8001686:	ec44 3b17 	vmov	d7, r3, r4
}
 800168a:	eeb0 0a47 	vmov.f32	s0, s14
 800168e:	eef0 0a67 	vmov.f32	s1, s15
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bd90      	pop	{r4, r7, pc}
 8001698:	40a80000 	.word	0x40a80000
 800169c:	00000000 	.word	0x00000000
 80016a0:	418c9c38 	.word	0x418c9c38

080016a4 <low_pass_process>:

double low_pass_process(LowPass *lowpass,double input){
 80016a4:	b5b0      	push	{r4, r5, r7, lr}
 80016a6:	b08c      	sub	sp, #48	; 0x30
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	ed87 0b00 	vstr	d0, [r7]

	double cur_time = micros();
 80016b0:	f000 fbee 	bl	8001e90 <micros>
 80016b4:	4603      	mov	r3, r0
 80016b6:	460c      	mov	r4, r1
 80016b8:	4618      	mov	r0, r3
 80016ba:	4621      	mov	r1, r4
 80016bc:	f7fe ff12 	bl	80004e4 <__aeabi_ul2d>
 80016c0:	4603      	mov	r3, r0
 80016c2:	460c      	mov	r4, r1
 80016c4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	double delta_t = cur_time - lowpass->pre_time;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80016ce:	461a      	mov	r2, r3
 80016d0:	4623      	mov	r3, r4
 80016d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016d6:	f7fe fd83 	bl	80001e0 <__aeabi_dsub>
 80016da:	4603      	mov	r3, r0
 80016dc:	460c      	mov	r4, r1
 80016de:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double k = (lowpass->Wc*delta_t)/(2+ lowpass->Wc*delta_t);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80016e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016ec:	f7fe ff30 	bl	8000550 <__aeabi_dmul>
 80016f0:	4603      	mov	r3, r0
 80016f2:	460c      	mov	r4, r1
 80016f4:	4625      	mov	r5, r4
 80016f6:	461c      	mov	r4, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80016fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001702:	f7fe ff25 	bl	8000550 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001716:	f7fe fd65 	bl	80001e4 <__adddf3>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4620      	mov	r0, r4
 8001720:	4629      	mov	r1, r5
 8001722:	f7ff f83f 	bl	80007a4 <__aeabi_ddiv>
 8001726:	4603      	mov	r3, r0
 8001728:	460c      	mov	r4, r1
 800172a:	e9c7 3406 	strd	r3, r4, [r7, #24]

	double output = (1 - 2*k)*(lowpass->pre_output) +k*(input+lowpass->pre_input);
 800172e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	f7fe fd55 	bl	80001e4 <__adddf3>
 800173a:	4603      	mov	r3, r0
 800173c:	460c      	mov	r4, r1
 800173e:	461a      	mov	r2, r3
 8001740:	4623      	mov	r3, r4
 8001742:	f04f 0000 	mov.w	r0, #0
 8001746:	4922      	ldr	r1, [pc, #136]	; (80017d0 <low_pass_process+0x12c>)
 8001748:	f7fe fd4a 	bl	80001e0 <__aeabi_dsub>
 800174c:	4603      	mov	r3, r0
 800174e:	460c      	mov	r4, r1
 8001750:	4618      	mov	r0, r3
 8001752:	4621      	mov	r1, r4
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800175a:	461a      	mov	r2, r3
 800175c:	4623      	mov	r3, r4
 800175e:	f7fe fef7 	bl	8000550 <__aeabi_dmul>
 8001762:	4603      	mov	r3, r0
 8001764:	460c      	mov	r4, r1
 8001766:	4625      	mov	r5, r4
 8001768:	461c      	mov	r4, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001774:	f7fe fd36 	bl	80001e4 <__adddf3>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001784:	f7fe fee4 	bl	8000550 <__aeabi_dmul>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4620      	mov	r0, r4
 800178e:	4629      	mov	r1, r5
 8001790:	f7fe fd28 	bl	80001e4 <__adddf3>
 8001794:	4603      	mov	r3, r0
 8001796:	460c      	mov	r4, r1
 8001798:	e9c7 3404 	strd	r3, r4, [r7, #16]

	lowpass->pre_time = cur_time;
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80017a2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	lowpass->pre_input = input;
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017ac:	e9c2 3400 	strd	r3, r4, [r2]
	lowpass->pre_output = output;
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80017b6:	e9c2 3402 	strd	r3, r4, [r2, #8]

	return output;
 80017ba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80017be:	ec44 3b17 	vmov	d7, r3, r4
}
 80017c2:	eeb0 0a47 	vmov.f32	s0, s14
 80017c6:	eef0 0a67 	vmov.f32	s1, s15
 80017ca:	3730      	adds	r7, #48	; 0x30
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bdb0      	pop	{r4, r5, r7, pc}
 80017d0:	3ff00000 	.word	0x3ff00000

080017d4 <pid_update>:
	P = (1-K*H)*P+Q;

	return U_hat;
}

double pid_update(PID *pid,double setpoint,double mea){
 80017d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017d8:	b091      	sub	sp, #68	; 0x44
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6178      	str	r0, [r7, #20]
 80017de:	ed87 0b02 	vstr	d0, [r7, #8]
 80017e2:	ed87 1b00 	vstr	d1, [r7]

	//Error
	double error = setpoint - mea;
 80017e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017ee:	f7fe fcf7 	bl	80001e0 <__aeabi_dsub>
 80017f2:	4603      	mov	r3, r0
 80017f4:	460c      	mov	r4, r1
 80017f6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	//Proportional
	double proportional = pid->kp * error;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001800:	461a      	mov	r2, r3
 8001802:	4623      	mov	r3, r4
 8001804:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001808:	f7fe fea2 	bl	8000550 <__aeabi_dmul>
 800180c:	4603      	mov	r3, r0
 800180e:	460c      	mov	r4, r1
 8001810:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	//Integral
	pid->integral = pid->integral + 0.5f * pid->ki * pid->dt * (error + pid->pre_error);
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	e9d3 890e 	ldrd	r8, r9, [r3, #56]	; 0x38
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	4ba0      	ldr	r3, [pc, #640]	; (8001aa8 <pid_update+0x2d4>)
 8001826:	f7fe fe93 	bl	8000550 <__aeabi_dmul>
 800182a:	4603      	mov	r3, r0
 800182c:	460c      	mov	r4, r1
 800182e:	4618      	mov	r0, r3
 8001830:	4621      	mov	r1, r4
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8001838:	461a      	mov	r2, r3
 800183a:	4623      	mov	r3, r4
 800183c:	f7fe fe88 	bl	8000550 <__aeabi_dmul>
 8001840:	4603      	mov	r3, r0
 8001842:	460c      	mov	r4, r1
 8001844:	469a      	mov	sl, r3
 8001846:	46a3      	mov	fp, r4
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800184e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001852:	f7fe fcc7 	bl	80001e4 <__adddf3>
 8001856:	4603      	mov	r3, r0
 8001858:	460c      	mov	r4, r1
 800185a:	461a      	mov	r2, r3
 800185c:	4623      	mov	r3, r4
 800185e:	4650      	mov	r0, sl
 8001860:	4659      	mov	r1, fp
 8001862:	f7fe fe75 	bl	8000550 <__aeabi_dmul>
 8001866:	4603      	mov	r3, r0
 8001868:	460c      	mov	r4, r1
 800186a:	461a      	mov	r2, r3
 800186c:	4623      	mov	r3, r4
 800186e:	4640      	mov	r0, r8
 8001870:	4649      	mov	r1, r9
 8001872:	f7fe fcb7 	bl	80001e4 <__adddf3>
 8001876:	4603      	mov	r3, r0
 8001878:	460c      	mov	r4, r1
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	//calculate integral anti wind up
	double max_i,min_i;

	max_i = pid->max > proportional ? pid->max - proportional : 0;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8001886:	461a      	mov	r2, r3
 8001888:	4623      	mov	r3, r4
 800188a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800188e:	f7ff f8d1 	bl	8000a34 <__aeabi_dcmplt>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d009      	beq.n	80018ac <pid_update+0xd8>
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800189e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018a2:	f7fe fc9d 	bl	80001e0 <__aeabi_dsub>
 80018a6:	4603      	mov	r3, r0
 80018a8:	460c      	mov	r4, r1
 80018aa:	e003      	b.n	80018b4 <pid_update+0xe0>
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	f04f 0400 	mov.w	r4, #0
 80018b4:	e9c7 3408 	strd	r3, r4, [r7, #32]
	min_i = pid->min < proportional ? pid->min - proportional : 0;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80018be:	461a      	mov	r2, r3
 80018c0:	4623      	mov	r3, r4
 80018c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018c6:	f7ff f8d3 	bl	8000a70 <__aeabi_dcmpgt>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d009      	beq.n	80018e4 <pid_update+0x110>
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80018d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018da:	f7fe fc81 	bl	80001e0 <__aeabi_dsub>
 80018de:	4603      	mov	r3, r0
 80018e0:	460c      	mov	r4, r1
 80018e2:	e003      	b.n	80018ec <pid_update+0x118>
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	f04f 0400 	mov.w	r4, #0
 80018ec:	e9c7 3406 	strd	r3, r4, [r7, #24]


	//integral clamp
	if(pid->integral > max_i){
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80018f6:	461a      	mov	r2, r3
 80018f8:	4623      	mov	r3, r4
 80018fa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018fe:	f7ff f899 	bl	8000a34 <__aeabi_dcmplt>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <pid_update+0x140>
		pid->integral = max_i;
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800190e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8001912:	e010      	b.n	8001936 <pid_update+0x162>
	}
	else if(pid->integral < min_i){
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800191a:	461a      	mov	r2, r3
 800191c:	4623      	mov	r3, r4
 800191e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001922:	f7ff f8a5 	bl	8000a70 <__aeabi_dcmpgt>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d004      	beq.n	8001936 <pid_update+0x162>
		pid->integral = min_i;
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001932:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	}

	//Derivative
	pid->diff = -(2.0f * pid->kd * (mea - pid->pre_mea) + (2.0f * pid->tau - pid->dt) * pid->diff) / (2.0f * pid->tau + pid->dt);
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	f7fe fc50 	bl	80001e4 <__adddf3>
 8001944:	4603      	mov	r3, r0
 8001946:	460c      	mov	r4, r1
 8001948:	4698      	mov	r8, r3
 800194a:	46a1      	mov	r9, r4
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8001952:	461a      	mov	r2, r3
 8001954:	4623      	mov	r3, r4
 8001956:	e9d7 0100 	ldrd	r0, r1, [r7]
 800195a:	f7fe fc41 	bl	80001e0 <__aeabi_dsub>
 800195e:	4603      	mov	r3, r0
 8001960:	460c      	mov	r4, r1
 8001962:	461a      	mov	r2, r3
 8001964:	4623      	mov	r3, r4
 8001966:	4640      	mov	r0, r8
 8001968:	4649      	mov	r1, r9
 800196a:	f7fe fdf1 	bl	8000550 <__aeabi_dmul>
 800196e:	4603      	mov	r3, r0
 8001970:	460c      	mov	r4, r1
 8001972:	4698      	mov	r8, r3
 8001974:	46a1      	mov	r9, r4
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	f7fe fc30 	bl	80001e4 <__adddf3>
 8001984:	4603      	mov	r3, r0
 8001986:	460c      	mov	r4, r1
 8001988:	4618      	mov	r0, r3
 800198a:	4621      	mov	r1, r4
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8001992:	461a      	mov	r2, r3
 8001994:	4623      	mov	r3, r4
 8001996:	f7fe fc23 	bl	80001e0 <__aeabi_dsub>
 800199a:	4603      	mov	r3, r0
 800199c:	460c      	mov	r4, r1
 800199e:	4618      	mov	r0, r3
 80019a0:	4621      	mov	r1, r4
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 80019a8:	461a      	mov	r2, r3
 80019aa:	4623      	mov	r3, r4
 80019ac:	f7fe fdd0 	bl	8000550 <__aeabi_dmul>
 80019b0:	4603      	mov	r3, r0
 80019b2:	460c      	mov	r4, r1
 80019b4:	461a      	mov	r2, r3
 80019b6:	4623      	mov	r3, r4
 80019b8:	4640      	mov	r0, r8
 80019ba:	4649      	mov	r1, r9
 80019bc:	f7fe fc12 	bl	80001e4 <__adddf3>
 80019c0:	4603      	mov	r3, r0
 80019c2:	460c      	mov	r4, r1
 80019c4:	461d      	mov	r5, r3
 80019c6:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	f7fe fc06 	bl	80001e4 <__adddf3>
 80019d8:	4603      	mov	r3, r0
 80019da:	460c      	mov	r4, r1
 80019dc:	4618      	mov	r0, r3
 80019de:	4621      	mov	r1, r4
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80019e6:	461a      	mov	r2, r3
 80019e8:	4623      	mov	r3, r4
 80019ea:	f7fe fbfb 	bl	80001e4 <__adddf3>
 80019ee:	4603      	mov	r3, r0
 80019f0:	460c      	mov	r4, r1
 80019f2:	461a      	mov	r2, r3
 80019f4:	4623      	mov	r3, r4
 80019f6:	4628      	mov	r0, r5
 80019f8:	4631      	mov	r1, r6
 80019fa:	f7fe fed3 	bl	80007a4 <__aeabi_ddiv>
 80019fe:	4603      	mov	r3, r0
 8001a00:	460c      	mov	r4, r1
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

	double output = proportional + pid->integral + pid->diff;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001a0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a12:	f7fe fbe7 	bl	80001e4 <__adddf3>
 8001a16:	4603      	mov	r3, r0
 8001a18:	460c      	mov	r4, r1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 8001a24:	461a      	mov	r2, r3
 8001a26:	4623      	mov	r3, r4
 8001a28:	f7fe fbdc 	bl	80001e4 <__adddf3>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	460c      	mov	r4, r1
 8001a30:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

	if(output > pid->max){
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4623      	mov	r3, r4
 8001a3e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a42:	f7ff f815 	bl	8000a70 <__aeabi_dcmpgt>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <pid_update+0x284>
		output = pid->max;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8001a52:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 8001a56:	e010      	b.n	8001a7a <pid_update+0x2a6>
	}
	else if(output < pid->min){
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4623      	mov	r3, r4
 8001a62:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a66:	f7fe ffe5 	bl	8000a34 <__aeabi_dcmplt>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d004      	beq.n	8001a7a <pid_update+0x2a6>
		output = pid->min;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8001a76:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	}

	pid->pre_error = error;
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001a80:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	pid->pre_mea = mea;
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a8a:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50

	return output;
 8001a8e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001a92:	ec44 3b17 	vmov	d7, r3, r4

}
 8001a96:	eeb0 0a47 	vmov.f32	s0, s14
 8001a9a:	eef0 0a67 	vmov.f32	s1, s15
 8001a9e:	3744      	adds	r7, #68	; 0x44
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aa6:	bf00      	nop
 8001aa8:	3fe00000 	.word	0x3fe00000
 8001aac:	00000000 	.word	0x00000000

08001ab0 <targectory_cal>:


void targectory_cal(double *datas,int *n,int start_pos,int stop_pos,double dt){
 8001ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ab4:	b09f      	sub	sp, #124	; 0x7c
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6178      	str	r0, [r7, #20]
 8001aba:	6139      	str	r1, [r7, #16]
 8001abc:	60fa      	str	r2, [r7, #12]
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	ed87 0b00 	vstr	d0, [r7]

    double v_max = 10*6;            // degree per sec
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	4b7f      	ldr	r3, [pc, #508]	; (8001cc8 <targectory_cal+0x218>)
 8001aca:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    double a_max = 0.5 * 57.296;    // degree per sec^2
 8001ace:	a37c      	add	r3, pc, #496	; (adr r3, 8001cc0 <targectory_cal+0x210>)
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

    int dis = (stop_pos - start_pos +360)%360;
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ae2:	4a7a      	ldr	r2, [pc, #488]	; (8001ccc <targectory_cal+0x21c>)
 8001ae4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ae8:	441a      	add	r2, r3
 8001aea:	1211      	asrs	r1, r2, #8
 8001aec:	17da      	asrs	r2, r3, #31
 8001aee:	1a8a      	subs	r2, r1, r2
 8001af0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001af4:	fb01 f202 	mul.w	r2, r1, r2
 8001af8:	1a9b      	subs	r3, r3, r2
 8001afa:	677b      	str	r3, [r7, #116]	; 0x74
    int inverse = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	673b      	str	r3, [r7, #112]	; 0x70
    if ((start_pos - stop_pos +360)%360 < dis){
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b0a:	4a70      	ldr	r2, [pc, #448]	; (8001ccc <targectory_cal+0x21c>)
 8001b0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b10:	441a      	add	r2, r3
 8001b12:	1211      	asrs	r1, r2, #8
 8001b14:	17da      	asrs	r2, r3, #31
 8001b16:	1a8a      	subs	r2, r1, r2
 8001b18:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001b1c:	fb01 f202 	mul.w	r2, r1, r2
 8001b20:	1a9a      	subs	r2, r3, r2
 8001b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b24:	4293      	cmp	r3, r2
 8001b26:	dd13      	ble.n	8001b50 <targectory_cal+0xa0>
        inverse = 1;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	673b      	str	r3, [r7, #112]	; 0x70
        dis = (start_pos - stop_pos +360)%360;
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b36:	4a65      	ldr	r2, [pc, #404]	; (8001ccc <targectory_cal+0x21c>)
 8001b38:	fb82 1203 	smull	r1, r2, r2, r3
 8001b3c:	441a      	add	r2, r3
 8001b3e:	1211      	asrs	r1, r2, #8
 8001b40:	17da      	asrs	r2, r3, #31
 8001b42:	1a8a      	subs	r2, r1, r2
 8001b44:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001b48:	fb01 f202 	mul.w	r2, r1, r2
 8001b4c:	1a9b      	subs	r3, r3, r2
 8001b4e:	677b      	str	r3, [r7, #116]	; 0x74
    }
    start_pos = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
    stop_pos = dis;
 8001b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b56:	60bb      	str	r3, [r7, #8]

    double tf = 5;
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	4b5c      	ldr	r3, [pc, #368]	; (8001cd0 <targectory_cal+0x220>)
 8001b5e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double a0 = 0;
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double a1 = 0;
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double a2 = 0;
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double a3 = 10*((double)dis)/(tf*tf*tf);
 8001b86:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b88:	f7fe fc78 	bl	800047c <__aeabi_i2d>
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <targectory_cal+0x224>)
 8001b92:	f7fe fcdd 	bl	8000550 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4690      	mov	r8, r2
 8001b9c:	4699      	mov	r9, r3
 8001b9e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ba2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001ba6:	f7fe fcd3 	bl	8000550 <__aeabi_dmul>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4610      	mov	r0, r2
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bb6:	f7fe fccb 	bl	8000550 <__aeabi_dmul>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4640      	mov	r0, r8
 8001bc0:	4649      	mov	r1, r9
 8001bc2:	f7fe fdef 	bl	80007a4 <__aeabi_ddiv>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double a4 = -15*((double)dis)/(tf*tf*tf*tf);
 8001bce:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001bd0:	f7fe fc54 	bl	800047c <__aeabi_i2d>
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <targectory_cal+0x228>)
 8001bda:	f7fe fcb9 	bl	8000550 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4690      	mov	r8, r2
 8001be4:	4699      	mov	r9, r3
 8001be6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001bee:	f7fe fcaf 	bl	8000550 <__aeabi_dmul>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bfe:	f7fe fca7 	bl	8000550 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c0e:	f7fe fc9f 	bl	8000550 <__aeabi_dmul>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4640      	mov	r0, r8
 8001c18:	4649      	mov	r1, r9
 8001c1a:	f7fe fdc3 	bl	80007a4 <__aeabi_ddiv>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double a5 = 6*((double)dis)/(tf*tf*tf*tf*tf);
 8001c26:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001c28:	f7fe fc28 	bl	800047c <__aeabi_i2d>
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <targectory_cal+0x22c>)
 8001c32:	f7fe fc8d 	bl	8000550 <__aeabi_dmul>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	4699      	mov	r9, r3
 8001c3e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001c46:	f7fe fc83 	bl	8000550 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c56:	f7fe fc7b 	bl	8000550 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c66:	f7fe fc73 	bl	8000550 <__aeabi_dmul>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c76:	f7fe fc6b 	bl	8000550 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4640      	mov	r0, r8
 8001c80:	4649      	mov	r1, r9
 8001c82:	f7fe fd8f 	bl	80007a4 <__aeabi_ddiv>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    *n = (int)(tf/dt);
 8001c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001c96:	f7fe fd85 	bl	80007a4 <__aeabi_ddiv>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f7fe feef 	bl	8000a84 <__aeabi_d2iz>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	601a      	str	r2, [r3, #0]

    double t = 0;
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    for(int i =0;i < *n ; i++){
 8001cb8:	2300      	movs	r3, #0
 8001cba:	667b      	str	r3, [r7, #100]	; 0x64
 8001cbc:	e0ba      	b.n	8001e34 <targectory_cal+0x384>
 8001cbe:	bf00      	nop
 8001cc0:	53f7ced9 	.word	0x53f7ced9
 8001cc4:	403ca5e3 	.word	0x403ca5e3
 8001cc8:	404e0000 	.word	0x404e0000
 8001ccc:	b60b60b7 	.word	0xb60b60b7
 8001cd0:	40140000 	.word	0x40140000
 8001cd4:	40240000 	.word	0x40240000
 8001cd8:	c02e0000 	.word	0xc02e0000
 8001cdc:	40180000 	.word	0x40180000
        datas[i] = a1 + 2*a2*t + 3*a3*t*t + 4*a4*t*t*t + 5*a5*t*t*t*t;
 8001ce0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	f7fe fa7c 	bl	80001e4 <__adddf3>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001cf8:	f7fe fc2a 	bl	8000550 <__aeabi_dmul>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d08:	f7fe fa6c 	bl	80001e4 <__adddf3>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4690      	mov	r8, r2
 8001d12:	4699      	mov	r9, r3
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	4b5a      	ldr	r3, [pc, #360]	; (8001e84 <targectory_cal+0x3d4>)
 8001d1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d1e:	f7fe fc17 	bl	8000550 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d2e:	f7fe fc0f 	bl	8000550 <__aeabi_dmul>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d3e:	f7fe fc07 	bl	8000550 <__aeabi_dmul>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4640      	mov	r0, r8
 8001d48:	4649      	mov	r1, r9
 8001d4a:	f7fe fa4b 	bl	80001e4 <__adddf3>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4690      	mov	r8, r2
 8001d54:	4699      	mov	r9, r3
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <targectory_cal+0x3d8>)
 8001d5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d60:	f7fe fbf6 	bl	8000550 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d70:	f7fe fbee 	bl	8000550 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d80:	f7fe fbe6 	bl	8000550 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d90:	f7fe fbde 	bl	8000550 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4640      	mov	r0, r8
 8001d9a:	4649      	mov	r1, r9
 8001d9c:	f7fe fa22 	bl	80001e4 <__adddf3>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4690      	mov	r8, r2
 8001da6:	4699      	mov	r9, r3
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <targectory_cal+0x3dc>)
 8001dae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001db2:	f7fe fbcd 	bl	8000550 <__aeabi_dmul>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001dc2:	f7fe fbc5 	bl	8000550 <__aeabi_dmul>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001dd2:	f7fe fbbd 	bl	8000550 <__aeabi_dmul>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001de2:	f7fe fbb5 	bl	8000550 <__aeabi_dmul>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001df2:	f7fe fbad 	bl	8000550 <__aeabi_dmul>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	18d6      	adds	r6, r2, r3
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4640      	mov	r0, r8
 8001e0c:	4649      	mov	r1, r9
 8001e0e:	f7fe f9e9 	bl	80001e4 <__adddf3>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	e9c6 2300 	strd	r2, r3, [r6]
        t+=dt;
 8001e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e22:	f7fe f9df 	bl	80001e4 <__adddf3>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    for(int i =0;i < *n ; i++){
 8001e2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e30:	3301      	adds	r3, #1
 8001e32:	667b      	str	r3, [r7, #100]	; 0x64
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	f6ff af50 	blt.w	8001ce0 <targectory_cal+0x230>
    }

    if(inverse){
 8001e40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d019      	beq.n	8001e7a <targectory_cal+0x3ca>
        for(int i = 0;i<*n;i++){
 8001e46:	2300      	movs	r3, #0
 8001e48:	663b      	str	r3, [r7, #96]	; 0x60
 8001e4a:	e011      	b.n	8001e70 <targectory_cal+0x3c0>
            datas[i] *= -1;
 8001e4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	4413      	add	r3, r2
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001e5a:	00c9      	lsls	r1, r1, #3
 8001e5c:	6978      	ldr	r0, [r7, #20]
 8001e5e:	4401      	add	r1, r0
 8001e60:	4614      	mov	r4, r2
 8001e62:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e66:	e9c1 4500 	strd	r4, r5, [r1]
        for(int i = 0;i<*n;i++){
 8001e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	663b      	str	r3, [r7, #96]	; 0x60
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e76:	429a      	cmp	r2, r3
 8001e78:	dbe8      	blt.n	8001e4c <targectory_cal+0x39c>
        }
    }

}
 8001e7a:	bf00      	nop
 8001e7c:	377c      	adds	r7, #124	; 0x7c
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e84:	40080000 	.word	0x40080000
 8001e88:	40100000 	.word	0x40100000
 8001e8c:	40140000 	.word	0x40140000

08001e90 <micros>:





uint64_t micros(){
 8001e90:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8001e94:	af00      	add	r7, sp, #0
	return _micro + TIM5->CNT;
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <micros+0x2c>)
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <micros+0x30>)
 8001ea2:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001ea6:	eb1b 0301 	adds.w	r3, fp, r1
 8001eaa:	eb4c 0402 	adc.w	r4, ip, r2
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	4621      	mov	r1, r4
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40000c00 	.word	0x40000c00
 8001ec0:	20000150 	.word	0x20000150

08001ec4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001ec4:	b490      	push	{r4, r7}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

	if(htim == &htim5){
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d109      	bne.n	8001ee8 <HAL_TIM_PeriodElapsedCallback+0x24>
		_micro += ((uint64_t)1<<32)-1;
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ed6:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001eda:	f111 33ff 	adds.w	r3, r1, #4294967295
 8001ede:	f142 0400 	adc.w	r4, r2, #0
 8001ee2:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ee4:	e9c2 3400 	strd	r3, r4, [r2]
	}

}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc90      	pop	{r4, r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	200026fc 	.word	0x200026fc
 8001ef8:	20000150 	.word	0x20000150

08001efc <UARTInit>:


//UART protocol

void UARTInit(UARTStucrture *uart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <UARTInit+0x4c>)
 8001f06:	88db      	ldrh	r3, [r3, #6]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f004 fa84 	bl	8006418 <calloc>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <UARTInit+0x4c>)
 8001f1a:	889b      	ldrh	r3, [r3, #4]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f004 fa7a 	bl	8006418 <calloc>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	81da      	strh	r2, [r3, #14]

}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000134 	.word	0x20000134

08001f4c <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6919      	ldr	r1, [r3, #16]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	88db      	ldrh	r3, [r3, #6]
 8001f60:	461a      	mov	r2, r3
 8001f62:	f003 fb31 	bl	80055c8 <HAL_UART_Receive_DMA>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	88db      	ldrh	r3, [r3, #6]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	1ad3      	subs	r3, r2, r3
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8001f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa0:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	8a9b      	ldrh	r3, [r3, #20]
 8001fa6:	461c      	mov	r4, r3
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ffe0 	bl	8001f6e <UARTGetRxHead>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	429c      	cmp	r4, r3
 8001fb2:	d013      	beq.n	8001fdc <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	8a92      	ldrh	r2, [r2, #20]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	8a9b      	ldrh	r3, [r3, #20]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	88d2      	ldrh	r2, [r2, #6]
 8001fcc:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fd0:	fb02 f201 	mul.w	r2, r2, r1
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8001fdc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd90      	pop	{r4, r7, pc}

08001fe8 <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	d13d      	bne.n	800207a <UARTTxDumpBuffer+0x92>
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <UARTTxDumpBuffer+0x9c>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d139      	bne.n	800207a <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 8002006:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <UARTTxDumpBuffer+0x9c>)
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	89da      	ldrh	r2, [r3, #14]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	899b      	ldrh	r3, [r3, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d02d      	beq.n	8002074 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	89da      	ldrh	r2, [r3, #14]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002020:	429a      	cmp	r2, r3
 8002022:	d906      	bls.n	8002032 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	89da      	ldrh	r2, [r3, #14]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	b29b      	uxth	r3, r3
 8002030:	e005      	b.n	800203e <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	889a      	ldrh	r2, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	b29b      	uxth	r3, r3
 800203e:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	8992      	ldrh	r2, [r2, #12]
 800204c:	4413      	add	r3, r2
 800204e:	89fa      	ldrh	r2, [r7, #14]
 8002050:	4619      	mov	r1, r3
 8002052:	f003 fa4d 	bl	80054f0 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	899b      	ldrh	r3, [r3, #12]
 800205a:	461a      	mov	r2, r3
 800205c:	89fb      	ldrh	r3, [r7, #14]
 800205e:	4413      	add	r3, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	8892      	ldrh	r2, [r2, #4]
 8002064:	fb93 f1f2 	sdiv	r1, r3, r2
 8002068:	fb02 f201 	mul.w	r2, r2, r1
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	b29a      	uxth	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <UARTTxDumpBuffer+0x9c>)
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
	}
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	2000268c 	.word	0x2000268c

08002088 <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	4613      	mov	r3, r2
 8002094:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	889b      	ldrh	r3, [r3, #4]
 800209a:	88fa      	ldrh	r2, [r7, #6]
 800209c:	4293      	cmp	r3, r2
 800209e:	bf28      	it	cs
 80020a0:	4613      	movcs	r3, r2
 80020a2:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80020a4:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	889b      	ldrh	r3, [r3, #4]
 80020aa:	4619      	mov	r1, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	89db      	ldrh	r3, [r3, #14]
 80020b0:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80020b2:	4293      	cmp	r3, r2
 80020b4:	bfa8      	it	ge
 80020b6:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 80020b8:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	89d2      	ldrh	r2, [r2, #14]
 80020c2:	4413      	add	r3, r2
 80020c4:	8aba      	ldrh	r2, [r7, #20]
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f004 f9d7 	bl	800647c <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	89db      	ldrh	r3, [r3, #14]
 80020d2:	461a      	mov	r2, r3
 80020d4:	8afb      	ldrh	r3, [r7, #22]
 80020d6:	4413      	add	r3, r2
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	8892      	ldrh	r2, [r2, #4]
 80020dc:	fb93 f1f2 	sdiv	r1, r3, r2
 80020e0:	fb02 f201 	mul.w	r2, r2, r1
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 80020ec:	8afa      	ldrh	r2, [r7, #22]
 80020ee:	8abb      	ldrh	r3, [r7, #20]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d00a      	beq.n	800210a <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6898      	ldr	r0, [r3, #8]
 80020f8:	8abb      	ldrh	r3, [r7, #20]
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 80020fe:	8afa      	ldrh	r2, [r7, #22]
 8002100:	8abb      	ldrh	r3, [r7, #20]
 8002102:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002104:	461a      	mov	r2, r3
 8002106:	f004 f9b9 	bl	800647c <memcpy>
	}
	UARTTxDumpBuffer(uart);
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f7ff ff6c 	bl	8001fe8 <UARTTxDumpBuffer>

}
 8002110:	bf00      	nop
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <uart_protocal>:
static uart_state state = state_idle;
static uint8_t sum = 0,debug = 0;
static uint8_t datas[256] = {0},data_ind = 0,n_data = 0;
static uint8_t mode = 0;

void uart_protocal(int16_t input,UARTStucrture *uart){
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b097      	sub	sp, #92	; 0x5c
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	80fb      	strh	r3, [r7, #6]

	debug = input;
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	4bae      	ldr	r3, [pc, #696]	; (80023e4 <uart_protocal+0x2cc>)
 800212a:	701a      	strb	r2, [r3, #0]

	switch (state) {
 800212c:	4bae      	ldr	r3, [pc, #696]	; (80023e8 <uart_protocal+0x2d0>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b07      	cmp	r3, #7
 8002132:	f200 8318 	bhi.w	8002766 <uart_protocal+0x64e>
 8002136:	a201      	add	r2, pc, #4	; (adr r2, 800213c <uart_protocal+0x24>)
 8002138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213c:	0800215d 	.word	0x0800215d
 8002140:	08002767 	.word	0x08002767
 8002144:	08002767 	.word	0x08002767
 8002148:	0800228f 	.word	0x0800228f
 800214c:	080022af 	.word	0x080022af
 8002150:	080022fd 	.word	0x080022fd
 8002154:	08002739 	.word	0x08002739
 8002158:	08002749 	.word	0x08002749
		case state_idle:
			sum = data_ind = 0;
 800215c:	4ba3      	ldr	r3, [pc, #652]	; (80023ec <uart_protocal+0x2d4>)
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
 8002162:	4ba2      	ldr	r3, [pc, #648]	; (80023ec <uart_protocal+0x2d4>)
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	4ba2      	ldr	r3, [pc, #648]	; (80023f0 <uart_protocal+0x2d8>)
 8002168:	701a      	strb	r2, [r3, #0]
			if(input >= 0b10010001 && input <= 0b10011110){
 800216a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800216e:	2b90      	cmp	r3, #144	; 0x90
 8002170:	dd7b      	ble.n	800226a <uart_protocal+0x152>
 8002172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002176:	2b9e      	cmp	r3, #158	; 0x9e
 8002178:	dc77      	bgt.n	800226a <uart_protocal+0x152>
				mode = input & 0b1111;
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	b2da      	uxtb	r2, r3
 8002184:	4b9b      	ldr	r3, [pc, #620]	; (80023f4 <uart_protocal+0x2dc>)
 8002186:	701a      	strb	r2, [r3, #0]
				sum += input;
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	4b98      	ldr	r3, [pc, #608]	; (80023f0 <uart_protocal+0x2d8>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4413      	add	r3, r2
 8002192:	b2da      	uxtb	r2, r3
 8002194:	4b96      	ldr	r3, [pc, #600]	; (80023f0 <uart_protocal+0x2d8>)
 8002196:	701a      	strb	r2, [r3, #0]
				switch (mode){
 8002198:	4b96      	ldr	r3, [pc, #600]	; (80023f4 <uart_protocal+0x2dc>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	3b01      	subs	r3, #1
 800219e:	2b0d      	cmp	r3, #13
 80021a0:	d873      	bhi.n	800228a <uart_protocal+0x172>
 80021a2:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <uart_protocal+0x90>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	080021e1 	.word	0x080021e1
 80021ac:	080021ef 	.word	0x080021ef
 80021b0:	080021f7 	.word	0x080021f7
 80021b4:	080021ff 	.word	0x080021ff
 80021b8:	0800220d 	.word	0x0800220d
 80021bc:	0800221b 	.word	0x0800221b
 80021c0:	08002229 	.word	0x08002229
 80021c4:	08002231 	.word	0x08002231
 80021c8:	08002239 	.word	0x08002239
 80021cc:	08002241 	.word	0x08002241
 80021d0:	08002249 	.word	0x08002249
 80021d4:	08002251 	.word	0x08002251
 80021d8:	08002259 	.word	0x08002259
 80021dc:	08002261 	.word	0x08002261
					case 1:n_data = 2;state = state_data_frame;break;
 80021e0:	4b85      	ldr	r3, [pc, #532]	; (80023f8 <uart_protocal+0x2e0>)
 80021e2:	2202      	movs	r2, #2
 80021e4:	701a      	strb	r2, [r3, #0]
 80021e6:	4b80      	ldr	r3, [pc, #512]	; (80023e8 <uart_protocal+0x2d0>)
 80021e8:	2204      	movs	r2, #4
 80021ea:	701a      	strb	r2, [r3, #0]
 80021ec:	e03c      	b.n	8002268 <uart_protocal+0x150>
					case 2:state = state_check_sum;break;
 80021ee:	4b7e      	ldr	r3, [pc, #504]	; (80023e8 <uart_protocal+0x2d0>)
 80021f0:	2205      	movs	r2, #5
 80021f2:	701a      	strb	r2, [r3, #0]
 80021f4:	e038      	b.n	8002268 <uart_protocal+0x150>
					case 3:state = state_check_sum;break;
 80021f6:	4b7c      	ldr	r3, [pc, #496]	; (80023e8 <uart_protocal+0x2d0>)
 80021f8:	2205      	movs	r2, #5
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	e034      	b.n	8002268 <uart_protocal+0x150>
					case 4:n_data = 2;state = state_data_frame;break;
 80021fe:	4b7e      	ldr	r3, [pc, #504]	; (80023f8 <uart_protocal+0x2e0>)
 8002200:	2202      	movs	r2, #2
 8002202:	701a      	strb	r2, [r3, #0]
 8002204:	4b78      	ldr	r3, [pc, #480]	; (80023e8 <uart_protocal+0x2d0>)
 8002206:	2204      	movs	r2, #4
 8002208:	701a      	strb	r2, [r3, #0]
 800220a:	e02d      	b.n	8002268 <uart_protocal+0x150>
					case 5:n_data = 2;state = state_data_frame;break;
 800220c:	4b7a      	ldr	r3, [pc, #488]	; (80023f8 <uart_protocal+0x2e0>)
 800220e:	2202      	movs	r2, #2
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	4b75      	ldr	r3, [pc, #468]	; (80023e8 <uart_protocal+0x2d0>)
 8002214:	2204      	movs	r2, #4
 8002216:	701a      	strb	r2, [r3, #0]
 8002218:	e026      	b.n	8002268 <uart_protocal+0x150>
					case 6:n_data = 2;state = state_data_frame;break;
 800221a:	4b77      	ldr	r3, [pc, #476]	; (80023f8 <uart_protocal+0x2e0>)
 800221c:	2202      	movs	r2, #2
 800221e:	701a      	strb	r2, [r3, #0]
 8002220:	4b71      	ldr	r3, [pc, #452]	; (80023e8 <uart_protocal+0x2d0>)
 8002222:	2204      	movs	r2, #4
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e01f      	b.n	8002268 <uart_protocal+0x150>
					case 7:state = state_n_station;break;
 8002228:	4b6f      	ldr	r3, [pc, #444]	; (80023e8 <uart_protocal+0x2d0>)
 800222a:	2203      	movs	r2, #3
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	e01b      	b.n	8002268 <uart_protocal+0x150>
					case 8:state = state_check_sum;break;
 8002230:	4b6d      	ldr	r3, [pc, #436]	; (80023e8 <uart_protocal+0x2d0>)
 8002232:	2205      	movs	r2, #5
 8002234:	701a      	strb	r2, [r3, #0]
 8002236:	e017      	b.n	8002268 <uart_protocal+0x150>
					case 9:state = state_check_sum;break;
 8002238:	4b6b      	ldr	r3, [pc, #428]	; (80023e8 <uart_protocal+0x2d0>)
 800223a:	2205      	movs	r2, #5
 800223c:	701a      	strb	r2, [r3, #0]
 800223e:	e013      	b.n	8002268 <uart_protocal+0x150>
					case 10:state = state_check_sum;break;
 8002240:	4b69      	ldr	r3, [pc, #420]	; (80023e8 <uart_protocal+0x2d0>)
 8002242:	2205      	movs	r2, #5
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	e00f      	b.n	8002268 <uart_protocal+0x150>
					case 11:state = state_check_sum;break;
 8002248:	4b67      	ldr	r3, [pc, #412]	; (80023e8 <uart_protocal+0x2d0>)
 800224a:	2205      	movs	r2, #5
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	e00b      	b.n	8002268 <uart_protocal+0x150>
					case 12:state = state_check_sum;break;
 8002250:	4b65      	ldr	r3, [pc, #404]	; (80023e8 <uart_protocal+0x2d0>)
 8002252:	2205      	movs	r2, #5
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	e007      	b.n	8002268 <uart_protocal+0x150>
					case 13:state = state_check_sum;break;
 8002258:	4b63      	ldr	r3, [pc, #396]	; (80023e8 <uart_protocal+0x2d0>)
 800225a:	2205      	movs	r2, #5
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e003      	b.n	8002268 <uart_protocal+0x150>
					case 14:state = state_check_sum;break;
 8002260:	4b61      	ldr	r3, [pc, #388]	; (80023e8 <uart_protocal+0x2d0>)
 8002262:	2205      	movs	r2, #5
 8002264:	701a      	strb	r2, [r3, #0]
 8002266:	bf00      	nop
				}
			}
 8002268:	e00f      	b.n	800228a <uart_protocal+0x172>
			else{
				sum = n_data = data_ind = mode = 0;
 800226a:	4b62      	ldr	r3, [pc, #392]	; (80023f4 <uart_protocal+0x2dc>)
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
 8002270:	4b60      	ldr	r3, [pc, #384]	; (80023f4 <uart_protocal+0x2dc>)
 8002272:	781a      	ldrb	r2, [r3, #0]
 8002274:	4b5d      	ldr	r3, [pc, #372]	; (80023ec <uart_protocal+0x2d4>)
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	4b5c      	ldr	r3, [pc, #368]	; (80023ec <uart_protocal+0x2d4>)
 800227a:	781a      	ldrb	r2, [r3, #0]
 800227c:	4b5e      	ldr	r3, [pc, #376]	; (80023f8 <uart_protocal+0x2e0>)
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	4b5d      	ldr	r3, [pc, #372]	; (80023f8 <uart_protocal+0x2e0>)
 8002282:	781a      	ldrb	r2, [r3, #0]
 8002284:	4b5a      	ldr	r3, [pc, #360]	; (80023f0 <uart_protocal+0x2d8>)
 8002286:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002288:	e26d      	b.n	8002766 <uart_protocal+0x64e>
			}
 800228a:	bf00      	nop
			break;
 800228c:	e26b      	b.n	8002766 <uart_protocal+0x64e>
		case state_n_station:

			//n_data = (input+1)/2 & 0xFF; //data sheet version

			n_data = input; //UI version
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4b59      	ldr	r3, [pc, #356]	; (80023f8 <uart_protocal+0x2e0>)
 8002294:	701a      	strb	r2, [r3, #0]


			sum+= input;
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4b55      	ldr	r3, [pc, #340]	; (80023f0 <uart_protocal+0x2d8>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4b53      	ldr	r3, [pc, #332]	; (80023f0 <uart_protocal+0x2d8>)
 80022a4:	701a      	strb	r2, [r3, #0]
			state = state_data_frame;
 80022a6:	4b50      	ldr	r3, [pc, #320]	; (80023e8 <uart_protocal+0x2d0>)
 80022a8:	2204      	movs	r2, #4
 80022aa:	701a      	strb	r2, [r3, #0]
			break;
 80022ac:	e25b      	b.n	8002766 <uart_protocal+0x64e>
		case state_data_frame:
			if(data_ind < n_data){
 80022ae:	4b4f      	ldr	r3, [pc, #316]	; (80023ec <uart_protocal+0x2d4>)
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	4b51      	ldr	r3, [pc, #324]	; (80023f8 <uart_protocal+0x2e0>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d215      	bcs.n	80022e6 <uart_protocal+0x1ce>
				datas[data_ind] = input;
 80022ba:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <uart_protocal+0x2d4>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	b2d9      	uxtb	r1, r3
 80022c4:	4b4d      	ldr	r3, [pc, #308]	; (80023fc <uart_protocal+0x2e4>)
 80022c6:	5499      	strb	r1, [r3, r2]
				sum += datas[data_ind++];
 80022c8:	4b48      	ldr	r3, [pc, #288]	; (80023ec <uart_protocal+0x2d4>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	b2d1      	uxtb	r1, r2
 80022d0:	4a46      	ldr	r2, [pc, #280]	; (80023ec <uart_protocal+0x2d4>)
 80022d2:	7011      	strb	r1, [r2, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b49      	ldr	r3, [pc, #292]	; (80023fc <uart_protocal+0x2e4>)
 80022d8:	5c9a      	ldrb	r2, [r3, r2]
 80022da:	4b45      	ldr	r3, [pc, #276]	; (80023f0 <uart_protocal+0x2d8>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <uart_protocal+0x2d8>)
 80022e4:	701a      	strb	r2, [r3, #0]
			}
			if(data_ind == n_data){
 80022e6:	4b41      	ldr	r3, [pc, #260]	; (80023ec <uart_protocal+0x2d4>)
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	4b43      	ldr	r3, [pc, #268]	; (80023f8 <uart_protocal+0x2e0>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	f040 8232 	bne.w	8002758 <uart_protocal+0x640>
				state = state_check_sum;
 80022f4:	4b3c      	ldr	r3, [pc, #240]	; (80023e8 <uart_protocal+0x2d0>)
 80022f6:	2205      	movs	r2, #5
 80022f8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80022fa:	e22d      	b.n	8002758 <uart_protocal+0x640>
		case state_check_sum:
			if(input == (uint8_t) ~sum){
 80022fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002300:	4a3b      	ldr	r2, [pc, #236]	; (80023f0 <uart_protocal+0x2d8>)
 8002302:	7812      	ldrb	r2, [r2, #0]
 8002304:	43d2      	mvns	r2, r2
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	4293      	cmp	r3, r2
 800230a:	f040 8227 	bne.w	800275c <uart_protocal+0x644>
				switch(mode){
 800230e:	4b39      	ldr	r3, [pc, #228]	; (80023f4 <uart_protocal+0x2dc>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	3b01      	subs	r3, #1
 8002314:	2b0d      	cmp	r3, #13
 8002316:	f200 8221 	bhi.w	800275c <uart_protocal+0x644>
 800231a:	a201      	add	r2, pc, #4	; (adr r2, 8002320 <uart_protocal+0x208>)
 800231c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002320:	08002359 	.word	0x08002359
 8002324:	08002397 	.word	0x08002397
 8002328:	080023bd 	.word	0x080023bd
 800232c:	0800240d 	.word	0x0800240d
 8002330:	08002441 	.word	0x08002441
 8002334:	0800248b 	.word	0x0800248b
 8002338:	080024b7 	.word	0x080024b7
 800233c:	0800252b 	.word	0x0800252b
 8002340:	0800254f 	.word	0x0800254f
 8002344:	08002599 	.word	0x08002599
 8002348:	08002625 	.word	0x08002625
 800234c:	08002685 	.word	0x08002685
 8002350:	080026a9 	.word	0x080026a9
 8002354:	08002715 	.word	0x08002715
					case 1:{
						uint8_t temp[] = { (0b1001<<4) | mode , datas[0] , datas[1] , (uint8_t)input};
 8002358:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <uart_protocal+0x2dc>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8002366:	4b25      	ldr	r3, [pc, #148]	; (80023fc <uart_protocal+0x2e4>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800236e:	4b23      	ldr	r3, [pc, #140]	; (80023fc <uart_protocal+0x2e4>)
 8002370:	785b      	ldrb	r3, [r3, #1]
 8002372:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						UARTTxWrite(&UART2, temp, 4);
 800237e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002382:	2204      	movs	r2, #4
 8002384:	4619      	mov	r1, r3
 8002386:	481e      	ldr	r0, [pc, #120]	; (8002400 <uart_protocal+0x2e8>)
 8002388:	f7ff fe7e 	bl	8002088 <UARTTxWrite>
						state = state_idle;
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <uart_protocal+0x2d0>)
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
						break;
 8002392:	bf00      	nop
 8002394:	e1cf      	b.n	8002736 <uart_protocal+0x61e>
					}
					case 2:{
						mcu_connect = 1;
 8002396:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <uart_protocal+0x2ec>)
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 800239c:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <uart_protocal+0x2f0>)
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
						UARTTxWrite(&UART2, temp, 2);
 80023a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023a8:	2202      	movs	r2, #2
 80023aa:	4619      	mov	r1, r3
 80023ac:	4814      	ldr	r0, [pc, #80]	; (8002400 <uart_protocal+0x2e8>)
 80023ae:	f7ff fe6b 	bl	8002088 <UARTTxWrite>
						state = state_idle;
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <uart_protocal+0x2d0>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
						break;
 80023b8:	bf00      	nop
 80023ba:	e1bc      	b.n	8002736 <uart_protocal+0x61e>
					}
					case 3:{
						mcu_connect = 0;
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <uart_protocal+0x2ec>)
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <uart_protocal+0x2f0>)
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
						UARTTxWrite(&UART2, temp, 2);
 80023ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023ce:	2202      	movs	r2, #2
 80023d0:	4619      	mov	r1, r3
 80023d2:	480b      	ldr	r0, [pc, #44]	; (8002400 <uart_protocal+0x2e8>)
 80023d4:	f7ff fe58 	bl	8002088 <UARTTxWrite>
						state = state_idle;
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <uart_protocal+0x2d0>)
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
						break;
 80023de:	bf00      	nop
 80023e0:	e1a9      	b.n	8002736 <uart_protocal+0x61e>
 80023e2:	bf00      	nop
 80023e4:	20002576 	.word	0x20002576
 80023e8:	20002574 	.word	0x20002574
 80023ec:	20002678 	.word	0x20002678
 80023f0:	20002575 	.word	0x20002575
 80023f4:	2000267a 	.word	0x2000267a
 80023f8:	20002679 	.word	0x20002679
 80023fc:	20002578 	.word	0x20002578
 8002400:	20000134 	.word	0x20000134
 8002404:	2000234c 	.word	0x2000234c
 8002408:	080065b0 	.word	0x080065b0
					}
					case 4:{
						max_velocity = datas[1];
 800240c:	4bb4      	ldr	r3, [pc, #720]	; (80026e0 <uart_protocal+0x5c8>)
 800240e:	785b      	ldrb	r3, [r3, #1]
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe f823 	bl	800045c <__aeabi_ui2d>
 8002416:	4603      	mov	r3, r0
 8002418:	460c      	mov	r4, r1
 800241a:	4ab2      	ldr	r2, [pc, #712]	; (80026e4 <uart_protocal+0x5cc>)
 800241c:	e9c2 3400 	strd	r3, r4, [r2]
						uint8_t temp[] = {0x58,0b01110101};
 8002420:	4bb1      	ldr	r3, [pc, #708]	; (80026e8 <uart_protocal+0x5d0>)
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
						UARTTxWrite(&UART2, temp, 2);
 8002428:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800242c:	2202      	movs	r2, #2
 800242e:	4619      	mov	r1, r3
 8002430:	48ae      	ldr	r0, [pc, #696]	; (80026ec <uart_protocal+0x5d4>)
 8002432:	f7ff fe29 	bl	8002088 <UARTTxWrite>
						state = state_idle;
 8002436:	4bae      	ldr	r3, [pc, #696]	; (80026f0 <uart_protocal+0x5d8>)
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
						break;
 800243c:	bf00      	nop
 800243e:	e17a      	b.n	8002736 <uart_protocal+0x61e>
					}
					case 5:{
						set_position = (double)((uint16_t)(datas[0]<<8) + datas[1])*1e-4;
 8002440:	4ba7      	ldr	r3, [pc, #668]	; (80026e0 <uart_protocal+0x5c8>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	b29b      	uxth	r3, r3
 800244a:	461a      	mov	r2, r3
 800244c:	4ba4      	ldr	r3, [pc, #656]	; (80026e0 <uart_protocal+0x5c8>)
 800244e:	785b      	ldrb	r3, [r3, #1]
 8002450:	4413      	add	r3, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe f812 	bl	800047c <__aeabi_i2d>
 8002458:	a39d      	add	r3, pc, #628	; (adr r3, 80026d0 <uart_protocal+0x5b8>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	f7fe f877 	bl	8000550 <__aeabi_dmul>
 8002462:	4603      	mov	r3, r0
 8002464:	460c      	mov	r4, r1
 8002466:	4aa3      	ldr	r2, [pc, #652]	; (80026f4 <uart_protocal+0x5dc>)
 8002468:	e9c2 3400 	strd	r3, r4, [r2]
						uint8_t temp[] = {0x58,0b01110101};
 800246c:	4b9e      	ldr	r3, [pc, #632]	; (80026e8 <uart_protocal+0x5d0>)
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	87bb      	strh	r3, [r7, #60]	; 0x3c
						UARTTxWrite(&UART2, temp, 2);
 8002472:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002476:	2202      	movs	r2, #2
 8002478:	4619      	mov	r1, r3
 800247a:	489c      	ldr	r0, [pc, #624]	; (80026ec <uart_protocal+0x5d4>)
 800247c:	f7ff fe04 	bl	8002088 <UARTTxWrite>
						state = state_idle;
 8002480:	4b9b      	ldr	r3, [pc, #620]	; (80026f0 <uart_protocal+0x5d8>)
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
						break;
 8002486:	bf00      	nop
 8002488:	e155      	b.n	8002736 <uart_protocal+0x61e>
					}
					case 6:{
						goals[0] = datas[1];
 800248a:	4b95      	ldr	r3, [pc, #596]	; (80026e0 <uart_protocal+0x5c8>)
 800248c:	785a      	ldrb	r2, [r3, #1]
 800248e:	4b9a      	ldr	r3, [pc, #616]	; (80026f8 <uart_protocal+0x5e0>)
 8002490:	701a      	strb	r2, [r3, #0]
						n_goal = 1;
 8002492:	4b9a      	ldr	r3, [pc, #616]	; (80026fc <uart_protocal+0x5e4>)
 8002494:	2201      	movs	r2, #1
 8002496:	801a      	strh	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 8002498:	4b93      	ldr	r3, [pc, #588]	; (80026e8 <uart_protocal+0x5d0>)
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	873b      	strh	r3, [r7, #56]	; 0x38
						UARTTxWrite(&UART2, temp, 2);
 800249e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024a2:	2202      	movs	r2, #2
 80024a4:	4619      	mov	r1, r3
 80024a6:	4891      	ldr	r0, [pc, #580]	; (80026ec <uart_protocal+0x5d4>)
 80024a8:	f7ff fdee 	bl	8002088 <UARTTxWrite>
						state = state_idle;
 80024ac:	4b90      	ldr	r3, [pc, #576]	; (80026f0 <uart_protocal+0x5d8>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
						break;
 80024b2:	bf00      	nop
 80024b4:	e13f      	b.n	8002736 <uart_protocal+0x61e>
					}
					case 7:{
						n_goal = 0;
 80024b6:	4b91      	ldr	r3, [pc, #580]	; (80026fc <uart_protocal+0x5e4>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	801a      	strh	r2, [r3, #0]
						for(int i = 0;i < n_data;i++){
 80024bc:	2300      	movs	r3, #0
 80024be:	657b      	str	r3, [r7, #84]	; 0x54
 80024c0:	e011      	b.n	80024e6 <uart_protocal+0x3ce>
							goals[2*i+1] = datas[i]>>4;
							n_goal += 2;
							*/

							//UI version
							goals[i] = datas[i];
 80024c2:	4a87      	ldr	r2, [pc, #540]	; (80026e0 <uart_protocal+0x5c8>)
 80024c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c6:	4413      	add	r3, r2
 80024c8:	7819      	ldrb	r1, [r3, #0]
 80024ca:	4a8b      	ldr	r2, [pc, #556]	; (80026f8 <uart_protocal+0x5e0>)
 80024cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ce:	4413      	add	r3, r2
 80024d0:	460a      	mov	r2, r1
 80024d2:	701a      	strb	r2, [r3, #0]
							n_goal++;
 80024d4:	4b89      	ldr	r3, [pc, #548]	; (80026fc <uart_protocal+0x5e4>)
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	3301      	adds	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	4b87      	ldr	r3, [pc, #540]	; (80026fc <uart_protocal+0x5e4>)
 80024de:	801a      	strh	r2, [r3, #0]
						for(int i = 0;i < n_data;i++){
 80024e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e2:	3301      	adds	r3, #1
 80024e4:	657b      	str	r3, [r7, #84]	; 0x54
 80024e6:	4b86      	ldr	r3, [pc, #536]	; (8002700 <uart_protocal+0x5e8>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ee:	4293      	cmp	r3, r2
 80024f0:	dbe7      	blt.n	80024c2 <uart_protocal+0x3aa>
							//UI version
						}
						if(goals[n_goal-1] == 0){
 80024f2:	4b82      	ldr	r3, [pc, #520]	; (80026fc <uart_protocal+0x5e4>)
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	4a7f      	ldr	r2, [pc, #508]	; (80026f8 <uart_protocal+0x5e0>)
 80024fa:	5cd3      	ldrb	r3, [r2, r3]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <uart_protocal+0x3f4>
							n_goal--;
 8002500:	4b7e      	ldr	r3, [pc, #504]	; (80026fc <uart_protocal+0x5e4>)
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	4b7c      	ldr	r3, [pc, #496]	; (80026fc <uart_protocal+0x5e4>)
 800250a:	801a      	strh	r2, [r3, #0]
						}
						uint8_t temp[] = {0x58,0b01110101};
 800250c:	4b76      	ldr	r3, [pc, #472]	; (80026e8 <uart_protocal+0x5d0>)
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	86bb      	strh	r3, [r7, #52]	; 0x34
						UARTTxWrite(&UART2, temp, 2);
 8002512:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002516:	2202      	movs	r2, #2
 8002518:	4619      	mov	r1, r3
 800251a:	4874      	ldr	r0, [pc, #464]	; (80026ec <uart_protocal+0x5d4>)
 800251c:	f7ff fdb4 	bl	8002088 <UARTTxWrite>
						state = state_idle;
 8002520:	4b73      	ldr	r3, [pc, #460]	; (80026f0 <uart_protocal+0x5d8>)
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
						break;
 8002526:	bf00      	nop
 8002528:	e105      	b.n	8002736 <uart_protocal+0x61e>
					}
					case 8:{
						go_now = 1;
 800252a:	4b76      	ldr	r3, [pc, #472]	; (8002704 <uart_protocal+0x5ec>)
 800252c:	2201      	movs	r2, #1
 800252e:	701a      	strb	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 8002530:	4b6d      	ldr	r3, [pc, #436]	; (80026e8 <uart_protocal+0x5d0>)
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	863b      	strh	r3, [r7, #48]	; 0x30
						UARTTxWrite(&UART2, temp, 2);
 8002536:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800253a:	2202      	movs	r2, #2
 800253c:	4619      	mov	r1, r3
 800253e:	486b      	ldr	r0, [pc, #428]	; (80026ec <uart_protocal+0x5d4>)
 8002540:	f7ff fda2 	bl	8002088 <UARTTxWrite>
						state = state_idle;
 8002544:	4b6a      	ldr	r3, [pc, #424]	; (80026f0 <uart_protocal+0x5d8>)
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
						break;
 800254a:	bf00      	nop
 800254c:	e0f3      	b.n	8002736 <uart_protocal+0x61e>
					}
					case 9:{
						uint8_t temp[] = {0x58,0b01110101};
 800254e:	4b66      	ldr	r3, [pc, #408]	; (80026e8 <uart_protocal+0x5d0>)
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	85bb      	strh	r3, [r7, #44]	; 0x2c
						UARTTxWrite(&UART2, temp, 2);
 8002554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002558:	2202      	movs	r2, #2
 800255a:	4619      	mov	r1, r3
 800255c:	4863      	ldr	r0, [pc, #396]	; (80026ec <uart_protocal+0x5d4>)
 800255e:	f7ff fd93 	bl	8002088 <UARTTxWrite>
						uint8_t temp2[] = {0b10011001,current_station,~(0b10011001+current_station) & 0xFF};
 8002562:	2399      	movs	r3, #153	; 0x99
 8002564:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8002568:	4b67      	ldr	r3, [pc, #412]	; (8002708 <uart_protocal+0x5f0>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8002570:	4b65      	ldr	r3, [pc, #404]	; (8002708 <uart_protocal+0x5f0>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	3b67      	subs	r3, #103	; 0x67
 8002576:	b2db      	uxtb	r3, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
						UARTTxWrite(&UART2, temp2, 3);
 8002580:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002584:	2203      	movs	r2, #3
 8002586:	4619      	mov	r1, r3
 8002588:	4858      	ldr	r0, [pc, #352]	; (80026ec <uart_protocal+0x5d4>)
 800258a:	f7ff fd7d 	bl	8002088 <UARTTxWrite>
						state = state_wait_for_ack1_1;
 800258e:	4b58      	ldr	r3, [pc, #352]	; (80026f0 <uart_protocal+0x5d8>)
 8002590:	2206      	movs	r2, #6
 8002592:	701a      	strb	r2, [r3, #0]
						break;
 8002594:	bf00      	nop
 8002596:	e0ce      	b.n	8002736 <uart_protocal+0x61e>
					}
					case 10:{
						uint8_t temp[] = {0x58,0b01110101};
 8002598:	4b53      	ldr	r3, [pc, #332]	; (80026e8 <uart_protocal+0x5d0>)
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	84bb      	strh	r3, [r7, #36]	; 0x24
						UARTTxWrite(&UART2, temp, 2);
 800259e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a2:	2202      	movs	r2, #2
 80025a4:	4619      	mov	r1, r3
 80025a6:	4851      	ldr	r0, [pc, #324]	; (80026ec <uart_protocal+0x5d4>)
 80025a8:	f7ff fd6e 	bl	8002088 <UARTTxWrite>
						uint16_t pos = (uint16_t)(current_position*1e4);
 80025ac:	4b57      	ldr	r3, [pc, #348]	; (800270c <uart_protocal+0x5f4>)
 80025ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025b2:	a349      	add	r3, pc, #292	; (adr r3, 80026d8 <uart_protocal+0x5c0>)
 80025b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b8:	f7fd ffca 	bl	8000550 <__aeabi_dmul>
 80025bc:	4603      	mov	r3, r0
 80025be:	460c      	mov	r4, r1
 80025c0:	4618      	mov	r0, r3
 80025c2:	4621      	mov	r1, r4
 80025c4:	f7fe fa86 	bl	8000ad4 <__aeabi_d2uiz>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
						uint8_t temp2[] = {0b10011010,pos >> 8,pos & 0xFF, ~(0b10011001+(pos >> 8)+ (pos & 0xFF)) & 0xFF};
 80025ce:	239a      	movs	r3, #154	; 0x9a
 80025d0:	f887 3020 	strb.w	r3, [r7, #32]
 80025d4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80025d8:	0a1b      	lsrs	r3, r3, #8
 80025da:	b29b      	uxth	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80025e2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80025ec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	3b67      	subs	r3, #103	; 0x67
 8002602:	b2db      	uxtb	r3, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						UARTTxWrite(&UART2, temp2, 4);
 800260c:	f107 0320 	add.w	r3, r7, #32
 8002610:	2204      	movs	r2, #4
 8002612:	4619      	mov	r1, r3
 8002614:	4835      	ldr	r0, [pc, #212]	; (80026ec <uart_protocal+0x5d4>)
 8002616:	f7ff fd37 	bl	8002088 <UARTTxWrite>
						state = state_wait_for_ack1_1;
 800261a:	4b35      	ldr	r3, [pc, #212]	; (80026f0 <uart_protocal+0x5d8>)
 800261c:	2206      	movs	r2, #6
 800261e:	701a      	strb	r2, [r3, #0]
						break;
 8002620:	bf00      	nop
 8002622:	e088      	b.n	8002736 <uart_protocal+0x61e>
					}
					case 11:{
						uint8_t temp[] = {0x58,0b01110101};
 8002624:	4b30      	ldr	r3, [pc, #192]	; (80026e8 <uart_protocal+0x5d0>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	83bb      	strh	r3, [r7, #28]
						UARTTxWrite(&UART2, temp, 2);
 800262a:	f107 031c 	add.w	r3, r7, #28
 800262e:	2202      	movs	r2, #2
 8002630:	4619      	mov	r1, r3
 8002632:	482e      	ldr	r0, [pc, #184]	; (80026ec <uart_protocal+0x5d4>)
 8002634:	f7ff fd28 	bl	8002088 <UARTTxWrite>
						uint8_t temp2[] = {0b10011011,(uint8_t)max_velocity,~(0b10011011+(uint8_t)max_velocity) & 0xFF};
 8002638:	239b      	movs	r3, #155	; 0x9b
 800263a:	763b      	strb	r3, [r7, #24]
 800263c:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <uart_protocal+0x5cc>)
 800263e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002642:	4618      	mov	r0, r3
 8002644:	4621      	mov	r1, r4
 8002646:	f7fe fa45 	bl	8000ad4 <__aeabi_d2uiz>
 800264a:	4603      	mov	r3, r0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	767b      	strb	r3, [r7, #25]
 8002650:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <uart_protocal+0x5cc>)
 8002652:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002656:	4618      	mov	r0, r3
 8002658:	4621      	mov	r1, r4
 800265a:	f7fe fa3b 	bl	8000ad4 <__aeabi_d2uiz>
 800265e:	4603      	mov	r3, r0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	3b65      	subs	r3, #101	; 0x65
 8002664:	b2db      	uxtb	r3, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	b2db      	uxtb	r3, r3
 800266a:	76bb      	strb	r3, [r7, #26]
						UARTTxWrite(&UART2, temp2, 3);
 800266c:	f107 0318 	add.w	r3, r7, #24
 8002670:	2203      	movs	r2, #3
 8002672:	4619      	mov	r1, r3
 8002674:	481d      	ldr	r0, [pc, #116]	; (80026ec <uart_protocal+0x5d4>)
 8002676:	f7ff fd07 	bl	8002088 <UARTTxWrite>
						state = state_wait_for_ack1_1;
 800267a:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <uart_protocal+0x5d8>)
 800267c:	2206      	movs	r2, #6
 800267e:	701a      	strb	r2, [r3, #0]
						break;
 8002680:	bf00      	nop
 8002682:	e058      	b.n	8002736 <uart_protocal+0x61e>
					}
					case 12:{
						enable_gripper = 1;
 8002684:	4b22      	ldr	r3, [pc, #136]	; (8002710 <uart_protocal+0x5f8>)
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 800268a:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <uart_protocal+0x5d0>)
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	82bb      	strh	r3, [r7, #20]
						UARTTxWrite(&UART2, temp, 2);
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	2202      	movs	r2, #2
 8002696:	4619      	mov	r1, r3
 8002698:	4814      	ldr	r0, [pc, #80]	; (80026ec <uart_protocal+0x5d4>)
 800269a:	f7ff fcf5 	bl	8002088 <UARTTxWrite>
						state = state_idle;
 800269e:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <uart_protocal+0x5d8>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
						break;
 80026a4:	bf00      	nop
 80026a6:	e046      	b.n	8002736 <uart_protocal+0x61e>
					}
					case 13:{
						enable_gripper = 0;
 80026a8:	4b19      	ldr	r3, [pc, #100]	; (8002710 <uart_protocal+0x5f8>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <uart_protocal+0x5d0>)
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	823b      	strh	r3, [r7, #16]
						UARTTxWrite(&UART2, temp, 2);
 80026b4:	f107 0310 	add.w	r3, r7, #16
 80026b8:	2202      	movs	r2, #2
 80026ba:	4619      	mov	r1, r3
 80026bc:	480b      	ldr	r0, [pc, #44]	; (80026ec <uart_protocal+0x5d4>)
 80026be:	f7ff fce3 	bl	8002088 <UARTTxWrite>
						state = state_idle;
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <uart_protocal+0x5d8>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
						break;
 80026c8:	bf00      	nop
 80026ca:	e034      	b.n	8002736 <uart_protocal+0x61e>
 80026cc:	f3af 8000 	nop.w
 80026d0:	eb1c432d 	.word	0xeb1c432d
 80026d4:	3f1a36e2 	.word	0x3f1a36e2
 80026d8:	00000000 	.word	0x00000000
 80026dc:	40c38800 	.word	0x40c38800
 80026e0:	20002578 	.word	0x20002578
 80026e4:	20002558 	.word	0x20002558
 80026e8:	080065b0 	.word	0x080065b0
 80026ec:	20000134 	.word	0x20000134
 80026f0:	20002574 	.word	0x20002574
 80026f4:	20002560 	.word	0x20002560
 80026f8:	20002350 	.word	0x20002350
 80026fc:	20002554 	.word	0x20002554
 8002700:	20002679 	.word	0x20002679
 8002704:	20002550 	.word	0x20002550
 8002708:	20002551 	.word	0x20002551
 800270c:	200000a0 	.word	0x200000a0
 8002710:	20002552 	.word	0x20002552
					}
					case 14:{
						enable_sethome = 1;
 8002714:	4b16      	ldr	r3, [pc, #88]	; (8002770 <uart_protocal+0x658>)
 8002716:	2201      	movs	r2, #1
 8002718:	701a      	strb	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 800271a:	4b16      	ldr	r3, [pc, #88]	; (8002774 <uart_protocal+0x65c>)
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	81bb      	strh	r3, [r7, #12]
						UARTTxWrite(&UART2, temp, 2);
 8002720:	f107 030c 	add.w	r3, r7, #12
 8002724:	2202      	movs	r2, #2
 8002726:	4619      	mov	r1, r3
 8002728:	4813      	ldr	r0, [pc, #76]	; (8002778 <uart_protocal+0x660>)
 800272a:	f7ff fcad 	bl	8002088 <UARTTxWrite>
						state = state_idle;
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <uart_protocal+0x664>)
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
						break;
 8002734:	bf00      	nop
				}
			}
			else{
				//error check sum
			}
			break;
 8002736:	e011      	b.n	800275c <uart_protocal+0x644>
		case state_wait_for_ack1_1:{if(input == 0x58){state = state_wait_for_ack1_2;}break;}
 8002738:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800273c:	2b58      	cmp	r3, #88	; 0x58
 800273e:	d10f      	bne.n	8002760 <uart_protocal+0x648>
 8002740:	4b0e      	ldr	r3, [pc, #56]	; (800277c <uart_protocal+0x664>)
 8002742:	2207      	movs	r2, #7
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	e00b      	b.n	8002760 <uart_protocal+0x648>
		case state_wait_for_ack1_2:{if(input == 0b01110101){state = state_idle;}break;}
 8002748:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800274c:	2b75      	cmp	r3, #117	; 0x75
 800274e:	d109      	bne.n	8002764 <uart_protocal+0x64c>
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <uart_protocal+0x664>)
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]
 8002756:	e005      	b.n	8002764 <uart_protocal+0x64c>
			break;
 8002758:	bf00      	nop
 800275a:	e004      	b.n	8002766 <uart_protocal+0x64e>
			break;
 800275c:	bf00      	nop
 800275e:	e002      	b.n	8002766 <uart_protocal+0x64e>
		case state_wait_for_ack1_1:{if(input == 0x58){state = state_wait_for_ack1_2;}break;}
 8002760:	bf00      	nop
 8002762:	e000      	b.n	8002766 <uart_protocal+0x64e>
		case state_wait_for_ack1_2:{if(input == 0b01110101){state = state_idle;}break;}
 8002764:	bf00      	nop
	}

}
 8002766:	bf00      	nop
 8002768:	375c      	adds	r7, #92	; 0x5c
 800276a:	46bd      	mov	sp, r7
 800276c:	bd90      	pop	{r4, r7, pc}
 800276e:	bf00      	nop
 8002770:	20002553 	.word	0x20002553
 8002774:	080065b0 	.word	0x080065b0
 8002778:	20000134 	.word	0x20000134
 800277c:	20002574 	.word	0x20002574

08002780 <encoder_lowpass_update>:


void encoder_lowpass_update(){
 8002780:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0

	 encoder_value = unwraping_update();
 8002788:	f7fe fee8 	bl	800155c <unwraping_update>
 800278c:	4602      	mov	r2, r0
 800278e:	4b30      	ldr	r3, [pc, #192]	; (8002850 <encoder_lowpass_update+0xd0>)
 8002790:	601a      	str	r2, [r3, #0]

	  // read encoder with low-pass
	  if(micros() - time_stamp > 1000){ // 1kHz
 8002792:	f7ff fb7d 	bl	8001e90 <micros>
 8002796:	460a      	mov	r2, r1
 8002798:	4601      	mov	r1, r0
 800279a:	4b2e      	ldr	r3, [pc, #184]	; (8002854 <encoder_lowpass_update+0xd4>)
 800279c:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80027a0:	460b      	mov	r3, r1
 80027a2:	4614      	mov	r4, r2
 80027a4:	ebb3 030b 	subs.w	r3, r3, fp
 80027a8:	eb64 040c 	sbc.w	r4, r4, ip
 80027ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	42a2      	cmp	r2, r4
 80027b6:	bf08      	it	eq
 80027b8:	4299      	cmpeq	r1, r3
 80027ba:	d243      	bcs.n	8002844 <encoder_lowpass_update+0xc4>
		  time_stamp = micros();
 80027bc:	f7ff fb68 	bl	8001e90 <micros>
 80027c0:	4603      	mov	r3, r0
 80027c2:	460c      	mov	r4, r1
 80027c4:	4a23      	ldr	r2, [pc, #140]	; (8002854 <encoder_lowpass_update+0xd4>)
 80027c6:	e9c2 3400 	strd	r3, r4, [r2]

		  encoder_velocity = velocity_update(encoder_value);
 80027ca:	4b21      	ldr	r3, [pc, #132]	; (8002850 <encoder_lowpass_update+0xd0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe ff02 	bl	80015d8 <velocity_update>
 80027d4:	eeb0 7a40 	vmov.f32	s14, s0
 80027d8:	eef0 7a60 	vmov.f32	s15, s1
 80027dc:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <encoder_lowpass_update+0xd8>)
 80027de:	ed83 7b00 	vstr	d7, [r3]

		  for(int i = 0;i < 10;i++){
 80027e2:	2300      	movs	r3, #0
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	e01a      	b.n	800281e <encoder_lowpass_update+0x9e>
			  lowpass_output[i] = low_pass_process(&lowpass_filters[i], encoder_velocity);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	015b      	lsls	r3, r3, #5
 80027ec:	4a1b      	ldr	r2, [pc, #108]	; (800285c <encoder_lowpass_update+0xdc>)
 80027ee:	441a      	add	r2, r3
 80027f0:	4b19      	ldr	r3, [pc, #100]	; (8002858 <encoder_lowpass_update+0xd8>)
 80027f2:	ed93 7b00 	vldr	d7, [r3]
 80027f6:	eeb0 0a47 	vmov.f32	s0, s14
 80027fa:	eef0 0a67 	vmov.f32	s1, s15
 80027fe:	4610      	mov	r0, r2
 8002800:	f7fe ff50 	bl	80016a4 <low_pass_process>
 8002804:	eeb0 7a40 	vmov.f32	s14, s0
 8002808:	eef0 7a60 	vmov.f32	s15, s1
 800280c:	4a14      	ldr	r2, [pc, #80]	; (8002860 <encoder_lowpass_update+0xe0>)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4413      	add	r3, r2
 8002814:	ed83 7b00 	vstr	d7, [r3]
		  for(int i = 0;i < 10;i++){
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3301      	adds	r3, #1
 800281c:	607b      	str	r3, [r7, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b09      	cmp	r3, #9
 8002822:	dde1      	ble.n	80027e8 <encoder_lowpass_update+0x68>
		  }

		  encoder_velocity_rpm = ppms_to_rpm(lowpass_output[1]);
 8002824:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <encoder_lowpass_update+0xe0>)
 8002826:	ed93 7b02 	vldr	d7, [r3, #8]
 800282a:	eeb0 0a47 	vmov.f32	s0, s14
 800282e:	eef0 0a67 	vmov.f32	s1, s15
 8002832:	f7fe ff11 	bl	8001658 <ppms_to_rpm>
 8002836:	eeb0 7a40 	vmov.f32	s14, s0
 800283a:	eef0 7a60 	vmov.f32	s15, s1
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <encoder_lowpass_update+0xe4>)
 8002840:	ed83 7b00 	vstr	d7, [r3]
		  //kalman_output = kalman_filter_update(encoder_velocity*300);
	  }

}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800284e:	bf00      	nop
 8002850:	20000158 	.word	0x20000158
 8002854:	20000170 	.word	0x20000170
 8002858:	20000160 	.word	0x20000160
 800285c:	20000188 	.word	0x20000188
 8002860:	200002c8 	.word	0x200002c8
 8002864:	20000168 	.word	0x20000168

08002868 <uart_update>:


void uart_update(){
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
	//Uart protocol
	int16_t inputChar = UARTReadChar(&UART2);
 800286e:	480b      	ldr	r0, [pc, #44]	; (800289c <uart_update+0x34>)
 8002870:	f7ff fb90 	bl	8001f94 <UARTReadChar>
 8002874:	4603      	mov	r3, r0
 8002876:	80fb      	strh	r3, [r7, #6]
	if(inputChar != -1){
 8002878:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d005      	beq.n	800288e <uart_update+0x26>
	  /*char temp[32];
	  sprintf(temp, "%d", inputChar);
	  UARTTxWrite(&UART2, (uint8_t*) temp, strlen(temp));*/
	  uart_protocal(inputChar, &UART2);
 8002882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002886:	4905      	ldr	r1, [pc, #20]	; (800289c <uart_update+0x34>)
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fc45 	bl	8002118 <uart_protocal>
	}
	UARTTxDumpBuffer(&UART2);
 800288e:	4803      	ldr	r0, [pc, #12]	; (800289c <uart_update+0x34>)
 8002890:	f7ff fbaa 	bl	8001fe8 <UARTTxDumpBuffer>
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000134 	.word	0x20000134

080028a0 <moving_state_update>:


void moving_state_update(){
 80028a0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80028a4:	af00      	add	r7, sp, #0

	switch (move_state) {
 80028a6:	4b50      	ldr	r3, [pc, #320]	; (80029e8 <moving_state_update+0x148>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	f200 8088 	bhi.w	80029c0 <moving_state_update+0x120>
 80028b0:	a201      	add	r2, pc, #4	; (adr r2, 80028b8 <moving_state_update+0x18>)
 80028b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b6:	bf00      	nop
 80028b8:	080028cd 	.word	0x080028cd
 80028bc:	080028dd 	.word	0x080028dd
 80028c0:	08002941 	.word	0x08002941
 80028c4:	08002963 	.word	0x08002963
 80028c8:	0800299f 	.word	0x0800299f
		case state_move_idle:{if(go_now){move_state = state_tar_plan;} break;}
 80028cc:	4b47      	ldr	r3, [pc, #284]	; (80029ec <moving_state_update+0x14c>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d077      	beq.n	80029c4 <moving_state_update+0x124>
 80028d4:	4b44      	ldr	r3, [pc, #272]	; (80029e8 <moving_state_update+0x148>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	e073      	b.n	80029c4 <moving_state_update+0x124>
		case state_tar_plan:{ targectory_cal(paths, &path_n_cnt, (double)(TIM1->CNT)/(12*64*4 -1)*360,stations_postion[goals[station_ind++]] , 0.02); paths_ind = 0; move_state = state_wait_des; break;}
 80028dc:	4b44      	ldr	r3, [pc, #272]	; (80029f0 <moving_state_update+0x150>)
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fd fdbb 	bl	800045c <__aeabi_ui2d>
 80028e6:	a33a      	add	r3, pc, #232	; (adr r3, 80029d0 <moving_state_update+0x130>)
 80028e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ec:	f7fd ff5a 	bl	80007a4 <__aeabi_ddiv>
 80028f0:	4603      	mov	r3, r0
 80028f2:	460c      	mov	r4, r1
 80028f4:	4618      	mov	r0, r3
 80028f6:	4621      	mov	r1, r4
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	4b3d      	ldr	r3, [pc, #244]	; (80029f4 <moving_state_update+0x154>)
 80028fe:	f7fd fe27 	bl	8000550 <__aeabi_dmul>
 8002902:	4603      	mov	r3, r0
 8002904:	460c      	mov	r4, r1
 8002906:	4618      	mov	r0, r3
 8002908:	4621      	mov	r1, r4
 800290a:	f7fe f8bb 	bl	8000a84 <__aeabi_d2iz>
 800290e:	4b3a      	ldr	r3, [pc, #232]	; (80029f8 <moving_state_update+0x158>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	4938      	ldr	r1, [pc, #224]	; (80029f8 <moving_state_update+0x158>)
 8002916:	600a      	str	r2, [r1, #0]
 8002918:	4a38      	ldr	r2, [pc, #224]	; (80029fc <moving_state_update+0x15c>)
 800291a:	5cd3      	ldrb	r3, [r2, r3]
 800291c:	461a      	mov	r2, r3
 800291e:	4b38      	ldr	r3, [pc, #224]	; (8002a00 <moving_state_update+0x160>)
 8002920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002924:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 80029d8 <moving_state_update+0x138>
 8002928:	4602      	mov	r2, r0
 800292a:	4936      	ldr	r1, [pc, #216]	; (8002a04 <moving_state_update+0x164>)
 800292c:	4836      	ldr	r0, [pc, #216]	; (8002a08 <moving_state_update+0x168>)
 800292e:	f7ff f8bf 	bl	8001ab0 <targectory_cal>
 8002932:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <moving_state_update+0x16c>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <moving_state_update+0x148>)
 800293a:	2202      	movs	r2, #2
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	e044      	b.n	80029ca <moving_state_update+0x12a>
		case state_wait_des:{if(paths_ind >= path_n_cnt){time_stamp_5sec = micros(); move_state = state_wait_5sec;} break;}
 8002940:	4b32      	ldr	r3, [pc, #200]	; (8002a0c <moving_state_update+0x16c>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <moving_state_update+0x164>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	db3d      	blt.n	80029c8 <moving_state_update+0x128>
 800294c:	f7ff faa0 	bl	8001e90 <micros>
 8002950:	4603      	mov	r3, r0
 8002952:	460c      	mov	r4, r1
 8002954:	4a2e      	ldr	r2, [pc, #184]	; (8002a10 <moving_state_update+0x170>)
 8002956:	e9c2 3400 	strd	r3, r4, [r2]
 800295a:	4b23      	ldr	r3, [pc, #140]	; (80029e8 <moving_state_update+0x148>)
 800295c:	2203      	movs	r2, #3
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	e032      	b.n	80029c8 <moving_state_update+0x128>
		case state_wait_5sec:{if(micros() - time_stamp_5sec >= 5e6){move_state = state_check_left_stations;} break;}
 8002962:	f7ff fa95 	bl	8001e90 <micros>
 8002966:	460a      	mov	r2, r1
 8002968:	4601      	mov	r1, r0
 800296a:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <moving_state_update+0x170>)
 800296c:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8002970:	460b      	mov	r3, r1
 8002972:	4614      	mov	r4, r2
 8002974:	ebb3 030b 	subs.w	r3, r3, fp
 8002978:	eb64 040c 	sbc.w	r4, r4, ip
 800297c:	4618      	mov	r0, r3
 800297e:	4621      	mov	r1, r4
 8002980:	f7fd fdb0 	bl	80004e4 <__aeabi_ul2d>
 8002984:	a316      	add	r3, pc, #88	; (adr r3, 80029e0 <moving_state_update+0x140>)
 8002986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298a:	f7fe f867 	bl	8000a5c <__aeabi_dcmpge>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d100      	bne.n	8002996 <moving_state_update+0xf6>
 8002994:	e019      	b.n	80029ca <moving_state_update+0x12a>
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <moving_state_update+0x148>)
 8002998:	2204      	movs	r2, #4
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	e015      	b.n	80029ca <moving_state_update+0x12a>
		case state_check_left_stations:{if(station_ind >= n_goal){go_now = station_ind = 0;} move_state = state_move_idle; break;}
 800299e:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <moving_state_update+0x174>)
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <moving_state_update+0x158>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	dc05      	bgt.n	80029b8 <moving_state_update+0x118>
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <moving_state_update+0x158>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <moving_state_update+0x14c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <moving_state_update+0x148>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
 80029be:	e004      	b.n	80029ca <moving_state_update+0x12a>
		default:break;
 80029c0:	bf00      	nop
 80029c2:	e002      	b.n	80029ca <moving_state_update+0x12a>
		case state_move_idle:{if(go_now){move_state = state_tar_plan;} break;}
 80029c4:	bf00      	nop
 80029c6:	e000      	b.n	80029ca <moving_state_update+0x12a>
		case state_wait_des:{if(paths_ind >= path_n_cnt){time_stamp_5sec = micros(); move_state = state_wait_5sec;} break;}
 80029c8:	bf00      	nop
	}

}
 80029ca:	bf00      	nop
 80029cc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80029d0:	00000000 	.word	0x00000000
 80029d4:	40a7fe00 	.word	0x40a7fe00
 80029d8:	47ae147b 	.word	0x47ae147b
 80029dc:	3f947ae1 	.word	0x3f947ae1
 80029e0:	00000000 	.word	0x00000000
 80029e4:	415312d0 	.word	0x415312d0
 80029e8:	20002568 	.word	0x20002568
 80029ec:	20002550 	.word	0x20002550
 80029f0:	40010000 	.word	0x40010000
 80029f4:	40768000 	.word	0x40768000
 80029f8:	20002348 	.word	0x20002348
 80029fc:	20002350 	.word	0x20002350
 8002a00:	20000078 	.word	0x20000078
 8002a04:	20002344 	.word	0x20002344
 8002a08:	20000400 	.word	0x20000400
 8002a0c:	20002340 	.word	0x20002340
 8002a10:	20000180 	.word	0x20000180
 8002a14:	20002554 	.word	0x20002554

08002a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a1c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a1e:	e7fe      	b.n	8002a1e <Error_Handler+0x6>

08002a20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	4a0f      	ldr	r2, [pc, #60]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a34:	6453      	str	r3, [r2, #68]	; 0x44
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	603b      	str	r3, [r7, #0]
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a50:	6413      	str	r3, [r2, #64]	; 0x40
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a5e:	2007      	movs	r0, #7
 8002a60:	f000 fb92 	bl	8003188 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40023800 	.word	0x40023800

08002a70 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d12c      	bne.n	8002aec <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	4a17      	ldr	r2, [pc, #92]	; (8002af8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	4a10      	ldr	r2, [pc, #64]	; (8002af8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6313      	str	r3, [r2, #48]	; 0x30
 8002abe:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002aca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002adc:	2301      	movs	r3, #1
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4805      	ldr	r0, [pc, #20]	; (8002afc <HAL_TIM_Encoder_MspInit+0x8c>)
 8002ae8:	f000 ff20 	bl	800392c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002aec:	bf00      	nop
 8002aee:	3728      	adds	r7, #40	; 0x28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40010000 	.word	0x40010000
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40020000 	.word	0x40020000

08002b00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <HAL_TIM_PWM_MspInit+0x3c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d10d      	bne.n	8002b2e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <HAL_TIM_PWM_MspInit+0x40>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	4a09      	ldr	r2, [pc, #36]	; (8002b40 <HAL_TIM_PWM_MspInit+0x40>)
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	6413      	str	r3, [r2, #64]	; 0x40
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <HAL_TIM_PWM_MspInit+0x40>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40000400 	.word	0x40000400
 8002b40:	40023800 	.word	0x40023800

08002b44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0e      	ldr	r2, [pc, #56]	; (8002b8c <HAL_TIM_Base_MspInit+0x48>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d115      	bne.n	8002b82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <HAL_TIM_Base_MspInit+0x4c>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	4a0c      	ldr	r2, [pc, #48]	; (8002b90 <HAL_TIM_Base_MspInit+0x4c>)
 8002b60:	f043 0308 	orr.w	r3, r3, #8
 8002b64:	6413      	str	r3, [r2, #64]	; 0x40
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <HAL_TIM_Base_MspInit+0x4c>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2100      	movs	r1, #0
 8002b76:	2032      	movs	r0, #50	; 0x32
 8002b78:	f000 fb11 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002b7c:	2032      	movs	r0, #50	; 0x32
 8002b7e:	f000 fb2a 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40000c00 	.word	0x40000c00
 8002b90:	40023800 	.word	0x40023800

08002b94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	60da      	str	r2, [r3, #12]
 8002baa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a12      	ldr	r2, [pc, #72]	; (8002bfc <HAL_TIM_MspPostInit+0x68>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d11d      	bne.n	8002bf2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <HAL_TIM_MspPostInit+0x6c>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	4a10      	ldr	r2, [pc, #64]	; (8002c00 <HAL_TIM_MspPostInit+0x6c>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <HAL_TIM_MspPostInit+0x6c>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bd2:	23c0      	movs	r3, #192	; 0xc0
 8002bd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002be2:	2302      	movs	r3, #2
 8002be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	f107 030c 	add.w	r3, r7, #12
 8002bea:	4619      	mov	r1, r3
 8002bec:	4805      	ldr	r0, [pc, #20]	; (8002c04 <HAL_TIM_MspPostInit+0x70>)
 8002bee:	f000 fe9d 	bl	800392c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002bf2:	bf00      	nop
 8002bf4:	3720      	adds	r7, #32
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40000400 	.word	0x40000400
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40020000 	.word	0x40020000

08002c08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	; 0x28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c10:	f107 0314 	add.w	r3, r7, #20
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a4c      	ldr	r2, [pc, #304]	; (8002d58 <HAL_UART_MspInit+0x150>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	f040 8091 	bne.w	8002d4e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	4b4a      	ldr	r3, [pc, #296]	; (8002d5c <HAL_UART_MspInit+0x154>)
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	4a49      	ldr	r2, [pc, #292]	; (8002d5c <HAL_UART_MspInit+0x154>)
 8002c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3c:	4b47      	ldr	r3, [pc, #284]	; (8002d5c <HAL_UART_MspInit+0x154>)
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	4b43      	ldr	r3, [pc, #268]	; (8002d5c <HAL_UART_MspInit+0x154>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	4a42      	ldr	r2, [pc, #264]	; (8002d5c <HAL_UART_MspInit+0x154>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	6313      	str	r3, [r2, #48]	; 0x30
 8002c58:	4b40      	ldr	r3, [pc, #256]	; (8002d5c <HAL_UART_MspInit+0x154>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c64:	230c      	movs	r3, #12
 8002c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c70:	2303      	movs	r3, #3
 8002c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c74:	2307      	movs	r3, #7
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4838      	ldr	r0, [pc, #224]	; (8002d60 <HAL_UART_MspInit+0x158>)
 8002c80:	f000 fe54 	bl	800392c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002c84:	4b37      	ldr	r3, [pc, #220]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002c86:	4a38      	ldr	r2, [pc, #224]	; (8002d68 <HAL_UART_MspInit+0x160>)
 8002c88:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002c8a:	4b36      	ldr	r3, [pc, #216]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002c8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c90:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c92:	4b34      	ldr	r3, [pc, #208]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c98:	4b32      	ldr	r3, [pc, #200]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c9e:	4b31      	ldr	r3, [pc, #196]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ca4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ca6:	4b2f      	ldr	r3, [pc, #188]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cac:	4b2d      	ldr	r3, [pc, #180]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002cb2:	4b2c      	ldr	r3, [pc, #176]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002cb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cb8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cba:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cc0:	4b28      	ldr	r3, [pc, #160]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002cc6:	4827      	ldr	r0, [pc, #156]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002cc8:	f000 faa0 	bl	800320c <HAL_DMA_Init>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002cd2:	f7ff fea1 	bl	8002a18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a22      	ldr	r2, [pc, #136]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002cda:	635a      	str	r2, [r3, #52]	; 0x34
 8002cdc:	4a21      	ldr	r2, [pc, #132]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002ce2:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <HAL_UART_MspInit+0x164>)
 8002ce4:	4a22      	ldr	r2, [pc, #136]	; (8002d70 <HAL_UART_MspInit+0x168>)
 8002ce6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002ce8:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <HAL_UART_MspInit+0x164>)
 8002cea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cee:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cf0:	4b1e      	ldr	r3, [pc, #120]	; (8002d6c <HAL_UART_MspInit+0x164>)
 8002cf2:	2240      	movs	r2, #64	; 0x40
 8002cf4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <HAL_UART_MspInit+0x164>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <HAL_UART_MspInit+0x164>)
 8002cfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d02:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d04:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_UART_MspInit+0x164>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d0a:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <HAL_UART_MspInit+0x164>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002d10:	4b16      	ldr	r3, [pc, #88]	; (8002d6c <HAL_UART_MspInit+0x164>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <HAL_UART_MspInit+0x164>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d1c:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <HAL_UART_MspInit+0x164>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002d22:	4812      	ldr	r0, [pc, #72]	; (8002d6c <HAL_UART_MspInit+0x164>)
 8002d24:	f000 fa72 	bl	800320c <HAL_DMA_Init>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002d2e:	f7ff fe73 	bl	8002a18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a0d      	ldr	r2, [pc, #52]	; (8002d6c <HAL_UART_MspInit+0x164>)
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
 8002d38:	4a0c      	ldr	r2, [pc, #48]	; (8002d6c <HAL_UART_MspInit+0x164>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2100      	movs	r1, #0
 8002d42:	2026      	movs	r0, #38	; 0x26
 8002d44:	f000 fa2b 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d48:	2026      	movs	r0, #38	; 0x26
 8002d4a:	f000 fa44 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d4e:	bf00      	nop
 8002d50:	3728      	adds	r7, #40	; 0x28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40004400 	.word	0x40004400
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	2000269c 	.word	0x2000269c
 8002d68:	40026088 	.word	0x40026088
 8002d6c:	2000277c 	.word	0x2000277c
 8002d70:	400260a0 	.word	0x400260a0

08002d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d78:	e7fe      	b.n	8002d78 <NMI_Handler+0x4>

08002d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d7e:	e7fe      	b.n	8002d7e <HardFault_Handler+0x4>

08002d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d84:	e7fe      	b.n	8002d84 <MemManage_Handler+0x4>

08002d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d8a:	e7fe      	b.n	8002d8a <BusFault_Handler+0x4>

08002d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d90:	e7fe      	b.n	8002d90 <UsageFault_Handler+0x4>

08002d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dc0:	f000 f8f2 	bl	8002fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <DMA1_Stream5_IRQHandler+0x10>)
 8002dce:	f000 fb45 	bl	800345c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	2000269c 	.word	0x2000269c

08002ddc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002de0:	4802      	ldr	r0, [pc, #8]	; (8002dec <DMA1_Stream6_IRQHandler+0x10>)
 8002de2:	f000 fb3b 	bl	800345c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	2000277c 	.word	0x2000277c

08002df0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002df4:	4802      	ldr	r0, [pc, #8]	; (8002e00 <USART2_IRQHandler+0x10>)
 8002df6:	f002 fc67 	bl	80056c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	2000281c 	.word	0x2000281c

08002e04 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e08:	4802      	ldr	r0, [pc, #8]	; (8002e14 <TIM5_IRQHandler+0x10>)
 8002e0a:	f001 fd26 	bl	800485a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	200026fc 	.word	0x200026fc

08002e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e20:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <_sbrk+0x5c>)
 8002e22:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <_sbrk+0x60>)
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <_sbrk+0x64>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d102      	bne.n	8002e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e34:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <_sbrk+0x64>)
 8002e36:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <_sbrk+0x68>)
 8002e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <_sbrk+0x64>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d207      	bcs.n	8002e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e48:	f003 faee 	bl	8006428 <__errno>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	230c      	movs	r3, #12
 8002e50:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295
 8002e56:	e009      	b.n	8002e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <_sbrk+0x64>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <_sbrk+0x64>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	4a05      	ldr	r2, [pc, #20]	; (8002e7c <_sbrk+0x64>)
 8002e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20020000 	.word	0x20020000
 8002e78:	00000400 	.word	0x00000400
 8002e7c:	20002690 	.word	0x20002690
 8002e80:	20002868 	.word	0x20002868

08002e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <SystemInit+0x28>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8e:	4a07      	ldr	r2, [pc, #28]	; (8002eac <SystemInit+0x28>)
 8002e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <SystemInit+0x28>)
 8002e9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e9e:	609a      	str	r2, [r3, #8]
#endif
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ee8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002eb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002eb6:	e003      	b.n	8002ec0 <LoopCopyDataInit>

08002eb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002eba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ebc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ebe:	3104      	adds	r1, #4

08002ec0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ec0:	480b      	ldr	r0, [pc, #44]	; (8002ef0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ec4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ec6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ec8:	d3f6      	bcc.n	8002eb8 <CopyDataInit>
  ldr  r2, =_sbss
 8002eca:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ecc:	e002      	b.n	8002ed4 <LoopFillZerobss>

08002ece <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ece:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ed0:	f842 3b04 	str.w	r3, [r2], #4

08002ed4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ed4:	4b09      	ldr	r3, [pc, #36]	; (8002efc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ed6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ed8:	d3f9      	bcc.n	8002ece <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002eda:	f7ff ffd3 	bl	8002e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ede:	f003 faa9 	bl	8006434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ee2:	f7fd ff99 	bl	8000e18 <main>
  bx  lr    
 8002ee6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ee8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002eec:	080065e4 	.word	0x080065e4
  ldr  r0, =_sdata
 8002ef0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ef4:	20000118 	.word	0x20000118
  ldr  r2, =_sbss
 8002ef8:	20000118 	.word	0x20000118
  ldr  r3, = _ebss
 8002efc:	20002864 	.word	0x20002864

08002f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f00:	e7fe      	b.n	8002f00 <ADC_IRQHandler>
	...

08002f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f08:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <HAL_Init+0x40>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0d      	ldr	r2, [pc, #52]	; (8002f44 <HAL_Init+0x40>)
 8002f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_Init+0x40>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <HAL_Init+0x40>)
 8002f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f20:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <HAL_Init+0x40>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a07      	ldr	r2, [pc, #28]	; (8002f44 <HAL_Init+0x40>)
 8002f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f2c:	2003      	movs	r0, #3
 8002f2e:	f000 f92b 	bl	8003188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f32:	2000      	movs	r0, #0
 8002f34:	f000 f808 	bl	8002f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f38:	f7ff fd72 	bl	8002a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40023c00 	.word	0x40023c00

08002f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f50:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <HAL_InitTick+0x54>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <HAL_InitTick+0x58>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f943 	bl	80031f2 <HAL_SYSTICK_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e00e      	b.n	8002f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b0f      	cmp	r3, #15
 8002f7a:	d80a      	bhi.n	8002f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	f04f 30ff 	mov.w	r0, #4294967295
 8002f84:	f000 f90b 	bl	800319e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f88:	4a06      	ldr	r2, [pc, #24]	; (8002fa4 <HAL_InitTick+0x5c>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e000      	b.n	8002f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	200000a8 	.word	0x200000a8
 8002fa0:	200000b0 	.word	0x200000b0
 8002fa4:	200000ac 	.word	0x200000ac

08002fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_IncTick+0x20>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_IncTick+0x24>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	4a04      	ldr	r2, [pc, #16]	; (8002fcc <HAL_IncTick+0x24>)
 8002fba:	6013      	str	r3, [r2, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	200000b0 	.word	0x200000b0
 8002fcc:	2000285c 	.word	0x2000285c

08002fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd4:	4b03      	ldr	r3, [pc, #12]	; (8002fe4 <HAL_GetTick+0x14>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	2000285c 	.word	0x2000285c

08002fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003004:	4013      	ands	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301a:	4a04      	ldr	r2, [pc, #16]	; (800302c <__NVIC_SetPriorityGrouping+0x44>)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	60d3      	str	r3, [r2, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <__NVIC_GetPriorityGrouping+0x18>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	f003 0307 	and.w	r3, r3, #7
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	2b00      	cmp	r3, #0
 800305c:	db0b      	blt.n	8003076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	4907      	ldr	r1, [pc, #28]	; (8003084 <__NVIC_EnableIRQ+0x38>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2001      	movs	r0, #1
 800306e:	fa00 f202 	lsl.w	r2, r0, r2
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000e100 	.word	0xe000e100

08003088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003098:	2b00      	cmp	r3, #0
 800309a:	db0a      	blt.n	80030b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	490c      	ldr	r1, [pc, #48]	; (80030d4 <__NVIC_SetPriority+0x4c>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	0112      	lsls	r2, r2, #4
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	440b      	add	r3, r1
 80030ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b0:	e00a      	b.n	80030c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4908      	ldr	r1, [pc, #32]	; (80030d8 <__NVIC_SetPriority+0x50>)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	3b04      	subs	r3, #4
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	440b      	add	r3, r1
 80030c6:	761a      	strb	r2, [r3, #24]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000e100 	.word	0xe000e100
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	; 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f1c3 0307 	rsb	r3, r3, #7
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	bf28      	it	cs
 80030fa:	2304      	movcs	r3, #4
 80030fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3304      	adds	r3, #4
 8003102:	2b06      	cmp	r3, #6
 8003104:	d902      	bls.n	800310c <NVIC_EncodePriority+0x30>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3b03      	subs	r3, #3
 800310a:	e000      	b.n	800310e <NVIC_EncodePriority+0x32>
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	f04f 32ff 	mov.w	r2, #4294967295
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43da      	mvns	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	401a      	ands	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003124:	f04f 31ff 	mov.w	r1, #4294967295
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	43d9      	mvns	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	4313      	orrs	r3, r2
         );
}
 8003136:	4618      	mov	r0, r3
 8003138:	3724      	adds	r7, #36	; 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3b01      	subs	r3, #1
 8003150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003154:	d301      	bcc.n	800315a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003156:	2301      	movs	r3, #1
 8003158:	e00f      	b.n	800317a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800315a:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <SysTick_Config+0x40>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3b01      	subs	r3, #1
 8003160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003162:	210f      	movs	r1, #15
 8003164:	f04f 30ff 	mov.w	r0, #4294967295
 8003168:	f7ff ff8e 	bl	8003088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <SysTick_Config+0x40>)
 800316e:	2200      	movs	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003172:	4b04      	ldr	r3, [pc, #16]	; (8003184 <SysTick_Config+0x40>)
 8003174:	2207      	movs	r2, #7
 8003176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	e000e010 	.word	0xe000e010

08003188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ff29 	bl	8002fe8 <__NVIC_SetPriorityGrouping>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b0:	f7ff ff3e 	bl	8003030 <__NVIC_GetPriorityGrouping>
 80031b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	6978      	ldr	r0, [r7, #20]
 80031bc:	f7ff ff8e 	bl	80030dc <NVIC_EncodePriority>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff5d 	bl	8003088 <__NVIC_SetPriority>
}
 80031ce:	bf00      	nop
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff31 	bl	800304c <__NVIC_EnableIRQ>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ffa2 	bl	8003144 <SysTick_Config>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003218:	f7ff feda 	bl	8002fd0 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e099      	b.n	800335c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003248:	e00f      	b.n	800326a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800324a:	f7ff fec1 	bl	8002fd0 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b05      	cmp	r3, #5
 8003256:	d908      	bls.n	800326a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2203      	movs	r2, #3
 8003262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e078      	b.n	800335c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e8      	bne.n	800324a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4b38      	ldr	r3, [pc, #224]	; (8003364 <HAL_DMA_Init+0x158>)
 8003284:	4013      	ands	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003296:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d107      	bne.n	80032d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	4313      	orrs	r3, r2
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f023 0307 	bic.w	r3, r3, #7
 80032ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d117      	bne.n	800332e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00e      	beq.n	800332e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fa91 	bl	8003838 <DMA_CheckFifoParam>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2240      	movs	r2, #64	; 0x40
 8003320:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800332a:	2301      	movs	r3, #1
 800332c:	e016      	b.n	800335c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fa48 	bl	80037cc <DMA_CalcBaseAndBitshift>
 800333c:	4603      	mov	r3, r0
 800333e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	223f      	movs	r2, #63	; 0x3f
 8003346:	409a      	lsls	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	f010803f 	.word	0xf010803f

08003368 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_DMA_Start_IT+0x26>
 800338a:	2302      	movs	r3, #2
 800338c:	e040      	b.n	8003410 <HAL_DMA_Start_IT+0xa8>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d12f      	bne.n	8003402 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2202      	movs	r2, #2
 80033a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f9da 	bl	8003770 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c0:	223f      	movs	r2, #63	; 0x3f
 80033c2:	409a      	lsls	r2, r3
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0216 	orr.w	r2, r2, #22
 80033d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0208 	orr.w	r2, r2, #8
 80033ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	e005      	b.n	800340e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800340a:	2302      	movs	r3, #2
 800340c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800340e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d004      	beq.n	8003436 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e00c      	b.n	8003450 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2205      	movs	r2, #5
 800343a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0201 	bic.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003468:	4b92      	ldr	r3, [pc, #584]	; (80036b4 <HAL_DMA_IRQHandler+0x258>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a92      	ldr	r2, [pc, #584]	; (80036b8 <HAL_DMA_IRQHandler+0x25c>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	0a9b      	lsrs	r3, r3, #10
 8003474:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	2208      	movs	r2, #8
 8003488:	409a      	lsls	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4013      	ands	r3, r2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d01a      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d013      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0204 	bic.w	r2, r2, #4
 80034ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b4:	2208      	movs	r2, #8
 80034b6:	409a      	lsls	r2, r3
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c0:	f043 0201 	orr.w	r2, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034cc:	2201      	movs	r2, #1
 80034ce:	409a      	lsls	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d012      	beq.n	80034fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ea:	2201      	movs	r2, #1
 80034ec:	409a      	lsls	r2, r3
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f6:	f043 0202 	orr.w	r2, r3, #2
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003502:	2204      	movs	r2, #4
 8003504:	409a      	lsls	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d012      	beq.n	8003534 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00b      	beq.n	8003534 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003520:	2204      	movs	r2, #4
 8003522:	409a      	lsls	r2, r3
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352c:	f043 0204 	orr.w	r2, r3, #4
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003538:	2210      	movs	r2, #16
 800353a:	409a      	lsls	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d043      	beq.n	80035cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d03c      	beq.n	80035cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003556:	2210      	movs	r2, #16
 8003558:	409a      	lsls	r2, r3
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d018      	beq.n	800359e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d108      	bne.n	800358c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d024      	beq.n	80035cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
 800358a:	e01f      	b.n	80035cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01b      	beq.n	80035cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
 800359c:	e016      	b.n	80035cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d107      	bne.n	80035bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0208 	bic.w	r2, r2, #8
 80035ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	2220      	movs	r2, #32
 80035d2:	409a      	lsls	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 808e 	beq.w	80036fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0310 	and.w	r3, r3, #16
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8086 	beq.w	80036fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f2:	2220      	movs	r2, #32
 80035f4:	409a      	lsls	r2, r3
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b05      	cmp	r3, #5
 8003604:	d136      	bne.n	8003674 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0216 	bic.w	r2, r2, #22
 8003614:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003624:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d103      	bne.n	8003636 <HAL_DMA_IRQHandler+0x1da>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003632:	2b00      	cmp	r3, #0
 8003634:	d007      	beq.n	8003646 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0208 	bic.w	r2, r2, #8
 8003644:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364a:	223f      	movs	r2, #63	; 0x3f
 800364c:	409a      	lsls	r2, r3
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003666:	2b00      	cmp	r3, #0
 8003668:	d07d      	beq.n	8003766 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
        }
        return;
 8003672:	e078      	b.n	8003766 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01c      	beq.n	80036bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d108      	bne.n	80036a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003694:	2b00      	cmp	r3, #0
 8003696:	d030      	beq.n	80036fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4798      	blx	r3
 80036a0:	e02b      	b.n	80036fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d027      	beq.n	80036fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	4798      	blx	r3
 80036b2:	e022      	b.n	80036fa <HAL_DMA_IRQHandler+0x29e>
 80036b4:	200000a8 	.word	0x200000a8
 80036b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10f      	bne.n	80036ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0210 	bic.w	r2, r2, #16
 80036d8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d032      	beq.n	8003768 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d022      	beq.n	8003754 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2205      	movs	r2, #5
 8003712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	3301      	adds	r3, #1
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	429a      	cmp	r2, r3
 8003730:	d307      	bcc.n	8003742 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f2      	bne.n	8003726 <HAL_DMA_IRQHandler+0x2ca>
 8003740:	e000      	b.n	8003744 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003742:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
 8003764:	e000      	b.n	8003768 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003766:	bf00      	nop
    }
  }
}
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop

08003770 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800378c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b40      	cmp	r3, #64	; 0x40
 800379c:	d108      	bne.n	80037b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037ae:	e007      	b.n	80037c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	60da      	str	r2, [r3, #12]
}
 80037c0:	bf00      	nop
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	3b10      	subs	r3, #16
 80037dc:	4a14      	ldr	r2, [pc, #80]	; (8003830 <DMA_CalcBaseAndBitshift+0x64>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	091b      	lsrs	r3, r3, #4
 80037e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037e6:	4a13      	ldr	r2, [pc, #76]	; (8003834 <DMA_CalcBaseAndBitshift+0x68>)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d909      	bls.n	800380e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003802:	f023 0303 	bic.w	r3, r3, #3
 8003806:	1d1a      	adds	r2, r3, #4
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	659a      	str	r2, [r3, #88]	; 0x58
 800380c:	e007      	b.n	800381e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003816:	f023 0303 	bic.w	r3, r3, #3
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	aaaaaaab 	.word	0xaaaaaaab
 8003834:	080065cc 	.word	0x080065cc

08003838 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d11f      	bne.n	8003892 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b03      	cmp	r3, #3
 8003856:	d855      	bhi.n	8003904 <DMA_CheckFifoParam+0xcc>
 8003858:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <DMA_CheckFifoParam+0x28>)
 800385a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385e:	bf00      	nop
 8003860:	08003871 	.word	0x08003871
 8003864:	08003883 	.word	0x08003883
 8003868:	08003871 	.word	0x08003871
 800386c:	08003905 	.word	0x08003905
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d045      	beq.n	8003908 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003880:	e042      	b.n	8003908 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800388a:	d13f      	bne.n	800390c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003890:	e03c      	b.n	800390c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800389a:	d121      	bne.n	80038e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d836      	bhi.n	8003910 <DMA_CheckFifoParam+0xd8>
 80038a2:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <DMA_CheckFifoParam+0x70>)
 80038a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a8:	080038b9 	.word	0x080038b9
 80038ac:	080038bf 	.word	0x080038bf
 80038b0:	080038b9 	.word	0x080038b9
 80038b4:	080038d1 	.word	0x080038d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
      break;
 80038bc:	e02f      	b.n	800391e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d024      	beq.n	8003914 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ce:	e021      	b.n	8003914 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038d8:	d11e      	bne.n	8003918 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038de:	e01b      	b.n	8003918 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d902      	bls.n	80038ec <DMA_CheckFifoParam+0xb4>
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d003      	beq.n	80038f2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038ea:	e018      	b.n	800391e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
      break;
 80038f0:	e015      	b.n	800391e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00e      	beq.n	800391c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
      break;
 8003902:	e00b      	b.n	800391c <DMA_CheckFifoParam+0xe4>
      break;
 8003904:	bf00      	nop
 8003906:	e00a      	b.n	800391e <DMA_CheckFifoParam+0xe6>
      break;
 8003908:	bf00      	nop
 800390a:	e008      	b.n	800391e <DMA_CheckFifoParam+0xe6>
      break;
 800390c:	bf00      	nop
 800390e:	e006      	b.n	800391e <DMA_CheckFifoParam+0xe6>
      break;
 8003910:	bf00      	nop
 8003912:	e004      	b.n	800391e <DMA_CheckFifoParam+0xe6>
      break;
 8003914:	bf00      	nop
 8003916:	e002      	b.n	800391e <DMA_CheckFifoParam+0xe6>
      break;   
 8003918:	bf00      	nop
 800391a:	e000      	b.n	800391e <DMA_CheckFifoParam+0xe6>
      break;
 800391c:	bf00      	nop
    }
  } 
  
  return status; 
 800391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800392c:	b480      	push	{r7}
 800392e:	b089      	sub	sp, #36	; 0x24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	e159      	b.n	8003bfc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003948:	2201      	movs	r2, #1
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4013      	ands	r3, r2
 800395a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	429a      	cmp	r2, r3
 8003962:	f040 8148 	bne.w	8003bf6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d00b      	beq.n	8003986 <HAL_GPIO_Init+0x5a>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d007      	beq.n	8003986 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800397a:	2b11      	cmp	r3, #17
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b12      	cmp	r3, #18
 8003984:	d130      	bne.n	80039e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	2203      	movs	r2, #3
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039bc:	2201      	movs	r2, #1
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 0201 	and.w	r2, r3, #1
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	2203      	movs	r2, #3
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4013      	ands	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d003      	beq.n	8003a28 <HAL_GPIO_Init+0xfc>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b12      	cmp	r3, #18
 8003a26:	d123      	bne.n	8003a70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	08da      	lsrs	r2, r3, #3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3208      	adds	r2, #8
 8003a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	220f      	movs	r2, #15
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	08da      	lsrs	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3208      	adds	r2, #8
 8003a6a:	69b9      	ldr	r1, [r7, #24]
 8003a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 0203 	and.w	r2, r3, #3
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80a2 	beq.w	8003bf6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	4b56      	ldr	r3, [pc, #344]	; (8003c10 <HAL_GPIO_Init+0x2e4>)
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	4a55      	ldr	r2, [pc, #340]	; (8003c10 <HAL_GPIO_Init+0x2e4>)
 8003abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ac2:	4b53      	ldr	r3, [pc, #332]	; (8003c10 <HAL_GPIO_Init+0x2e4>)
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ace:	4a51      	ldr	r2, [pc, #324]	; (8003c14 <HAL_GPIO_Init+0x2e8>)
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	089b      	lsrs	r3, r3, #2
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	220f      	movs	r2, #15
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	43db      	mvns	r3, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4013      	ands	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a48      	ldr	r2, [pc, #288]	; (8003c18 <HAL_GPIO_Init+0x2ec>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d019      	beq.n	8003b2e <HAL_GPIO_Init+0x202>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a47      	ldr	r2, [pc, #284]	; (8003c1c <HAL_GPIO_Init+0x2f0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d013      	beq.n	8003b2a <HAL_GPIO_Init+0x1fe>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a46      	ldr	r2, [pc, #280]	; (8003c20 <HAL_GPIO_Init+0x2f4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00d      	beq.n	8003b26 <HAL_GPIO_Init+0x1fa>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a45      	ldr	r2, [pc, #276]	; (8003c24 <HAL_GPIO_Init+0x2f8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d007      	beq.n	8003b22 <HAL_GPIO_Init+0x1f6>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a44      	ldr	r2, [pc, #272]	; (8003c28 <HAL_GPIO_Init+0x2fc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d101      	bne.n	8003b1e <HAL_GPIO_Init+0x1f2>
 8003b1a:	2304      	movs	r3, #4
 8003b1c:	e008      	b.n	8003b30 <HAL_GPIO_Init+0x204>
 8003b1e:	2307      	movs	r3, #7
 8003b20:	e006      	b.n	8003b30 <HAL_GPIO_Init+0x204>
 8003b22:	2303      	movs	r3, #3
 8003b24:	e004      	b.n	8003b30 <HAL_GPIO_Init+0x204>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e002      	b.n	8003b30 <HAL_GPIO_Init+0x204>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <HAL_GPIO_Init+0x204>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	f002 0203 	and.w	r2, r2, #3
 8003b36:	0092      	lsls	r2, r2, #2
 8003b38:	4093      	lsls	r3, r2
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b40:	4934      	ldr	r1, [pc, #208]	; (8003c14 <HAL_GPIO_Init+0x2e8>)
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	089b      	lsrs	r3, r3, #2
 8003b46:	3302      	adds	r3, #2
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b4e:	4b37      	ldr	r3, [pc, #220]	; (8003c2c <HAL_GPIO_Init+0x300>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b72:	4a2e      	ldr	r2, [pc, #184]	; (8003c2c <HAL_GPIO_Init+0x300>)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b78:	4b2c      	ldr	r3, [pc, #176]	; (8003c2c <HAL_GPIO_Init+0x300>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b9c:	4a23      	ldr	r2, [pc, #140]	; (8003c2c <HAL_GPIO_Init+0x300>)
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ba2:	4b22      	ldr	r3, [pc, #136]	; (8003c2c <HAL_GPIO_Init+0x300>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	43db      	mvns	r3, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bc6:	4a19      	ldr	r2, [pc, #100]	; (8003c2c <HAL_GPIO_Init+0x300>)
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bcc:	4b17      	ldr	r3, [pc, #92]	; (8003c2c <HAL_GPIO_Init+0x300>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bf0:	4a0e      	ldr	r2, [pc, #56]	; (8003c2c <HAL_GPIO_Init+0x300>)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	61fb      	str	r3, [r7, #28]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	2b0f      	cmp	r3, #15
 8003c00:	f67f aea2 	bls.w	8003948 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c04:	bf00      	nop
 8003c06:	3724      	adds	r7, #36	; 0x24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	40023800 	.word	0x40023800
 8003c14:	40013800 	.word	0x40013800
 8003c18:	40020000 	.word	0x40020000
 8003c1c:	40020400 	.word	0x40020400
 8003c20:	40020800 	.word	0x40020800
 8003c24:	40020c00 	.word	0x40020c00
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40013c00 	.word	0x40013c00

08003c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	807b      	strh	r3, [r7, #2]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c40:	787b      	ldrb	r3, [r7, #1]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c46:	887a      	ldrh	r2, [r7, #2]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c4c:	e003      	b.n	8003c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c4e:	887b      	ldrh	r3, [r7, #2]
 8003c50:	041a      	lsls	r2, r3, #16
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	619a      	str	r2, [r3, #24]
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e25b      	b.n	800412e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d075      	beq.n	8003d6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c82:	4ba3      	ldr	r3, [pc, #652]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d00c      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c8e:	4ba0      	ldr	r3, [pc, #640]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d112      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c9a:	4b9d      	ldr	r3, [pc, #628]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca6:	d10b      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca8:	4b99      	ldr	r3, [pc, #612]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d05b      	beq.n	8003d6c <HAL_RCC_OscConfig+0x108>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d157      	bne.n	8003d6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e236      	b.n	800412e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc8:	d106      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x74>
 8003cca:	4b91      	ldr	r3, [pc, #580]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a90      	ldr	r2, [pc, #576]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e01d      	b.n	8003d14 <HAL_RCC_OscConfig+0xb0>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x98>
 8003ce2:	4b8b      	ldr	r3, [pc, #556]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a8a      	ldr	r2, [pc, #552]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	4b88      	ldr	r3, [pc, #544]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a87      	ldr	r2, [pc, #540]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e00b      	b.n	8003d14 <HAL_RCC_OscConfig+0xb0>
 8003cfc:	4b84      	ldr	r3, [pc, #528]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a83      	ldr	r2, [pc, #524]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	4b81      	ldr	r3, [pc, #516]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a80      	ldr	r2, [pc, #512]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d013      	beq.n	8003d44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7ff f958 	bl	8002fd0 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d24:	f7ff f954 	bl	8002fd0 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e1fb      	b.n	800412e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	4b76      	ldr	r3, [pc, #472]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0xc0>
 8003d42:	e014      	b.n	8003d6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d44:	f7ff f944 	bl	8002fd0 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d4c:	f7ff f940 	bl	8002fd0 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b64      	cmp	r3, #100	; 0x64
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e1e7      	b.n	800412e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5e:	4b6c      	ldr	r3, [pc, #432]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0xe8>
 8003d6a:	e000      	b.n	8003d6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d063      	beq.n	8003e42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d7a:	4b65      	ldr	r3, [pc, #404]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d86:	4b62      	ldr	r3, [pc, #392]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d11c      	bne.n	8003dcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d92:	4b5f      	ldr	r3, [pc, #380]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d116      	bne.n	8003dcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9e:	4b5c      	ldr	r3, [pc, #368]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <HAL_RCC_OscConfig+0x152>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d001      	beq.n	8003db6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e1bb      	b.n	800412e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db6:	4b56      	ldr	r3, [pc, #344]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4952      	ldr	r1, [pc, #328]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dca:	e03a      	b.n	8003e42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d020      	beq.n	8003e16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dd4:	4b4f      	ldr	r3, [pc, #316]	; (8003f14 <HAL_RCC_OscConfig+0x2b0>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dda:	f7ff f8f9 	bl	8002fd0 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003de2:	f7ff f8f5 	bl	8002fd0 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e19c      	b.n	800412e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df4:	4b46      	ldr	r3, [pc, #280]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e00:	4b43      	ldr	r3, [pc, #268]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4940      	ldr	r1, [pc, #256]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	600b      	str	r3, [r1, #0]
 8003e14:	e015      	b.n	8003e42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e16:	4b3f      	ldr	r3, [pc, #252]	; (8003f14 <HAL_RCC_OscConfig+0x2b0>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7ff f8d8 	bl	8002fd0 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e24:	f7ff f8d4 	bl	8002fd0 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e17b      	b.n	800412e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e36:	4b36      	ldr	r3, [pc, #216]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d030      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d016      	beq.n	8003e84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e56:	4b30      	ldr	r3, [pc, #192]	; (8003f18 <HAL_RCC_OscConfig+0x2b4>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5c:	f7ff f8b8 	bl	8002fd0 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e64:	f7ff f8b4 	bl	8002fd0 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e15b      	b.n	800412e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e76:	4b26      	ldr	r3, [pc, #152]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0f0      	beq.n	8003e64 <HAL_RCC_OscConfig+0x200>
 8003e82:	e015      	b.n	8003eb0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e84:	4b24      	ldr	r3, [pc, #144]	; (8003f18 <HAL_RCC_OscConfig+0x2b4>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e8a:	f7ff f8a1 	bl	8002fd0 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e92:	f7ff f89d 	bl	8002fd0 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e144      	b.n	800412e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea4:	4b1a      	ldr	r3, [pc, #104]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f0      	bne.n	8003e92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80a0 	beq.w	8003ffe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ec2:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10f      	bne.n	8003eee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	4a0e      	ldr	r2, [pc, #56]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003edc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ede:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eea:	2301      	movs	r3, #1
 8003eec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_RCC_OscConfig+0x2b8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d121      	bne.n	8003f3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003efa:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <HAL_RCC_OscConfig+0x2b8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a07      	ldr	r2, [pc, #28]	; (8003f1c <HAL_RCC_OscConfig+0x2b8>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f06:	f7ff f863 	bl	8002fd0 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0c:	e011      	b.n	8003f32 <HAL_RCC_OscConfig+0x2ce>
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800
 8003f14:	42470000 	.word	0x42470000
 8003f18:	42470e80 	.word	0x42470e80
 8003f1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f20:	f7ff f856 	bl	8002fd0 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e0fd      	b.n	800412e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f32:	4b81      	ldr	r3, [pc, #516]	; (8004138 <HAL_RCC_OscConfig+0x4d4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d106      	bne.n	8003f54 <HAL_RCC_OscConfig+0x2f0>
 8003f46:	4b7d      	ldr	r3, [pc, #500]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	4a7c      	ldr	r2, [pc, #496]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	6713      	str	r3, [r2, #112]	; 0x70
 8003f52:	e01c      	b.n	8003f8e <HAL_RCC_OscConfig+0x32a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b05      	cmp	r3, #5
 8003f5a:	d10c      	bne.n	8003f76 <HAL_RCC_OscConfig+0x312>
 8003f5c:	4b77      	ldr	r3, [pc, #476]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	4a76      	ldr	r2, [pc, #472]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 8003f62:	f043 0304 	orr.w	r3, r3, #4
 8003f66:	6713      	str	r3, [r2, #112]	; 0x70
 8003f68:	4b74      	ldr	r3, [pc, #464]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	4a73      	ldr	r2, [pc, #460]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6713      	str	r3, [r2, #112]	; 0x70
 8003f74:	e00b      	b.n	8003f8e <HAL_RCC_OscConfig+0x32a>
 8003f76:	4b71      	ldr	r3, [pc, #452]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7a:	4a70      	ldr	r2, [pc, #448]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	6713      	str	r3, [r2, #112]	; 0x70
 8003f82:	4b6e      	ldr	r3, [pc, #440]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	4a6d      	ldr	r2, [pc, #436]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 8003f88:	f023 0304 	bic.w	r3, r3, #4
 8003f8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d015      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f96:	f7ff f81b 	bl	8002fd0 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9c:	e00a      	b.n	8003fb4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f9e:	f7ff f817 	bl	8002fd0 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0bc      	b.n	800412e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb4:	4b61      	ldr	r3, [pc, #388]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ee      	beq.n	8003f9e <HAL_RCC_OscConfig+0x33a>
 8003fc0:	e014      	b.n	8003fec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc2:	f7ff f805 	bl	8002fd0 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc8:	e00a      	b.n	8003fe0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fca:	f7ff f801 	bl	8002fd0 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e0a6      	b.n	800412e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe0:	4b56      	ldr	r3, [pc, #344]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1ee      	bne.n	8003fca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d105      	bne.n	8003ffe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff2:	4b52      	ldr	r3, [pc, #328]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	4a51      	ldr	r2, [pc, #324]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 8003ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 8092 	beq.w	800412c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004008:	4b4c      	ldr	r3, [pc, #304]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b08      	cmp	r3, #8
 8004012:	d05c      	beq.n	80040ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d141      	bne.n	80040a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401c:	4b48      	ldr	r3, [pc, #288]	; (8004140 <HAL_RCC_OscConfig+0x4dc>)
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004022:	f7fe ffd5 	bl	8002fd0 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800402a:	f7fe ffd1 	bl	8002fd0 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e078      	b.n	800412e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403c:	4b3f      	ldr	r3, [pc, #252]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1f0      	bne.n	800402a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69da      	ldr	r2, [r3, #28]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	019b      	lsls	r3, r3, #6
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	085b      	lsrs	r3, r3, #1
 8004060:	3b01      	subs	r3, #1
 8004062:	041b      	lsls	r3, r3, #16
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406a:	061b      	lsls	r3, r3, #24
 800406c:	4933      	ldr	r1, [pc, #204]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 800406e:	4313      	orrs	r3, r2
 8004070:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004072:	4b33      	ldr	r3, [pc, #204]	; (8004140 <HAL_RCC_OscConfig+0x4dc>)
 8004074:	2201      	movs	r2, #1
 8004076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004078:	f7fe ffaa 	bl	8002fd0 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004080:	f7fe ffa6 	bl	8002fd0 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e04d      	b.n	800412e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004092:	4b2a      	ldr	r3, [pc, #168]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0x41c>
 800409e:	e045      	b.n	800412c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a0:	4b27      	ldr	r3, [pc, #156]	; (8004140 <HAL_RCC_OscConfig+0x4dc>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a6:	f7fe ff93 	bl	8002fd0 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ae:	f7fe ff8f 	bl	8002fd0 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e036      	b.n	800412e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c0:	4b1e      	ldr	r3, [pc, #120]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f0      	bne.n	80040ae <HAL_RCC_OscConfig+0x44a>
 80040cc:	e02e      	b.n	800412c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e029      	b.n	800412e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040da:	4b18      	ldr	r3, [pc, #96]	; (800413c <HAL_RCC_OscConfig+0x4d8>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d11c      	bne.n	8004128 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d115      	bne.n	8004128 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004102:	4013      	ands	r3, r2
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004108:	4293      	cmp	r3, r2
 800410a:	d10d      	bne.n	8004128 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004116:	429a      	cmp	r2, r3
 8004118:	d106      	bne.n	8004128 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e000      	b.n	800412e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40007000 	.word	0x40007000
 800413c:	40023800 	.word	0x40023800
 8004140:	42470060 	.word	0x42470060

08004144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e0cc      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004158:	4b68      	ldr	r3, [pc, #416]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d90c      	bls.n	8004180 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004166:	4b65      	ldr	r3, [pc, #404]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416e:	4b63      	ldr	r3, [pc, #396]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d001      	beq.n	8004180 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0b8      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d020      	beq.n	80041ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004198:	4b59      	ldr	r3, [pc, #356]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	4a58      	ldr	r2, [pc, #352]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041b0:	4b53      	ldr	r3, [pc, #332]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	4a52      	ldr	r2, [pc, #328]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041bc:	4b50      	ldr	r3, [pc, #320]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	494d      	ldr	r1, [pc, #308]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d044      	beq.n	8004264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d107      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e2:	4b47      	ldr	r3, [pc, #284]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d119      	bne.n	8004222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e07f      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d003      	beq.n	8004202 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d107      	bne.n	8004212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004202:	4b3f      	ldr	r3, [pc, #252]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e06f      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004212:	4b3b      	ldr	r3, [pc, #236]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e067      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004222:	4b37      	ldr	r3, [pc, #220]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f023 0203 	bic.w	r2, r3, #3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	4934      	ldr	r1, [pc, #208]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	4313      	orrs	r3, r2
 8004232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004234:	f7fe fecc 	bl	8002fd0 <HAL_GetTick>
 8004238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	e00a      	b.n	8004252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800423c:	f7fe fec8 	bl	8002fd0 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	; 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e04f      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004252:	4b2b      	ldr	r3, [pc, #172]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 020c 	and.w	r2, r3, #12
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	429a      	cmp	r2, r3
 8004262:	d1eb      	bne.n	800423c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004264:	4b25      	ldr	r3, [pc, #148]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d20c      	bcs.n	800428c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004272:	4b22      	ldr	r3, [pc, #136]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800427a:	4b20      	ldr	r3, [pc, #128]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d001      	beq.n	800428c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e032      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004298:	4b19      	ldr	r3, [pc, #100]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4916      	ldr	r1, [pc, #88]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d009      	beq.n	80042ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042b6:	4b12      	ldr	r3, [pc, #72]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	490e      	ldr	r1, [pc, #56]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ca:	f000 f821 	bl	8004310 <HAL_RCC_GetSysClockFreq>
 80042ce:	4601      	mov	r1, r0
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	4a0a      	ldr	r2, [pc, #40]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 80042dc:	5cd3      	ldrb	r3, [r2, r3]
 80042de:	fa21 f303 	lsr.w	r3, r1, r3
 80042e2:	4a09      	ldr	r2, [pc, #36]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80042e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042e6:	4b09      	ldr	r3, [pc, #36]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe fe2c 	bl	8002f48 <HAL_InitTick>

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40023c00 	.word	0x40023c00
 8004300:	40023800 	.word	0x40023800
 8004304:	080065b4 	.word	0x080065b4
 8004308:	200000a8 	.word	0x200000a8
 800430c:	200000ac 	.word	0x200000ac

08004310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	2300      	movs	r3, #0
 8004320:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004326:	4b63      	ldr	r3, [pc, #396]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	2b04      	cmp	r3, #4
 8004330:	d007      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0x32>
 8004332:	2b08      	cmp	r3, #8
 8004334:	d008      	beq.n	8004348 <HAL_RCC_GetSysClockFreq+0x38>
 8004336:	2b00      	cmp	r3, #0
 8004338:	f040 80b4 	bne.w	80044a4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800433c:	4b5e      	ldr	r3, [pc, #376]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800433e:	60bb      	str	r3, [r7, #8]
       break;
 8004340:	e0b3      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004342:	4b5e      	ldr	r3, [pc, #376]	; (80044bc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004344:	60bb      	str	r3, [r7, #8]
      break;
 8004346:	e0b0      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004348:	4b5a      	ldr	r3, [pc, #360]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004350:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004352:	4b58      	ldr	r3, [pc, #352]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d04a      	beq.n	80043f4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800435e:	4b55      	ldr	r3, [pc, #340]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	099b      	lsrs	r3, r3, #6
 8004364:	f04f 0400 	mov.w	r4, #0
 8004368:	f240 11ff 	movw	r1, #511	; 0x1ff
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	ea03 0501 	and.w	r5, r3, r1
 8004374:	ea04 0602 	and.w	r6, r4, r2
 8004378:	4629      	mov	r1, r5
 800437a:	4632      	mov	r2, r6
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	f04f 0400 	mov.w	r4, #0
 8004384:	0154      	lsls	r4, r2, #5
 8004386:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800438a:	014b      	lsls	r3, r1, #5
 800438c:	4619      	mov	r1, r3
 800438e:	4622      	mov	r2, r4
 8004390:	1b49      	subs	r1, r1, r5
 8004392:	eb62 0206 	sbc.w	r2, r2, r6
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	f04f 0400 	mov.w	r4, #0
 800439e:	0194      	lsls	r4, r2, #6
 80043a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043a4:	018b      	lsls	r3, r1, #6
 80043a6:	1a5b      	subs	r3, r3, r1
 80043a8:	eb64 0402 	sbc.w	r4, r4, r2
 80043ac:	f04f 0100 	mov.w	r1, #0
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	00e2      	lsls	r2, r4, #3
 80043b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043ba:	00d9      	lsls	r1, r3, #3
 80043bc:	460b      	mov	r3, r1
 80043be:	4614      	mov	r4, r2
 80043c0:	195b      	adds	r3, r3, r5
 80043c2:	eb44 0406 	adc.w	r4, r4, r6
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	0262      	lsls	r2, r4, #9
 80043d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80043d4:	0259      	lsls	r1, r3, #9
 80043d6:	460b      	mov	r3, r1
 80043d8:	4614      	mov	r4, r2
 80043da:	4618      	mov	r0, r3
 80043dc:	4621      	mov	r1, r4
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f04f 0400 	mov.w	r4, #0
 80043e4:	461a      	mov	r2, r3
 80043e6:	4623      	mov	r3, r4
 80043e8:	f7fc fb94 	bl	8000b14 <__aeabi_uldivmod>
 80043ec:	4603      	mov	r3, r0
 80043ee:	460c      	mov	r4, r1
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	e049      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043f4:	4b2f      	ldr	r3, [pc, #188]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	099b      	lsrs	r3, r3, #6
 80043fa:	f04f 0400 	mov.w	r4, #0
 80043fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	ea03 0501 	and.w	r5, r3, r1
 800440a:	ea04 0602 	and.w	r6, r4, r2
 800440e:	4629      	mov	r1, r5
 8004410:	4632      	mov	r2, r6
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	f04f 0400 	mov.w	r4, #0
 800441a:	0154      	lsls	r4, r2, #5
 800441c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004420:	014b      	lsls	r3, r1, #5
 8004422:	4619      	mov	r1, r3
 8004424:	4622      	mov	r2, r4
 8004426:	1b49      	subs	r1, r1, r5
 8004428:	eb62 0206 	sbc.w	r2, r2, r6
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	f04f 0400 	mov.w	r4, #0
 8004434:	0194      	lsls	r4, r2, #6
 8004436:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800443a:	018b      	lsls	r3, r1, #6
 800443c:	1a5b      	subs	r3, r3, r1
 800443e:	eb64 0402 	sbc.w	r4, r4, r2
 8004442:	f04f 0100 	mov.w	r1, #0
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	00e2      	lsls	r2, r4, #3
 800444c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004450:	00d9      	lsls	r1, r3, #3
 8004452:	460b      	mov	r3, r1
 8004454:	4614      	mov	r4, r2
 8004456:	195b      	adds	r3, r3, r5
 8004458:	eb44 0406 	adc.w	r4, r4, r6
 800445c:	f04f 0100 	mov.w	r1, #0
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	02a2      	lsls	r2, r4, #10
 8004466:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800446a:	0299      	lsls	r1, r3, #10
 800446c:	460b      	mov	r3, r1
 800446e:	4614      	mov	r4, r2
 8004470:	4618      	mov	r0, r3
 8004472:	4621      	mov	r1, r4
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f04f 0400 	mov.w	r4, #0
 800447a:	461a      	mov	r2, r3
 800447c:	4623      	mov	r3, r4
 800447e:	f7fc fb49 	bl	8000b14 <__aeabi_uldivmod>
 8004482:	4603      	mov	r3, r0
 8004484:	460c      	mov	r4, r1
 8004486:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004488:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	0c1b      	lsrs	r3, r3, #16
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	3301      	adds	r3, #1
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	60bb      	str	r3, [r7, #8]
      break;
 80044a2:	e002      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044a4:	4b04      	ldr	r3, [pc, #16]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80044a6:	60bb      	str	r3, [r7, #8]
      break;
 80044a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044aa:	68bb      	ldr	r3, [r7, #8]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044b4:	40023800 	.word	0x40023800
 80044b8:	00f42400 	.word	0x00f42400
 80044bc:	007a1200 	.word	0x007a1200

080044c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044c6:	681b      	ldr	r3, [r3, #0]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	200000a8 	.word	0x200000a8

080044d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044dc:	f7ff fff0 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 80044e0:	4601      	mov	r1, r0
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	0a9b      	lsrs	r3, r3, #10
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	4a03      	ldr	r2, [pc, #12]	; (80044fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ee:	5cd3      	ldrb	r3, [r2, r3]
 80044f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40023800 	.word	0x40023800
 80044fc:	080065c4 	.word	0x080065c4

08004500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004504:	f7ff ffdc 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 8004508:	4601      	mov	r1, r0
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	0b5b      	lsrs	r3, r3, #13
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	4a03      	ldr	r2, [pc, #12]	; (8004524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004516:	5cd3      	ldrb	r3, [r2, r3]
 8004518:	fa21 f303 	lsr.w	r3, r1, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40023800 	.word	0x40023800
 8004524:	080065c4 	.word	0x080065c4

08004528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e01d      	b.n	8004576 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fe faf8 	bl	8002b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3304      	adds	r3, #4
 8004564:	4619      	mov	r1, r3
 8004566:	4610      	mov	r0, r2
 8004568:	f000 fc26 	bl	8004db8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800457e:	b480      	push	{r7}
 8004580:	b085      	sub	sp, #20
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2202      	movs	r2, #2
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b06      	cmp	r3, #6
 800459e:	d007      	beq.n	80045b0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b085      	sub	sp, #20
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0201 	orr.w	r2, r2, #1
 80045dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b06      	cmp	r3, #6
 80045ee:	d007      	beq.n	8004600 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e01d      	b.n	800465c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d106      	bne.n	800463a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7fe fa63 	bl	8002b00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2202      	movs	r2, #2
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3304      	adds	r3, #4
 800464a:	4619      	mov	r1, r3
 800464c:	4610      	mov	r0, r2
 800464e:	f000 fbb3 	bl	8004db8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2201      	movs	r2, #1
 8004674:	6839      	ldr	r1, [r7, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fe44 	bl	8005304 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a10      	ldr	r2, [pc, #64]	; (80046c4 <HAL_TIM_PWM_Start+0x60>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d107      	bne.n	8004696 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004694:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2b06      	cmp	r3, #6
 80046a6:	d007      	beq.n	80046b8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40010000 	.word	0x40010000

080046c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e083      	b.n	80047e4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d106      	bne.n	80046f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7fe f9bd 	bl	8002a70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2202      	movs	r2, #2
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800470c:	f023 0307 	bic.w	r3, r3, #7
 8004710:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3304      	adds	r3, #4
 800471a:	4619      	mov	r1, r3
 800471c:	4610      	mov	r0, r2
 800471e:	f000 fb4b 	bl	8004db8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800474a:	f023 0303 	bic.w	r3, r3, #3
 800474e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	021b      	lsls	r3, r3, #8
 800475a:	4313      	orrs	r3, r2
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004768:	f023 030c 	bic.w	r3, r3, #12
 800476c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004774:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004778:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	4313      	orrs	r3, r2
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	011a      	lsls	r2, r3, #4
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	031b      	lsls	r3, r3, #12
 8004798:	4313      	orrs	r3, r2
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80047a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80047ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	4313      	orrs	r3, r2
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <HAL_TIM_Encoder_Start+0x16>
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d008      	beq.n	8004812 <HAL_TIM_Encoder_Start+0x26>
 8004800:	e00f      	b.n	8004822 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2201      	movs	r2, #1
 8004808:	2100      	movs	r1, #0
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fd7a 	bl	8005304 <TIM_CCxChannelCmd>
      break;
 8004810:	e016      	b.n	8004840 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2201      	movs	r2, #1
 8004818:	2104      	movs	r1, #4
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fd72 	bl	8005304 <TIM_CCxChannelCmd>
      break;
 8004820:	e00e      	b.n	8004840 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2201      	movs	r2, #1
 8004828:	2100      	movs	r1, #0
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fd6a 	bl	8005304 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2201      	movs	r2, #1
 8004836:	2104      	movs	r1, #4
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fd63 	bl	8005304 <TIM_CCxChannelCmd>
      break;
 800483e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b082      	sub	sp, #8
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b02      	cmp	r3, #2
 800486e:	d122      	bne.n	80048b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b02      	cmp	r3, #2
 800487c:	d11b      	bne.n	80048b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f06f 0202 	mvn.w	r2, #2
 8004886:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fa6c 	bl	8004d7a <HAL_TIM_IC_CaptureCallback>
 80048a2:	e005      	b.n	80048b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 fa5e 	bl	8004d66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fa6f 	bl	8004d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d122      	bne.n	800490a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d11b      	bne.n	800490a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f06f 0204 	mvn.w	r2, #4
 80048da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fa42 	bl	8004d7a <HAL_TIM_IC_CaptureCallback>
 80048f6:	e005      	b.n	8004904 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fa34 	bl	8004d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fa45 	bl	8004d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b08      	cmp	r3, #8
 8004916:	d122      	bne.n	800495e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b08      	cmp	r3, #8
 8004924:	d11b      	bne.n	800495e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f06f 0208 	mvn.w	r2, #8
 800492e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2204      	movs	r2, #4
 8004934:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fa18 	bl	8004d7a <HAL_TIM_IC_CaptureCallback>
 800494a:	e005      	b.n	8004958 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fa0a 	bl	8004d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fa1b 	bl	8004d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f003 0310 	and.w	r3, r3, #16
 8004968:	2b10      	cmp	r3, #16
 800496a:	d122      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	2b10      	cmp	r3, #16
 8004978:	d11b      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f06f 0210 	mvn.w	r2, #16
 8004982:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2208      	movs	r2, #8
 8004988:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f9ee 	bl	8004d7a <HAL_TIM_IC_CaptureCallback>
 800499e:	e005      	b.n	80049ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f9e0 	bl	8004d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f9f1 	bl	8004d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d10e      	bne.n	80049de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d107      	bne.n	80049de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f06f 0201 	mvn.w	r2, #1
 80049d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7fd fa73 	bl	8001ec4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e8:	2b80      	cmp	r3, #128	; 0x80
 80049ea:	d10e      	bne.n	8004a0a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f6:	2b80      	cmp	r3, #128	; 0x80
 80049f8:	d107      	bne.n	8004a0a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fd1b 	bl	8005440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a14:	2b40      	cmp	r3, #64	; 0x40
 8004a16:	d10e      	bne.n	8004a36 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a22:	2b40      	cmp	r3, #64	; 0x40
 8004a24:	d107      	bne.n	8004a36 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f9b6 	bl	8004da2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	d10e      	bne.n	8004a62 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	d107      	bne.n	8004a62 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f06f 0220 	mvn.w	r2, #32
 8004a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fce5 	bl	800542c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a62:	bf00      	nop
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d101      	bne.n	8004a86 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a82:	2302      	movs	r3, #2
 8004a84:	e0b4      	b.n	8004bf0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2202      	movs	r2, #2
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b0c      	cmp	r3, #12
 8004a9a:	f200 809f 	bhi.w	8004bdc <HAL_TIM_PWM_ConfigChannel+0x170>
 8004a9e:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004ad9 	.word	0x08004ad9
 8004aa8:	08004bdd 	.word	0x08004bdd
 8004aac:	08004bdd 	.word	0x08004bdd
 8004ab0:	08004bdd 	.word	0x08004bdd
 8004ab4:	08004b19 	.word	0x08004b19
 8004ab8:	08004bdd 	.word	0x08004bdd
 8004abc:	08004bdd 	.word	0x08004bdd
 8004ac0:	08004bdd 	.word	0x08004bdd
 8004ac4:	08004b5b 	.word	0x08004b5b
 8004ac8:	08004bdd 	.word	0x08004bdd
 8004acc:	08004bdd 	.word	0x08004bdd
 8004ad0:	08004bdd 	.word	0x08004bdd
 8004ad4:	08004b9b 	.word	0x08004b9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 f9ea 	bl	8004eb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0208 	orr.w	r2, r2, #8
 8004af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0204 	bic.w	r2, r2, #4
 8004b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6999      	ldr	r1, [r3, #24]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	619a      	str	r2, [r3, #24]
      break;
 8004b16:	e062      	b.n	8004bde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fa30 	bl	8004f84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6999      	ldr	r1, [r3, #24]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	021a      	lsls	r2, r3, #8
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	619a      	str	r2, [r3, #24]
      break;
 8004b58:	e041      	b.n	8004bde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68b9      	ldr	r1, [r7, #8]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 fa7b 	bl	800505c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0208 	orr.w	r2, r2, #8
 8004b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0204 	bic.w	r2, r2, #4
 8004b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69d9      	ldr	r1, [r3, #28]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	61da      	str	r2, [r3, #28]
      break;
 8004b98:	e021      	b.n	8004bde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fac5 	bl	8005130 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69d9      	ldr	r1, [r3, #28]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	021a      	lsls	r2, r3, #8
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	61da      	str	r2, [r3, #28]
      break;
 8004bda:	e000      	b.n	8004bde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004bdc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_TIM_ConfigClockSource+0x18>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e0a6      	b.n	8004d5e <HAL_TIM_ConfigClockSource+0x166>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b40      	cmp	r3, #64	; 0x40
 8004c46:	d067      	beq.n	8004d18 <HAL_TIM_ConfigClockSource+0x120>
 8004c48:	2b40      	cmp	r3, #64	; 0x40
 8004c4a:	d80b      	bhi.n	8004c64 <HAL_TIM_ConfigClockSource+0x6c>
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d073      	beq.n	8004d38 <HAL_TIM_ConfigClockSource+0x140>
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d802      	bhi.n	8004c5a <HAL_TIM_ConfigClockSource+0x62>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d06f      	beq.n	8004d38 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004c58:	e078      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d06c      	beq.n	8004d38 <HAL_TIM_ConfigClockSource+0x140>
 8004c5e:	2b30      	cmp	r3, #48	; 0x30
 8004c60:	d06a      	beq.n	8004d38 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004c62:	e073      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c64:	2b70      	cmp	r3, #112	; 0x70
 8004c66:	d00d      	beq.n	8004c84 <HAL_TIM_ConfigClockSource+0x8c>
 8004c68:	2b70      	cmp	r3, #112	; 0x70
 8004c6a:	d804      	bhi.n	8004c76 <HAL_TIM_ConfigClockSource+0x7e>
 8004c6c:	2b50      	cmp	r3, #80	; 0x50
 8004c6e:	d033      	beq.n	8004cd8 <HAL_TIM_ConfigClockSource+0xe0>
 8004c70:	2b60      	cmp	r3, #96	; 0x60
 8004c72:	d041      	beq.n	8004cf8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c74:	e06a      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7a:	d066      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x152>
 8004c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c80:	d017      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c82:	e063      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	6899      	ldr	r1, [r3, #8]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f000 fb16 	bl	80052c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ca6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	609a      	str	r2, [r3, #8]
      break;
 8004cb0:	e04c      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6899      	ldr	r1, [r3, #8]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f000 faff 	bl	80052c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cd4:	609a      	str	r2, [r3, #8]
      break;
 8004cd6:	e039      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6818      	ldr	r0, [r3, #0]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	6859      	ldr	r1, [r3, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	f000 fa73 	bl	80051d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2150      	movs	r1, #80	; 0x50
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 facc 	bl	800528e <TIM_ITRx_SetConfig>
      break;
 8004cf6:	e029      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	6859      	ldr	r1, [r3, #4]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	461a      	mov	r2, r3
 8004d06:	f000 fa92 	bl	800522e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2160      	movs	r1, #96	; 0x60
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fabc 	bl	800528e <TIM_ITRx_SetConfig>
      break;
 8004d16:	e019      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	6859      	ldr	r1, [r3, #4]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	461a      	mov	r2, r3
 8004d26:	f000 fa53 	bl	80051d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2140      	movs	r1, #64	; 0x40
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 faac 	bl	800528e <TIM_ITRx_SetConfig>
      break;
 8004d36:	e009      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4619      	mov	r1, r3
 8004d42:	4610      	mov	r0, r2
 8004d44:	f000 faa3 	bl	800528e <TIM_ITRx_SetConfig>
      break;
 8004d48:	e000      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004d4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
	...

08004db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a34      	ldr	r2, [pc, #208]	; (8004e9c <TIM_Base_SetConfig+0xe4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d00f      	beq.n	8004df0 <TIM_Base_SetConfig+0x38>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd6:	d00b      	beq.n	8004df0 <TIM_Base_SetConfig+0x38>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a31      	ldr	r2, [pc, #196]	; (8004ea0 <TIM_Base_SetConfig+0xe8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d007      	beq.n	8004df0 <TIM_Base_SetConfig+0x38>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a30      	ldr	r2, [pc, #192]	; (8004ea4 <TIM_Base_SetConfig+0xec>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d003      	beq.n	8004df0 <TIM_Base_SetConfig+0x38>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a2f      	ldr	r2, [pc, #188]	; (8004ea8 <TIM_Base_SetConfig+0xf0>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d108      	bne.n	8004e02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a25      	ldr	r2, [pc, #148]	; (8004e9c <TIM_Base_SetConfig+0xe4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d01b      	beq.n	8004e42 <TIM_Base_SetConfig+0x8a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e10:	d017      	beq.n	8004e42 <TIM_Base_SetConfig+0x8a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a22      	ldr	r2, [pc, #136]	; (8004ea0 <TIM_Base_SetConfig+0xe8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <TIM_Base_SetConfig+0x8a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a21      	ldr	r2, [pc, #132]	; (8004ea4 <TIM_Base_SetConfig+0xec>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00f      	beq.n	8004e42 <TIM_Base_SetConfig+0x8a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a20      	ldr	r2, [pc, #128]	; (8004ea8 <TIM_Base_SetConfig+0xf0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00b      	beq.n	8004e42 <TIM_Base_SetConfig+0x8a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a1f      	ldr	r2, [pc, #124]	; (8004eac <TIM_Base_SetConfig+0xf4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d007      	beq.n	8004e42 <TIM_Base_SetConfig+0x8a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a1e      	ldr	r2, [pc, #120]	; (8004eb0 <TIM_Base_SetConfig+0xf8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d003      	beq.n	8004e42 <TIM_Base_SetConfig+0x8a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a1d      	ldr	r2, [pc, #116]	; (8004eb4 <TIM_Base_SetConfig+0xfc>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d108      	bne.n	8004e54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a08      	ldr	r2, [pc, #32]	; (8004e9c <TIM_Base_SetConfig+0xe4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d103      	bne.n	8004e88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	615a      	str	r2, [r3, #20]
}
 8004e8e:	bf00      	nop
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40010000 	.word	0x40010000
 8004ea0:	40000400 	.word	0x40000400
 8004ea4:	40000800 	.word	0x40000800
 8004ea8:	40000c00 	.word	0x40000c00
 8004eac:	40014000 	.word	0x40014000
 8004eb0:	40014400 	.word	0x40014400
 8004eb4:	40014800 	.word	0x40014800

08004eb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	f023 0201 	bic.w	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0303 	bic.w	r3, r3, #3
 8004eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f023 0302 	bic.w	r3, r3, #2
 8004f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a1c      	ldr	r2, [pc, #112]	; (8004f80 <TIM_OC1_SetConfig+0xc8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d10c      	bne.n	8004f2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f023 0308 	bic.w	r3, r3, #8
 8004f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f023 0304 	bic.w	r3, r3, #4
 8004f2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a13      	ldr	r2, [pc, #76]	; (8004f80 <TIM_OC1_SetConfig+0xc8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d111      	bne.n	8004f5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	621a      	str	r2, [r3, #32]
}
 8004f74:	bf00      	nop
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	40010000 	.word	0x40010000

08004f84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	f023 0210 	bic.w	r2, r3, #16
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	021b      	lsls	r3, r3, #8
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f023 0320 	bic.w	r3, r3, #32
 8004fce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a1e      	ldr	r2, [pc, #120]	; (8005058 <TIM_OC2_SetConfig+0xd4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d10d      	bne.n	8005000 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ffe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a15      	ldr	r2, [pc, #84]	; (8005058 <TIM_OC2_SetConfig+0xd4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d113      	bne.n	8005030 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800500e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	621a      	str	r2, [r3, #32]
}
 800504a:	bf00      	nop
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40010000 	.word	0x40010000

0800505c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0303 	bic.w	r3, r3, #3
 8005092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	021b      	lsls	r3, r3, #8
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a1d      	ldr	r2, [pc, #116]	; (800512c <TIM_OC3_SetConfig+0xd0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d10d      	bne.n	80050d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a14      	ldr	r2, [pc, #80]	; (800512c <TIM_OC3_SetConfig+0xd0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d113      	bne.n	8005106 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	621a      	str	r2, [r3, #32]
}
 8005120:	bf00      	nop
 8005122:	371c      	adds	r7, #28
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	40010000 	.word	0x40010000

08005130 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800515e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	021b      	lsls	r3, r3, #8
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4313      	orrs	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800517a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	031b      	lsls	r3, r3, #12
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a10      	ldr	r2, [pc, #64]	; (80051cc <TIM_OC4_SetConfig+0x9c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d109      	bne.n	80051a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005196:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	019b      	lsls	r3, r3, #6
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	621a      	str	r2, [r3, #32]
}
 80051be:	bf00      	nop
 80051c0:	371c      	adds	r7, #28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40010000 	.word	0x40010000

080051d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	f023 0201 	bic.w	r2, r3, #1
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f023 030a 	bic.w	r3, r3, #10
 800520c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	621a      	str	r2, [r3, #32]
}
 8005222:	bf00      	nop
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800522e:	b480      	push	{r7}
 8005230:	b087      	sub	sp, #28
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	f023 0210 	bic.w	r2, r3, #16
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005258:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	031b      	lsls	r3, r3, #12
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4313      	orrs	r3, r2
 8005262:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800526a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	621a      	str	r2, [r3, #32]
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800528e:	b480      	push	{r7}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f043 0307 	orr.w	r3, r3, #7
 80052b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	609a      	str	r2, [r3, #8]
}
 80052b8:	bf00      	nop
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	021a      	lsls	r2, r3, #8
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	431a      	orrs	r2, r3
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	609a      	str	r2, [r3, #8]
}
 80052f8:	bf00      	nop
 80052fa:	371c      	adds	r7, #28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f003 031f 	and.w	r3, r3, #31
 8005316:	2201      	movs	r2, #1
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6a1a      	ldr	r2, [r3, #32]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	43db      	mvns	r3, r3
 8005326:	401a      	ands	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a1a      	ldr	r2, [r3, #32]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 031f 	and.w	r3, r3, #31
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	fa01 f303 	lsl.w	r3, r1, r3
 800533c:	431a      	orrs	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	621a      	str	r2, [r3, #32]
}
 8005342:	bf00      	nop
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
	...

08005350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005360:	2b01      	cmp	r3, #1
 8005362:	d101      	bne.n	8005368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005364:	2302      	movs	r3, #2
 8005366:	e050      	b.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1c      	ldr	r2, [pc, #112]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d018      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b4:	d013      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a18      	ldr	r2, [pc, #96]	; (800541c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00e      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a16      	ldr	r2, [pc, #88]	; (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d009      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a15      	ldr	r2, [pc, #84]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d004      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a13      	ldr	r2, [pc, #76]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d10c      	bne.n	80053f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40010000 	.word	0x40010000
 800541c:	40000400 	.word	0x40000400
 8005420:	40000800 	.word	0x40000800
 8005424:	40000c00 	.word	0x40000c00
 8005428:	40014000 	.word	0x40014000

0800542c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e03f      	b.n	80054e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d106      	bne.n	8005480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fd fbc4 	bl	8002c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2224      	movs	r2, #36	; 0x24
 8005484:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fc41 	bl	8005d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695a      	ldr	r2, [r3, #20]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	4613      	mov	r3, r2
 80054fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b20      	cmp	r3, #32
 8005508:	d153      	bne.n	80055b2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <HAL_UART_Transmit_DMA+0x26>
 8005510:	88fb      	ldrh	r3, [r7, #6]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e04c      	b.n	80055b4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_UART_Transmit_DMA+0x38>
 8005524:	2302      	movs	r3, #2
 8005526:	e045      	b.n	80055b4 <HAL_UART_Transmit_DMA+0xc4>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	88fa      	ldrh	r2, [r7, #6]
 800553a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	88fa      	ldrh	r2, [r7, #6]
 8005540:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2221      	movs	r2, #33	; 0x21
 800554c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005554:	4a19      	ldr	r2, [pc, #100]	; (80055bc <HAL_UART_Transmit_DMA+0xcc>)
 8005556:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555c:	4a18      	ldr	r2, [pc, #96]	; (80055c0 <HAL_UART_Transmit_DMA+0xd0>)
 800555e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005564:	4a17      	ldr	r2, [pc, #92]	; (80055c4 <HAL_UART_Transmit_DMA+0xd4>)
 8005566:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556c:	2200      	movs	r2, #0
 800556e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005570:	f107 0308 	add.w	r3, r7, #8
 8005574:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	6819      	ldr	r1, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3304      	adds	r3, #4
 8005584:	461a      	mov	r2, r3
 8005586:	88fb      	ldrh	r3, [r7, #6]
 8005588:	f7fd feee 	bl	8003368 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005594:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695a      	ldr	r2, [r3, #20]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055ac:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	e000      	b.n	80055b4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80055b2:	2302      	movs	r3, #2
  }
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	0800592d 	.word	0x0800592d
 80055c0:	0800597f 	.word	0x0800597f
 80055c4:	08005a1f 	.word	0x08005a1f

080055c8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	4613      	mov	r3, r2
 80055d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b20      	cmp	r3, #32
 80055e0:	d166      	bne.n	80056b0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <HAL_UART_Receive_DMA+0x26>
 80055e8:	88fb      	ldrh	r3, [r7, #6]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e05f      	b.n	80056b2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_UART_Receive_DMA+0x38>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e058      	b.n	80056b2 <HAL_UART_Receive_DMA+0xea>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	88fa      	ldrh	r2, [r7, #6]
 8005612:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2222      	movs	r2, #34	; 0x22
 800561e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005626:	4a25      	ldr	r2, [pc, #148]	; (80056bc <HAL_UART_Receive_DMA+0xf4>)
 8005628:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562e:	4a24      	ldr	r2, [pc, #144]	; (80056c0 <HAL_UART_Receive_DMA+0xf8>)
 8005630:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005636:	4a23      	ldr	r2, [pc, #140]	; (80056c4 <HAL_UART_Receive_DMA+0xfc>)
 8005638:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563e:	2200      	movs	r2, #0
 8005640:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005642:	f107 0308 	add.w	r3, r7, #8
 8005646:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3304      	adds	r3, #4
 8005652:	4619      	mov	r1, r3
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	88fb      	ldrh	r3, [r7, #6]
 800565a:	f7fd fe85 	bl	8003368 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800565e:	2300      	movs	r3, #0
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	613b      	str	r3, [r7, #16]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	613b      	str	r3, [r7, #16]
 8005672:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800568a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	695a      	ldr	r2, [r3, #20]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0201 	orr.w	r2, r2, #1
 800569a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695a      	ldr	r2, [r3, #20]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056aa:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	e000      	b.n	80056b2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80056b0:	2302      	movs	r3, #2
  }
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	0800599b 	.word	0x0800599b
 80056c0:	08005a03 	.word	0x08005a03
 80056c4:	08005a1f 	.word	0x08005a1f

080056c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f003 030f 	and.w	r3, r3, #15
 80056f6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10d      	bne.n	800571a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d008      	beq.n	800571a <HAL_UART_IRQHandler+0x52>
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	f003 0320 	and.w	r3, r3, #32
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fa83 	bl	8005c1e <UART_Receive_IT>
      return;
 8005718:	e0d1      	b.n	80058be <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 80b0 	beq.w	8005882 <HAL_UART_IRQHandler+0x1ba>
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d105      	bne.n	8005738 <HAL_UART_IRQHandler+0x70>
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 80a5 	beq.w	8005882 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <HAL_UART_IRQHandler+0x90>
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	d005      	beq.n	8005758 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005750:	f043 0201 	orr.w	r2, r3, #1
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	f003 0304 	and.w	r3, r3, #4
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <HAL_UART_IRQHandler+0xb0>
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005770:	f043 0202 	orr.w	r2, r3, #2
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <HAL_UART_IRQHandler+0xd0>
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d005      	beq.n	8005798 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005790:	f043 0204 	orr.w	r2, r3, #4
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00f      	beq.n	80057c2 <HAL_UART_IRQHandler+0xfa>
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d104      	bne.n	80057b6 <HAL_UART_IRQHandler+0xee>
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d005      	beq.n	80057c2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ba:	f043 0208 	orr.w	r2, r3, #8
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d078      	beq.n	80058bc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	f003 0320 	and.w	r3, r3, #32
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d007      	beq.n	80057e4 <HAL_UART_IRQHandler+0x11c>
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fa1d 	bl	8005c1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ee:	2b40      	cmp	r3, #64	; 0x40
 80057f0:	bf0c      	ite	eq
 80057f2:	2301      	moveq	r3, #1
 80057f4:	2300      	movne	r3, #0
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d102      	bne.n	800580c <HAL_UART_IRQHandler+0x144>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d031      	beq.n	8005870 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f966 	bl	8005ade <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581c:	2b40      	cmp	r3, #64	; 0x40
 800581e:	d123      	bne.n	8005868 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695a      	ldr	r2, [r3, #20]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800582e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005834:	2b00      	cmp	r3, #0
 8005836:	d013      	beq.n	8005860 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583c:	4a21      	ldr	r2, [pc, #132]	; (80058c4 <HAL_UART_IRQHandler+0x1fc>)
 800583e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005844:	4618      	mov	r0, r3
 8005846:	f7fd fde7 	bl	8003418 <HAL_DMA_Abort_IT>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d016      	beq.n	800587e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800585a:	4610      	mov	r0, r2
 800585c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800585e:	e00e      	b.n	800587e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f859 	bl	8005918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005866:	e00a      	b.n	800587e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f855 	bl	8005918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800586e:	e006      	b.n	800587e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f851 	bl	8005918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800587c:	e01e      	b.n	80058bc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800587e:	bf00      	nop
    return;
 8005880:	e01c      	b.n	80058bc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005888:	2b00      	cmp	r3, #0
 800588a:	d008      	beq.n	800589e <HAL_UART_IRQHandler+0x1d6>
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f953 	bl	8005b42 <UART_Transmit_IT>
    return;
 800589c:	e00f      	b.n	80058be <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <HAL_UART_IRQHandler+0x1f6>
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d005      	beq.n	80058be <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f99b 	bl	8005bee <UART_EndTransmit_IT>
    return;
 80058b8:	bf00      	nop
 80058ba:	e000      	b.n	80058be <HAL_UART_IRQHandler+0x1f6>
    return;
 80058bc:	bf00      	nop
  }
}
 80058be:	3720      	adds	r7, #32
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	08005b1b 	.word	0x08005b1b

080058c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005944:	2b00      	cmp	r3, #0
 8005946:	d113      	bne.n	8005970 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695a      	ldr	r2, [r3, #20]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800595c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800596c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800596e:	e002      	b.n	8005976 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f7ff ffa9 	bl	80058c8 <HAL_UART_TxCpltCallback>
}
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f7ff ffa5 	bl	80058dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005992:	bf00      	nop
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d11e      	bne.n	80059f4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059ca:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695a      	ldr	r2, [r3, #20]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0201 	bic.w	r2, r2, #1
 80059da:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ea:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f7ff ff7b 	bl	80058f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059fa:	bf00      	nop
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f7ff ff77 	bl	8005904 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3a:	2b80      	cmp	r3, #128	; 0x80
 8005a3c:	bf0c      	ite	eq
 8005a3e:	2301      	moveq	r3, #1
 8005a40:	2300      	movne	r3, #0
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b21      	cmp	r3, #33	; 0x21
 8005a50:	d108      	bne.n	8005a64 <UART_DMAError+0x46>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005a5e:	68b8      	ldr	r0, [r7, #8]
 8005a60:	f000 f827 	bl	8005ab2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	bf0c      	ite	eq
 8005a72:	2301      	moveq	r3, #1
 8005a74:	2300      	movne	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b22      	cmp	r3, #34	; 0x22
 8005a84:	d108      	bne.n	8005a98 <UART_DMAError+0x7a>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005a92:	68b8      	ldr	r0, [r7, #8]
 8005a94:	f000 f823 	bl	8005ade <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9c:	f043 0210 	orr.w	r2, r3, #16
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005aa4:	68b8      	ldr	r0, [r7, #8]
 8005aa6:	f7ff ff37 	bl	8005918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aaa:	bf00      	nop
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005ac8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2220      	movs	r2, #32
 8005ace:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005af4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695a      	ldr	r2, [r3, #20]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 0201 	bic.w	r2, r2, #1
 8005b04:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f7ff feef 	bl	8005918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b3a:	bf00      	nop
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b085      	sub	sp, #20
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b21      	cmp	r3, #33	; 0x21
 8005b54:	d144      	bne.n	8005be0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b5e:	d11a      	bne.n	8005b96 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b74:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d105      	bne.n	8005b8a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	1c9a      	adds	r2, r3, #2
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	621a      	str	r2, [r3, #32]
 8005b88:	e00e      	b.n	8005ba8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	621a      	str	r2, [r3, #32]
 8005b94:	e008      	b.n	8005ba8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	1c59      	adds	r1, r3, #1
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6211      	str	r1, [r2, #32]
 8005ba0:	781a      	ldrb	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10f      	bne.n	8005bdc <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e000      	b.n	8005be2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005be0:	2302      	movs	r3, #2
  }
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b082      	sub	sp, #8
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7ff fe5a 	bl	80058c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b22      	cmp	r3, #34	; 0x22
 8005c30:	d171      	bne.n	8005d16 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3a:	d123      	bne.n	8005c84 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10e      	bne.n	8005c68 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c60:	1c9a      	adds	r2, r3, #2
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	629a      	str	r2, [r3, #40]	; 0x28
 8005c66:	e029      	b.n	8005cbc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	629a      	str	r2, [r3, #40]	; 0x28
 8005c82:	e01b      	b.n	8005cbc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10a      	bne.n	8005ca2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6858      	ldr	r0, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c96:	1c59      	adds	r1, r3, #1
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6291      	str	r1, [r2, #40]	; 0x28
 8005c9c:	b2c2      	uxtb	r2, r0
 8005c9e:	701a      	strb	r2, [r3, #0]
 8005ca0:	e00c      	b.n	8005cbc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cae:	1c58      	adds	r0, r3, #1
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	6288      	str	r0, [r1, #40]	; 0x28
 8005cb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d120      	bne.n	8005d12 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0220 	bic.w	r2, r2, #32
 8005cde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695a      	ldr	r2, [r3, #20]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0201 	bic.w	r2, r2, #1
 8005cfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff fdf1 	bl	80058f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e002      	b.n	8005d18 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	e000      	b.n	8005d18 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005d16:	2302      	movs	r3, #2
  }
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d24:	b085      	sub	sp, #20
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68da      	ldr	r2, [r3, #12]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d62:	f023 030c 	bic.w	r3, r3, #12
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	68f9      	ldr	r1, [r7, #12]
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d8e:	f040 818b 	bne.w	80060a8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4ac1      	ldr	r2, [pc, #772]	; (800609c <UART_SetConfig+0x37c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d005      	beq.n	8005da8 <UART_SetConfig+0x88>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4abf      	ldr	r2, [pc, #764]	; (80060a0 <UART_SetConfig+0x380>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	f040 80bd 	bne.w	8005f22 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005da8:	f7fe fbaa 	bl	8004500 <HAL_RCC_GetPCLK2Freq>
 8005dac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	461d      	mov	r5, r3
 8005db2:	f04f 0600 	mov.w	r6, #0
 8005db6:	46a8      	mov	r8, r5
 8005db8:	46b1      	mov	r9, r6
 8005dba:	eb18 0308 	adds.w	r3, r8, r8
 8005dbe:	eb49 0409 	adc.w	r4, r9, r9
 8005dc2:	4698      	mov	r8, r3
 8005dc4:	46a1      	mov	r9, r4
 8005dc6:	eb18 0805 	adds.w	r8, r8, r5
 8005dca:	eb49 0906 	adc.w	r9, r9, r6
 8005dce:	f04f 0100 	mov.w	r1, #0
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005dda:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005dde:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005de2:	4688      	mov	r8, r1
 8005de4:	4691      	mov	r9, r2
 8005de6:	eb18 0005 	adds.w	r0, r8, r5
 8005dea:	eb49 0106 	adc.w	r1, r9, r6
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	461d      	mov	r5, r3
 8005df4:	f04f 0600 	mov.w	r6, #0
 8005df8:	196b      	adds	r3, r5, r5
 8005dfa:	eb46 0406 	adc.w	r4, r6, r6
 8005dfe:	461a      	mov	r2, r3
 8005e00:	4623      	mov	r3, r4
 8005e02:	f7fa fe87 	bl	8000b14 <__aeabi_uldivmod>
 8005e06:	4603      	mov	r3, r0
 8005e08:	460c      	mov	r4, r1
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	4ba5      	ldr	r3, [pc, #660]	; (80060a4 <UART_SetConfig+0x384>)
 8005e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e12:	095b      	lsrs	r3, r3, #5
 8005e14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	461d      	mov	r5, r3
 8005e1c:	f04f 0600 	mov.w	r6, #0
 8005e20:	46a9      	mov	r9, r5
 8005e22:	46b2      	mov	sl, r6
 8005e24:	eb19 0309 	adds.w	r3, r9, r9
 8005e28:	eb4a 040a 	adc.w	r4, sl, sl
 8005e2c:	4699      	mov	r9, r3
 8005e2e:	46a2      	mov	sl, r4
 8005e30:	eb19 0905 	adds.w	r9, r9, r5
 8005e34:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e38:	f04f 0100 	mov.w	r1, #0
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e4c:	4689      	mov	r9, r1
 8005e4e:	4692      	mov	sl, r2
 8005e50:	eb19 0005 	adds.w	r0, r9, r5
 8005e54:	eb4a 0106 	adc.w	r1, sl, r6
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	461d      	mov	r5, r3
 8005e5e:	f04f 0600 	mov.w	r6, #0
 8005e62:	196b      	adds	r3, r5, r5
 8005e64:	eb46 0406 	adc.w	r4, r6, r6
 8005e68:	461a      	mov	r2, r3
 8005e6a:	4623      	mov	r3, r4
 8005e6c:	f7fa fe52 	bl	8000b14 <__aeabi_uldivmod>
 8005e70:	4603      	mov	r3, r0
 8005e72:	460c      	mov	r4, r1
 8005e74:	461a      	mov	r2, r3
 8005e76:	4b8b      	ldr	r3, [pc, #556]	; (80060a4 <UART_SetConfig+0x384>)
 8005e78:	fba3 1302 	umull	r1, r3, r3, r2
 8005e7c:	095b      	lsrs	r3, r3, #5
 8005e7e:	2164      	movs	r1, #100	; 0x64
 8005e80:	fb01 f303 	mul.w	r3, r1, r3
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	3332      	adds	r3, #50	; 0x32
 8005e8a:	4a86      	ldr	r2, [pc, #536]	; (80060a4 <UART_SetConfig+0x384>)
 8005e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e90:	095b      	lsrs	r3, r3, #5
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e98:	4498      	add	r8, r3
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	461d      	mov	r5, r3
 8005e9e:	f04f 0600 	mov.w	r6, #0
 8005ea2:	46a9      	mov	r9, r5
 8005ea4:	46b2      	mov	sl, r6
 8005ea6:	eb19 0309 	adds.w	r3, r9, r9
 8005eaa:	eb4a 040a 	adc.w	r4, sl, sl
 8005eae:	4699      	mov	r9, r3
 8005eb0:	46a2      	mov	sl, r4
 8005eb2:	eb19 0905 	adds.w	r9, r9, r5
 8005eb6:	eb4a 0a06 	adc.w	sl, sl, r6
 8005eba:	f04f 0100 	mov.w	r1, #0
 8005ebe:	f04f 0200 	mov.w	r2, #0
 8005ec2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ec6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005eca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ece:	4689      	mov	r9, r1
 8005ed0:	4692      	mov	sl, r2
 8005ed2:	eb19 0005 	adds.w	r0, r9, r5
 8005ed6:	eb4a 0106 	adc.w	r1, sl, r6
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	461d      	mov	r5, r3
 8005ee0:	f04f 0600 	mov.w	r6, #0
 8005ee4:	196b      	adds	r3, r5, r5
 8005ee6:	eb46 0406 	adc.w	r4, r6, r6
 8005eea:	461a      	mov	r2, r3
 8005eec:	4623      	mov	r3, r4
 8005eee:	f7fa fe11 	bl	8000b14 <__aeabi_uldivmod>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	4b6a      	ldr	r3, [pc, #424]	; (80060a4 <UART_SetConfig+0x384>)
 8005efa:	fba3 1302 	umull	r1, r3, r3, r2
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	2164      	movs	r1, #100	; 0x64
 8005f02:	fb01 f303 	mul.w	r3, r1, r3
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	3332      	adds	r3, #50	; 0x32
 8005f0c:	4a65      	ldr	r2, [pc, #404]	; (80060a4 <UART_SetConfig+0x384>)
 8005f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	f003 0207 	and.w	r2, r3, #7
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4442      	add	r2, r8
 8005f1e:	609a      	str	r2, [r3, #8]
 8005f20:	e26f      	b.n	8006402 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f22:	f7fe fad9 	bl	80044d8 <HAL_RCC_GetPCLK1Freq>
 8005f26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	461d      	mov	r5, r3
 8005f2c:	f04f 0600 	mov.w	r6, #0
 8005f30:	46a8      	mov	r8, r5
 8005f32:	46b1      	mov	r9, r6
 8005f34:	eb18 0308 	adds.w	r3, r8, r8
 8005f38:	eb49 0409 	adc.w	r4, r9, r9
 8005f3c:	4698      	mov	r8, r3
 8005f3e:	46a1      	mov	r9, r4
 8005f40:	eb18 0805 	adds.w	r8, r8, r5
 8005f44:	eb49 0906 	adc.w	r9, r9, r6
 8005f48:	f04f 0100 	mov.w	r1, #0
 8005f4c:	f04f 0200 	mov.w	r2, #0
 8005f50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f5c:	4688      	mov	r8, r1
 8005f5e:	4691      	mov	r9, r2
 8005f60:	eb18 0005 	adds.w	r0, r8, r5
 8005f64:	eb49 0106 	adc.w	r1, r9, r6
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	461d      	mov	r5, r3
 8005f6e:	f04f 0600 	mov.w	r6, #0
 8005f72:	196b      	adds	r3, r5, r5
 8005f74:	eb46 0406 	adc.w	r4, r6, r6
 8005f78:	461a      	mov	r2, r3
 8005f7a:	4623      	mov	r3, r4
 8005f7c:	f7fa fdca 	bl	8000b14 <__aeabi_uldivmod>
 8005f80:	4603      	mov	r3, r0
 8005f82:	460c      	mov	r4, r1
 8005f84:	461a      	mov	r2, r3
 8005f86:	4b47      	ldr	r3, [pc, #284]	; (80060a4 <UART_SetConfig+0x384>)
 8005f88:	fba3 2302 	umull	r2, r3, r3, r2
 8005f8c:	095b      	lsrs	r3, r3, #5
 8005f8e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	461d      	mov	r5, r3
 8005f96:	f04f 0600 	mov.w	r6, #0
 8005f9a:	46a9      	mov	r9, r5
 8005f9c:	46b2      	mov	sl, r6
 8005f9e:	eb19 0309 	adds.w	r3, r9, r9
 8005fa2:	eb4a 040a 	adc.w	r4, sl, sl
 8005fa6:	4699      	mov	r9, r3
 8005fa8:	46a2      	mov	sl, r4
 8005faa:	eb19 0905 	adds.w	r9, r9, r5
 8005fae:	eb4a 0a06 	adc.w	sl, sl, r6
 8005fb2:	f04f 0100 	mov.w	r1, #0
 8005fb6:	f04f 0200 	mov.w	r2, #0
 8005fba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fc6:	4689      	mov	r9, r1
 8005fc8:	4692      	mov	sl, r2
 8005fca:	eb19 0005 	adds.w	r0, r9, r5
 8005fce:	eb4a 0106 	adc.w	r1, sl, r6
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	461d      	mov	r5, r3
 8005fd8:	f04f 0600 	mov.w	r6, #0
 8005fdc:	196b      	adds	r3, r5, r5
 8005fde:	eb46 0406 	adc.w	r4, r6, r6
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	4623      	mov	r3, r4
 8005fe6:	f7fa fd95 	bl	8000b14 <__aeabi_uldivmod>
 8005fea:	4603      	mov	r3, r0
 8005fec:	460c      	mov	r4, r1
 8005fee:	461a      	mov	r2, r3
 8005ff0:	4b2c      	ldr	r3, [pc, #176]	; (80060a4 <UART_SetConfig+0x384>)
 8005ff2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	2164      	movs	r1, #100	; 0x64
 8005ffa:	fb01 f303 	mul.w	r3, r1, r3
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	3332      	adds	r3, #50	; 0x32
 8006004:	4a27      	ldr	r2, [pc, #156]	; (80060a4 <UART_SetConfig+0x384>)
 8006006:	fba2 2303 	umull	r2, r3, r2, r3
 800600a:	095b      	lsrs	r3, r3, #5
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006012:	4498      	add	r8, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	461d      	mov	r5, r3
 8006018:	f04f 0600 	mov.w	r6, #0
 800601c:	46a9      	mov	r9, r5
 800601e:	46b2      	mov	sl, r6
 8006020:	eb19 0309 	adds.w	r3, r9, r9
 8006024:	eb4a 040a 	adc.w	r4, sl, sl
 8006028:	4699      	mov	r9, r3
 800602a:	46a2      	mov	sl, r4
 800602c:	eb19 0905 	adds.w	r9, r9, r5
 8006030:	eb4a 0a06 	adc.w	sl, sl, r6
 8006034:	f04f 0100 	mov.w	r1, #0
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006040:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006044:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006048:	4689      	mov	r9, r1
 800604a:	4692      	mov	sl, r2
 800604c:	eb19 0005 	adds.w	r0, r9, r5
 8006050:	eb4a 0106 	adc.w	r1, sl, r6
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	461d      	mov	r5, r3
 800605a:	f04f 0600 	mov.w	r6, #0
 800605e:	196b      	adds	r3, r5, r5
 8006060:	eb46 0406 	adc.w	r4, r6, r6
 8006064:	461a      	mov	r2, r3
 8006066:	4623      	mov	r3, r4
 8006068:	f7fa fd54 	bl	8000b14 <__aeabi_uldivmod>
 800606c:	4603      	mov	r3, r0
 800606e:	460c      	mov	r4, r1
 8006070:	461a      	mov	r2, r3
 8006072:	4b0c      	ldr	r3, [pc, #48]	; (80060a4 <UART_SetConfig+0x384>)
 8006074:	fba3 1302 	umull	r1, r3, r3, r2
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	2164      	movs	r1, #100	; 0x64
 800607c:	fb01 f303 	mul.w	r3, r1, r3
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	3332      	adds	r3, #50	; 0x32
 8006086:	4a07      	ldr	r2, [pc, #28]	; (80060a4 <UART_SetConfig+0x384>)
 8006088:	fba2 2303 	umull	r2, r3, r2, r3
 800608c:	095b      	lsrs	r3, r3, #5
 800608e:	f003 0207 	and.w	r2, r3, #7
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4442      	add	r2, r8
 8006098:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800609a:	e1b2      	b.n	8006402 <UART_SetConfig+0x6e2>
 800609c:	40011000 	.word	0x40011000
 80060a0:	40011400 	.word	0x40011400
 80060a4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4ad7      	ldr	r2, [pc, #860]	; (800640c <UART_SetConfig+0x6ec>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d005      	beq.n	80060be <UART_SetConfig+0x39e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4ad6      	ldr	r2, [pc, #856]	; (8006410 <UART_SetConfig+0x6f0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	f040 80d1 	bne.w	8006260 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80060be:	f7fe fa1f 	bl	8004500 <HAL_RCC_GetPCLK2Freq>
 80060c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	469a      	mov	sl, r3
 80060c8:	f04f 0b00 	mov.w	fp, #0
 80060cc:	46d0      	mov	r8, sl
 80060ce:	46d9      	mov	r9, fp
 80060d0:	eb18 0308 	adds.w	r3, r8, r8
 80060d4:	eb49 0409 	adc.w	r4, r9, r9
 80060d8:	4698      	mov	r8, r3
 80060da:	46a1      	mov	r9, r4
 80060dc:	eb18 080a 	adds.w	r8, r8, sl
 80060e0:	eb49 090b 	adc.w	r9, r9, fp
 80060e4:	f04f 0100 	mov.w	r1, #0
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060f8:	4688      	mov	r8, r1
 80060fa:	4691      	mov	r9, r2
 80060fc:	eb1a 0508 	adds.w	r5, sl, r8
 8006100:	eb4b 0609 	adc.w	r6, fp, r9
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	4619      	mov	r1, r3
 800610a:	f04f 0200 	mov.w	r2, #0
 800610e:	f04f 0300 	mov.w	r3, #0
 8006112:	f04f 0400 	mov.w	r4, #0
 8006116:	0094      	lsls	r4, r2, #2
 8006118:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800611c:	008b      	lsls	r3, r1, #2
 800611e:	461a      	mov	r2, r3
 8006120:	4623      	mov	r3, r4
 8006122:	4628      	mov	r0, r5
 8006124:	4631      	mov	r1, r6
 8006126:	f7fa fcf5 	bl	8000b14 <__aeabi_uldivmod>
 800612a:	4603      	mov	r3, r0
 800612c:	460c      	mov	r4, r1
 800612e:	461a      	mov	r2, r3
 8006130:	4bb8      	ldr	r3, [pc, #736]	; (8006414 <UART_SetConfig+0x6f4>)
 8006132:	fba3 2302 	umull	r2, r3, r3, r2
 8006136:	095b      	lsrs	r3, r3, #5
 8006138:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	469b      	mov	fp, r3
 8006140:	f04f 0c00 	mov.w	ip, #0
 8006144:	46d9      	mov	r9, fp
 8006146:	46e2      	mov	sl, ip
 8006148:	eb19 0309 	adds.w	r3, r9, r9
 800614c:	eb4a 040a 	adc.w	r4, sl, sl
 8006150:	4699      	mov	r9, r3
 8006152:	46a2      	mov	sl, r4
 8006154:	eb19 090b 	adds.w	r9, r9, fp
 8006158:	eb4a 0a0c 	adc.w	sl, sl, ip
 800615c:	f04f 0100 	mov.w	r1, #0
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006168:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800616c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006170:	4689      	mov	r9, r1
 8006172:	4692      	mov	sl, r2
 8006174:	eb1b 0509 	adds.w	r5, fp, r9
 8006178:	eb4c 060a 	adc.w	r6, ip, sl
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	4619      	mov	r1, r3
 8006182:	f04f 0200 	mov.w	r2, #0
 8006186:	f04f 0300 	mov.w	r3, #0
 800618a:	f04f 0400 	mov.w	r4, #0
 800618e:	0094      	lsls	r4, r2, #2
 8006190:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006194:	008b      	lsls	r3, r1, #2
 8006196:	461a      	mov	r2, r3
 8006198:	4623      	mov	r3, r4
 800619a:	4628      	mov	r0, r5
 800619c:	4631      	mov	r1, r6
 800619e:	f7fa fcb9 	bl	8000b14 <__aeabi_uldivmod>
 80061a2:	4603      	mov	r3, r0
 80061a4:	460c      	mov	r4, r1
 80061a6:	461a      	mov	r2, r3
 80061a8:	4b9a      	ldr	r3, [pc, #616]	; (8006414 <UART_SetConfig+0x6f4>)
 80061aa:	fba3 1302 	umull	r1, r3, r3, r2
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	2164      	movs	r1, #100	; 0x64
 80061b2:	fb01 f303 	mul.w	r3, r1, r3
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	3332      	adds	r3, #50	; 0x32
 80061bc:	4a95      	ldr	r2, [pc, #596]	; (8006414 <UART_SetConfig+0x6f4>)
 80061be:	fba2 2303 	umull	r2, r3, r2, r3
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061c8:	4498      	add	r8, r3
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	469b      	mov	fp, r3
 80061ce:	f04f 0c00 	mov.w	ip, #0
 80061d2:	46d9      	mov	r9, fp
 80061d4:	46e2      	mov	sl, ip
 80061d6:	eb19 0309 	adds.w	r3, r9, r9
 80061da:	eb4a 040a 	adc.w	r4, sl, sl
 80061de:	4699      	mov	r9, r3
 80061e0:	46a2      	mov	sl, r4
 80061e2:	eb19 090b 	adds.w	r9, r9, fp
 80061e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061ea:	f04f 0100 	mov.w	r1, #0
 80061ee:	f04f 0200 	mov.w	r2, #0
 80061f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061fe:	4689      	mov	r9, r1
 8006200:	4692      	mov	sl, r2
 8006202:	eb1b 0509 	adds.w	r5, fp, r9
 8006206:	eb4c 060a 	adc.w	r6, ip, sl
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	4619      	mov	r1, r3
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	f04f 0400 	mov.w	r4, #0
 800621c:	0094      	lsls	r4, r2, #2
 800621e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006222:	008b      	lsls	r3, r1, #2
 8006224:	461a      	mov	r2, r3
 8006226:	4623      	mov	r3, r4
 8006228:	4628      	mov	r0, r5
 800622a:	4631      	mov	r1, r6
 800622c:	f7fa fc72 	bl	8000b14 <__aeabi_uldivmod>
 8006230:	4603      	mov	r3, r0
 8006232:	460c      	mov	r4, r1
 8006234:	461a      	mov	r2, r3
 8006236:	4b77      	ldr	r3, [pc, #476]	; (8006414 <UART_SetConfig+0x6f4>)
 8006238:	fba3 1302 	umull	r1, r3, r3, r2
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	2164      	movs	r1, #100	; 0x64
 8006240:	fb01 f303 	mul.w	r3, r1, r3
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	3332      	adds	r3, #50	; 0x32
 800624a:	4a72      	ldr	r2, [pc, #456]	; (8006414 <UART_SetConfig+0x6f4>)
 800624c:	fba2 2303 	umull	r2, r3, r2, r3
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	f003 020f 	and.w	r2, r3, #15
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4442      	add	r2, r8
 800625c:	609a      	str	r2, [r3, #8]
 800625e:	e0d0      	b.n	8006402 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006260:	f7fe f93a 	bl	80044d8 <HAL_RCC_GetPCLK1Freq>
 8006264:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	469a      	mov	sl, r3
 800626a:	f04f 0b00 	mov.w	fp, #0
 800626e:	46d0      	mov	r8, sl
 8006270:	46d9      	mov	r9, fp
 8006272:	eb18 0308 	adds.w	r3, r8, r8
 8006276:	eb49 0409 	adc.w	r4, r9, r9
 800627a:	4698      	mov	r8, r3
 800627c:	46a1      	mov	r9, r4
 800627e:	eb18 080a 	adds.w	r8, r8, sl
 8006282:	eb49 090b 	adc.w	r9, r9, fp
 8006286:	f04f 0100 	mov.w	r1, #0
 800628a:	f04f 0200 	mov.w	r2, #0
 800628e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006292:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006296:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800629a:	4688      	mov	r8, r1
 800629c:	4691      	mov	r9, r2
 800629e:	eb1a 0508 	adds.w	r5, sl, r8
 80062a2:	eb4b 0609 	adc.w	r6, fp, r9
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	4619      	mov	r1, r3
 80062ac:	f04f 0200 	mov.w	r2, #0
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	f04f 0400 	mov.w	r4, #0
 80062b8:	0094      	lsls	r4, r2, #2
 80062ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062be:	008b      	lsls	r3, r1, #2
 80062c0:	461a      	mov	r2, r3
 80062c2:	4623      	mov	r3, r4
 80062c4:	4628      	mov	r0, r5
 80062c6:	4631      	mov	r1, r6
 80062c8:	f7fa fc24 	bl	8000b14 <__aeabi_uldivmod>
 80062cc:	4603      	mov	r3, r0
 80062ce:	460c      	mov	r4, r1
 80062d0:	461a      	mov	r2, r3
 80062d2:	4b50      	ldr	r3, [pc, #320]	; (8006414 <UART_SetConfig+0x6f4>)
 80062d4:	fba3 2302 	umull	r2, r3, r3, r2
 80062d8:	095b      	lsrs	r3, r3, #5
 80062da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	469b      	mov	fp, r3
 80062e2:	f04f 0c00 	mov.w	ip, #0
 80062e6:	46d9      	mov	r9, fp
 80062e8:	46e2      	mov	sl, ip
 80062ea:	eb19 0309 	adds.w	r3, r9, r9
 80062ee:	eb4a 040a 	adc.w	r4, sl, sl
 80062f2:	4699      	mov	r9, r3
 80062f4:	46a2      	mov	sl, r4
 80062f6:	eb19 090b 	adds.w	r9, r9, fp
 80062fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062fe:	f04f 0100 	mov.w	r1, #0
 8006302:	f04f 0200 	mov.w	r2, #0
 8006306:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800630a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800630e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006312:	4689      	mov	r9, r1
 8006314:	4692      	mov	sl, r2
 8006316:	eb1b 0509 	adds.w	r5, fp, r9
 800631a:	eb4c 060a 	adc.w	r6, ip, sl
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	4619      	mov	r1, r3
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	f04f 0400 	mov.w	r4, #0
 8006330:	0094      	lsls	r4, r2, #2
 8006332:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006336:	008b      	lsls	r3, r1, #2
 8006338:	461a      	mov	r2, r3
 800633a:	4623      	mov	r3, r4
 800633c:	4628      	mov	r0, r5
 800633e:	4631      	mov	r1, r6
 8006340:	f7fa fbe8 	bl	8000b14 <__aeabi_uldivmod>
 8006344:	4603      	mov	r3, r0
 8006346:	460c      	mov	r4, r1
 8006348:	461a      	mov	r2, r3
 800634a:	4b32      	ldr	r3, [pc, #200]	; (8006414 <UART_SetConfig+0x6f4>)
 800634c:	fba3 1302 	umull	r1, r3, r3, r2
 8006350:	095b      	lsrs	r3, r3, #5
 8006352:	2164      	movs	r1, #100	; 0x64
 8006354:	fb01 f303 	mul.w	r3, r1, r3
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	3332      	adds	r3, #50	; 0x32
 800635e:	4a2d      	ldr	r2, [pc, #180]	; (8006414 <UART_SetConfig+0x6f4>)
 8006360:	fba2 2303 	umull	r2, r3, r2, r3
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800636a:	4498      	add	r8, r3
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	469b      	mov	fp, r3
 8006370:	f04f 0c00 	mov.w	ip, #0
 8006374:	46d9      	mov	r9, fp
 8006376:	46e2      	mov	sl, ip
 8006378:	eb19 0309 	adds.w	r3, r9, r9
 800637c:	eb4a 040a 	adc.w	r4, sl, sl
 8006380:	4699      	mov	r9, r3
 8006382:	46a2      	mov	sl, r4
 8006384:	eb19 090b 	adds.w	r9, r9, fp
 8006388:	eb4a 0a0c 	adc.w	sl, sl, ip
 800638c:	f04f 0100 	mov.w	r1, #0
 8006390:	f04f 0200 	mov.w	r2, #0
 8006394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006398:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800639c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063a0:	4689      	mov	r9, r1
 80063a2:	4692      	mov	sl, r2
 80063a4:	eb1b 0509 	adds.w	r5, fp, r9
 80063a8:	eb4c 060a 	adc.w	r6, ip, sl
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	4619      	mov	r1, r3
 80063b2:	f04f 0200 	mov.w	r2, #0
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	f04f 0400 	mov.w	r4, #0
 80063be:	0094      	lsls	r4, r2, #2
 80063c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063c4:	008b      	lsls	r3, r1, #2
 80063c6:	461a      	mov	r2, r3
 80063c8:	4623      	mov	r3, r4
 80063ca:	4628      	mov	r0, r5
 80063cc:	4631      	mov	r1, r6
 80063ce:	f7fa fba1 	bl	8000b14 <__aeabi_uldivmod>
 80063d2:	4603      	mov	r3, r0
 80063d4:	460c      	mov	r4, r1
 80063d6:	461a      	mov	r2, r3
 80063d8:	4b0e      	ldr	r3, [pc, #56]	; (8006414 <UART_SetConfig+0x6f4>)
 80063da:	fba3 1302 	umull	r1, r3, r3, r2
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	2164      	movs	r1, #100	; 0x64
 80063e2:	fb01 f303 	mul.w	r3, r1, r3
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	3332      	adds	r3, #50	; 0x32
 80063ec:	4a09      	ldr	r2, [pc, #36]	; (8006414 <UART_SetConfig+0x6f4>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	095b      	lsrs	r3, r3, #5
 80063f4:	f003 020f 	and.w	r2, r3, #15
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4442      	add	r2, r8
 80063fe:	609a      	str	r2, [r3, #8]
}
 8006400:	e7ff      	b.n	8006402 <UART_SetConfig+0x6e2>
 8006402:	bf00      	nop
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800640c:	40011000 	.word	0x40011000
 8006410:	40011400 	.word	0x40011400
 8006414:	51eb851f 	.word	0x51eb851f

08006418 <calloc>:
 8006418:	4b02      	ldr	r3, [pc, #8]	; (8006424 <calloc+0xc>)
 800641a:	460a      	mov	r2, r1
 800641c:	4601      	mov	r1, r0
 800641e:	6818      	ldr	r0, [r3, #0]
 8006420:	f000 b83f 	b.w	80064a2 <_calloc_r>
 8006424:	200000b4 	.word	0x200000b4

08006428 <__errno>:
 8006428:	4b01      	ldr	r3, [pc, #4]	; (8006430 <__errno+0x8>)
 800642a:	6818      	ldr	r0, [r3, #0]
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	200000b4 	.word	0x200000b4

08006434 <__libc_init_array>:
 8006434:	b570      	push	{r4, r5, r6, lr}
 8006436:	4e0d      	ldr	r6, [pc, #52]	; (800646c <__libc_init_array+0x38>)
 8006438:	4c0d      	ldr	r4, [pc, #52]	; (8006470 <__libc_init_array+0x3c>)
 800643a:	1ba4      	subs	r4, r4, r6
 800643c:	10a4      	asrs	r4, r4, #2
 800643e:	2500      	movs	r5, #0
 8006440:	42a5      	cmp	r5, r4
 8006442:	d109      	bne.n	8006458 <__libc_init_array+0x24>
 8006444:	4e0b      	ldr	r6, [pc, #44]	; (8006474 <__libc_init_array+0x40>)
 8006446:	4c0c      	ldr	r4, [pc, #48]	; (8006478 <__libc_init_array+0x44>)
 8006448:	f000 f8a6 	bl	8006598 <_init>
 800644c:	1ba4      	subs	r4, r4, r6
 800644e:	10a4      	asrs	r4, r4, #2
 8006450:	2500      	movs	r5, #0
 8006452:	42a5      	cmp	r5, r4
 8006454:	d105      	bne.n	8006462 <__libc_init_array+0x2e>
 8006456:	bd70      	pop	{r4, r5, r6, pc}
 8006458:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800645c:	4798      	blx	r3
 800645e:	3501      	adds	r5, #1
 8006460:	e7ee      	b.n	8006440 <__libc_init_array+0xc>
 8006462:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006466:	4798      	blx	r3
 8006468:	3501      	adds	r5, #1
 800646a:	e7f2      	b.n	8006452 <__libc_init_array+0x1e>
 800646c:	080065dc 	.word	0x080065dc
 8006470:	080065dc 	.word	0x080065dc
 8006474:	080065dc 	.word	0x080065dc
 8006478:	080065e0 	.word	0x080065e0

0800647c <memcpy>:
 800647c:	b510      	push	{r4, lr}
 800647e:	1e43      	subs	r3, r0, #1
 8006480:	440a      	add	r2, r1
 8006482:	4291      	cmp	r1, r2
 8006484:	d100      	bne.n	8006488 <memcpy+0xc>
 8006486:	bd10      	pop	{r4, pc}
 8006488:	f811 4b01 	ldrb.w	r4, [r1], #1
 800648c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006490:	e7f7      	b.n	8006482 <memcpy+0x6>

08006492 <memset>:
 8006492:	4402      	add	r2, r0
 8006494:	4603      	mov	r3, r0
 8006496:	4293      	cmp	r3, r2
 8006498:	d100      	bne.n	800649c <memset+0xa>
 800649a:	4770      	bx	lr
 800649c:	f803 1b01 	strb.w	r1, [r3], #1
 80064a0:	e7f9      	b.n	8006496 <memset+0x4>

080064a2 <_calloc_r>:
 80064a2:	b538      	push	{r3, r4, r5, lr}
 80064a4:	fb02 f401 	mul.w	r4, r2, r1
 80064a8:	4621      	mov	r1, r4
 80064aa:	f000 f809 	bl	80064c0 <_malloc_r>
 80064ae:	4605      	mov	r5, r0
 80064b0:	b118      	cbz	r0, 80064ba <_calloc_r+0x18>
 80064b2:	4622      	mov	r2, r4
 80064b4:	2100      	movs	r1, #0
 80064b6:	f7ff ffec 	bl	8006492 <memset>
 80064ba:	4628      	mov	r0, r5
 80064bc:	bd38      	pop	{r3, r4, r5, pc}
	...

080064c0 <_malloc_r>:
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	1ccd      	adds	r5, r1, #3
 80064c4:	f025 0503 	bic.w	r5, r5, #3
 80064c8:	3508      	adds	r5, #8
 80064ca:	2d0c      	cmp	r5, #12
 80064cc:	bf38      	it	cc
 80064ce:	250c      	movcc	r5, #12
 80064d0:	2d00      	cmp	r5, #0
 80064d2:	4606      	mov	r6, r0
 80064d4:	db01      	blt.n	80064da <_malloc_r+0x1a>
 80064d6:	42a9      	cmp	r1, r5
 80064d8:	d903      	bls.n	80064e2 <_malloc_r+0x22>
 80064da:	230c      	movs	r3, #12
 80064dc:	6033      	str	r3, [r6, #0]
 80064de:	2000      	movs	r0, #0
 80064e0:	bd70      	pop	{r4, r5, r6, pc}
 80064e2:	f000 f857 	bl	8006594 <__malloc_lock>
 80064e6:	4a21      	ldr	r2, [pc, #132]	; (800656c <_malloc_r+0xac>)
 80064e8:	6814      	ldr	r4, [r2, #0]
 80064ea:	4621      	mov	r1, r4
 80064ec:	b991      	cbnz	r1, 8006514 <_malloc_r+0x54>
 80064ee:	4c20      	ldr	r4, [pc, #128]	; (8006570 <_malloc_r+0xb0>)
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	b91b      	cbnz	r3, 80064fc <_malloc_r+0x3c>
 80064f4:	4630      	mov	r0, r6
 80064f6:	f000 f83d 	bl	8006574 <_sbrk_r>
 80064fa:	6020      	str	r0, [r4, #0]
 80064fc:	4629      	mov	r1, r5
 80064fe:	4630      	mov	r0, r6
 8006500:	f000 f838 	bl	8006574 <_sbrk_r>
 8006504:	1c43      	adds	r3, r0, #1
 8006506:	d124      	bne.n	8006552 <_malloc_r+0x92>
 8006508:	230c      	movs	r3, #12
 800650a:	6033      	str	r3, [r6, #0]
 800650c:	4630      	mov	r0, r6
 800650e:	f000 f842 	bl	8006596 <__malloc_unlock>
 8006512:	e7e4      	b.n	80064de <_malloc_r+0x1e>
 8006514:	680b      	ldr	r3, [r1, #0]
 8006516:	1b5b      	subs	r3, r3, r5
 8006518:	d418      	bmi.n	800654c <_malloc_r+0x8c>
 800651a:	2b0b      	cmp	r3, #11
 800651c:	d90f      	bls.n	800653e <_malloc_r+0x7e>
 800651e:	600b      	str	r3, [r1, #0]
 8006520:	50cd      	str	r5, [r1, r3]
 8006522:	18cc      	adds	r4, r1, r3
 8006524:	4630      	mov	r0, r6
 8006526:	f000 f836 	bl	8006596 <__malloc_unlock>
 800652a:	f104 000b 	add.w	r0, r4, #11
 800652e:	1d23      	adds	r3, r4, #4
 8006530:	f020 0007 	bic.w	r0, r0, #7
 8006534:	1ac3      	subs	r3, r0, r3
 8006536:	d0d3      	beq.n	80064e0 <_malloc_r+0x20>
 8006538:	425a      	negs	r2, r3
 800653a:	50e2      	str	r2, [r4, r3]
 800653c:	e7d0      	b.n	80064e0 <_malloc_r+0x20>
 800653e:	428c      	cmp	r4, r1
 8006540:	684b      	ldr	r3, [r1, #4]
 8006542:	bf16      	itet	ne
 8006544:	6063      	strne	r3, [r4, #4]
 8006546:	6013      	streq	r3, [r2, #0]
 8006548:	460c      	movne	r4, r1
 800654a:	e7eb      	b.n	8006524 <_malloc_r+0x64>
 800654c:	460c      	mov	r4, r1
 800654e:	6849      	ldr	r1, [r1, #4]
 8006550:	e7cc      	b.n	80064ec <_malloc_r+0x2c>
 8006552:	1cc4      	adds	r4, r0, #3
 8006554:	f024 0403 	bic.w	r4, r4, #3
 8006558:	42a0      	cmp	r0, r4
 800655a:	d005      	beq.n	8006568 <_malloc_r+0xa8>
 800655c:	1a21      	subs	r1, r4, r0
 800655e:	4630      	mov	r0, r6
 8006560:	f000 f808 	bl	8006574 <_sbrk_r>
 8006564:	3001      	adds	r0, #1
 8006566:	d0cf      	beq.n	8006508 <_malloc_r+0x48>
 8006568:	6025      	str	r5, [r4, #0]
 800656a:	e7db      	b.n	8006524 <_malloc_r+0x64>
 800656c:	20002694 	.word	0x20002694
 8006570:	20002698 	.word	0x20002698

08006574 <_sbrk_r>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4c06      	ldr	r4, [pc, #24]	; (8006590 <_sbrk_r+0x1c>)
 8006578:	2300      	movs	r3, #0
 800657a:	4605      	mov	r5, r0
 800657c:	4608      	mov	r0, r1
 800657e:	6023      	str	r3, [r4, #0]
 8006580:	f7fc fc4a 	bl	8002e18 <_sbrk>
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	d102      	bne.n	800658e <_sbrk_r+0x1a>
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	b103      	cbz	r3, 800658e <_sbrk_r+0x1a>
 800658c:	602b      	str	r3, [r5, #0]
 800658e:	bd38      	pop	{r3, r4, r5, pc}
 8006590:	20002860 	.word	0x20002860

08006594 <__malloc_lock>:
 8006594:	4770      	bx	lr

08006596 <__malloc_unlock>:
 8006596:	4770      	bx	lr

08006598 <_init>:
 8006598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659a:	bf00      	nop
 800659c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659e:	bc08      	pop	{r3}
 80065a0:	469e      	mov	lr, r3
 80065a2:	4770      	bx	lr

080065a4 <_fini>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	bf00      	nop
 80065a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065aa:	bc08      	pop	{r3}
 80065ac:	469e      	mov	lr, r3
 80065ae:	4770      	bx	lr
